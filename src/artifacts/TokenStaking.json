{
  "address": "0x0CD38448E54D1d5A46B0f36eD8B7C0739F94774b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract T",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract IKeepTokenStaking",
          "name": "_keepStakingContract",
          "type": "address"
        },
        {
          "internalType": "contract INuCypherStakingEscrow",
          "name": "_nucypherStakingContract",
          "type": "address"
        },
        {
          "internalType": "contract VendingMachine",
          "name": "_keepVendingMachine",
          "type": "address"
        },
        {
          "internalType": "contract VendingMachine",
          "name": "_nucypherVendingMachine",
          "type": "address"
        },
        {
          "internalType": "contract KeepStake",
          "name": "_keepStake",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum TokenStaking.ApplicationStatus",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "ApplicationStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ceiling",
          "type": "uint256"
        }
      ],
      "name": "AuthorizationCeilingSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fromAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "toAmount",
          "type": "uint96"
        }
      ],
      "name": "AuthorizationDecreaseApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fromAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "toAmount",
          "type": "uint96"
        }
      ],
      "name": "AuthorizationDecreaseRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fromAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "toAmount",
          "type": "uint96"
        }
      ],
      "name": "AuthorizationIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fromAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "toAmount",
          "type": "uint96"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "successfulCall",
          "type": "bool"
        }
      ],
      "name": "AuthorizationInvoluntaryDecreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldGovernance",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGovernance",
          "type": "address"
        }
      ],
      "name": "GovernanceTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "MinimumStakeAmountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "reward",
          "type": "uint96"
        }
      ],
      "name": "NotificationRewardPushed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "reward",
          "type": "uint96"
        }
      ],
      "name": "NotificationRewardSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "NotificationRewardWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "notifier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotifierRewarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerRefreshed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "panicButton",
          "type": "address"
        }
      ],
      "name": "PanicButtonSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        }
      ],
      "name": "SlashingProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "penalty",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardMultiplier",
          "type": "uint256"
        }
      ],
      "name": "StakeDiscrepancyPenaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum IStaking.StakeType",
          "name": "stakeType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "discrepancy",
          "type": "bool"
        }
      ],
      "name": "TokensSeized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "ToppedUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "applicationInfo",
      "outputs": [
        {
          "internalType": "enum TokenStaking.ApplicationStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "panicButton",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "applications",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "approveApplication",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "approveAuthorizationDecrease",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authorizationCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "authorizedStake",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "pos",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fromBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint96",
              "name": "votes",
              "type": "uint96"
            }
          ],
          "internalType": "struct Checkpoints.Checkpoint",
          "name": "checkpoint",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegateVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "disableApplication",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "forceDecreaseAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getApplicationsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "getAvailableToAuthorize",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "availableTValue",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "enum IStaking.StakeType",
          "name": "stakeTypes",
          "type": "uint8"
        }
      ],
      "name": "getMinStaked",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastTotalSupply",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSlashingQueueLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "getStartStakingTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "increaseAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minTStakeAmount",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notificationReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notifiersTreasury",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "notifyKeepStakeDiscrepancy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "notifyNuStakeDiscrepancy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        }
      ],
      "name": "pauseApplication",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "processSlashing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "reward",
          "type": "uint96"
        }
      ],
      "name": "pushNotificationReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "refreshKeepStakeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "requestAuthorizationDecrease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "requestAuthorizationDecrease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "rolesOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "rewardMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "notifier",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_stakingProviders",
          "type": "address[]"
        }
      ],
      "name": "seize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ceiling",
          "type": "uint256"
        }
      ],
      "name": "setAuthorizationCeiling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "setMinimumStakeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "reward",
          "type": "uint96"
        }
      ],
      "name": "setNotificationReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "application",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "panicButton",
          "type": "address"
        }
      ],
      "name": "setPanicButton",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "penalty",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "rewardMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setStakeDiscrepancyPenalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        },
        {
          "internalType": "address[]",
          "name": "_stakingProviders",
          "type": "address[]"
        }
      ],
      "name": "slash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "slashingQueue",
      "outputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slashingQueueIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeDiscrepancyPenalty",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeDiscrepancyRewardMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "stakeKeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        }
      ],
      "name": "stakeNu",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "stakedNu",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nuAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "tStake",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "keepInTStake",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "nuInTStake",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "topUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "topUpKeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "topUpNu",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGuvnor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "unstakeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        }
      ],
      "name": "unstakeKeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "unstakeNu",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingProvider",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "unstakeT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "withdrawNotificationReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1309d11d850232835fa7a233f6ff019c9d17657af62bd7d03b1d30ecaaa30944",
  "receipt": {
    "to": null,
    "from": "0x819871C3Af9d26AaA3d8D17B2A79D1E313c56735",
    "contractAddress": "0x0CD38448E54D1d5A46B0f36eD8B7C0739F94774b",
    "transactionIndex": 38,
    "gasUsed": "5287039",
    "logsBloom": "0x
    "blockHash": "0x0ed7b3ada49d05238a6f822c67b2c9edab2d6c3a02de0452fa1573ca4806beb1",
    "transactionHash": "0x1309d11d850232835fa7a233f6ff019c9d17657af62bd7d03b1d30ecaaa30944",
    "logs": [],
    "blockNumber": 8747818,
    "cumulativeGasUsed": "7623248",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbbff9029Ed407335c8040a3D06939d82f7869bb1",
    "0xDA8dB88b901D4f2889E0736F198b1347fEb4cae6",
    "0x1A1190Ea71d9f04Abbe315f58685D552053C6151",
    "0x2D43B1c980FeEda63fd84B694cc4103fe45849c5",
    "0xE20CFC1054c094D435AEC3640268129011BD404D",
    "0x3B5c30898DB9F6eb823C31ce19a394861f103676"
  ],
  "numDeployments": 1,
  "solcInputHash": "e0f57b23198d86f33bdc7837480522fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract T\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IKeepTokenStaking\",\"name\":\"_keepStakingContract\",\"type\":\"address\"},{\"internalType\":\"contract INuCypherStakingEscrow\",\"name\":\"_nucypherStakingContract\",\"type\":\"address\"},{\"internalType\":\"contract VendingMachine\",\"name\":\"_keepVendingMachine\",\"type\":\"address\"},{\"internalType\":\"contract VendingMachine\",\"name\":\"_nucypherVendingMachine\",\"type\":\"address\"},{\"internalType\":\"contract KeepStake\",\"name\":\"_keepStake\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum TokenStaking.ApplicationStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"ApplicationStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ceiling\",\"type\":\"uint256\"}],\"name\":\"AuthorizationCeilingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fromAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"toAmount\",\"type\":\"uint96\"}],\"name\":\"AuthorizationDecreaseApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fromAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"toAmount\",\"type\":\"uint96\"}],\"name\":\"AuthorizationDecreaseRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fromAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"toAmount\",\"type\":\"uint96\"}],\"name\":\"AuthorizationIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fromAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"toAmount\",\"type\":\"uint96\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"successfulCall\",\"type\":\"bool\"}],\"name\":\"AuthorizationInvoluntaryDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGovernance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"MinimumStakeAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"reward\",\"type\":\"uint96\"}],\"name\":\"NotificationRewardPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"reward\",\"type\":\"uint96\"}],\"name\":\"NotificationRewardSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"NotificationRewardWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"notifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifierRewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerRefreshed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"panicButton\",\"type\":\"address\"}],\"name\":\"PanicButtonSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"SlashingProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"penalty\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"StakeDiscrepancyPenaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IStaking.StakeType\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"discrepancy\",\"type\":\"bool\"}],\"name\":\"TokensSeized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"ToppedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"applicationInfo\",\"outputs\":[{\"internalType\":\"enum TokenStaking.ApplicationStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"panicButton\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"applications\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"approveApplication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"approveAuthorizationDecrease\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authorizationCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"authorizedStake\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct Checkpoints.Checkpoint\",\"name\":\"checkpoint\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegateVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"disableApplication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"forceDecreaseAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApplicationsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"getAvailableToAuthorize\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"availableTValue\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"enum IStaking.StakeType\",\"name\":\"stakeTypes\",\"type\":\"uint8\"}],\"name\":\"getMinStaked\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlashingQueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"getStartStakingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"increaseAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTStakeAmount\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notificationReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notifiersTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"notifyKeepStakeDiscrepancy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"notifyNuStakeDiscrepancy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"pauseApplication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"processSlashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"reward\",\"type\":\"uint96\"}],\"name\":\"pushNotificationReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"refreshKeepStakeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"requestAuthorizationDecrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"requestAuthorizationDecrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"rolesOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"rewardMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"notifier\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_stakingProviders\",\"type\":\"address[]\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ceiling\",\"type\":\"uint256\"}],\"name\":\"setAuthorizationCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"setMinimumStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"reward\",\"type\":\"uint96\"}],\"name\":\"setNotificationReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"panicButton\",\"type\":\"address\"}],\"name\":\"setPanicButton\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"penalty\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"rewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"setStakeDiscrepancyPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"address[]\",\"name\":\"_stakingProviders\",\"type\":\"address[]\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slashingQueue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slashingQueueIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDiscrepancyPenalty\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDiscrepancyRewardMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"stakeKeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"}],\"name\":\"stakeNu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"stakedNu\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nuAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"tStake\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"keepInTStake\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"nuInTStake\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"topUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"topUpKeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"topUpNu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuvnor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"unstakeKeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"unstakeNu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"unstakeT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"withdrawNotificationReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"TokenStaking is upgradeable, using OpenZeppelin's Upgradeability      framework. As such, it is required to satisfy OZ's guidelines, like      restrictions on constructors, immutable variables, base contracts and      libraries. See https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"params\":{\"_keepStake\":\"Address of Keep contract with grant owners\",\"_keepStakingContract\":\"Address of Keep staking contract\",\"_keepVendingMachine\":\"Address of Keep vending machine\",\"_nucypherStakingContract\":\"Address of NuCypher staking contract\",\"_nucypherVendingMachine\":\"Address of NuCypher vending machine\",\"_token\":\"Address of T token contract\"}},\"getMinStaked(address,uint8)\":{\"details\":\"For example, suppose the given staking provider has 10 T, 20 T worth      of KEEP, and 30 T worth of NU all staked, and the maximum      application authorization is 40 T, then `getMinStaked` for      that staking provider returns:          * 0 T if KEEP stake type specified i.e.            min = 40 T max - (10 T + 30 T worth of NU) = 0 T          * 10 T if NU stake type specified i.e.            min = 40 T max - (10 T + 20 T worth of KEEP) = 10 T          * 0 T if T stake type specified i.e.            min = 40 T max - (20 T worth of KEEP + 30 T worth of NU) < 0 T      In other words, the minimum stake amount for the specified      stake type is the minimum amount of stake of the given type      needed to satisfy the maximum application authorization given      the staked amounts of the other stake types for that staking      provider.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"`blockNumber` must have been already mined\",\"params\":{\"blockNumber\":\"The block number to get the total supply at\"}},\"getPastVotes(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will      revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"getStartStakingTimestamp(address)\":{\"details\":\"This value is set at most once.\"},\"getVotes(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"increaseAuthorization(address,address,uint96)\":{\"details\":\"Calls `authorizationIncreased` callback on the given application to      notify the application about authorization change.      See `IApplication`.\"},\"notifyNuStakeDiscrepancy(address)\":{\"details\":\"Real discrepancy between T and Nu is impossible.         This method is a safeguard in case of bugs in NuCypher staking         contract\"},\"refreshKeepStakeOwner(address)\":{\"details\":\"The staking provider in T staking contract is the legacy KEEP      staking contract operator.\"},\"requestAuthorizationDecrease(address)\":{\"details\":\"Calls `authorizationDecreaseRequested` callback      for each authorized application. See `IApplication`.\"},\"requestAuthorizationDecrease(address,address,uint96)\":{\"details\":\"Calls `authorizationDecreaseRequested` callback on the given      application. See `IApplication`.\"},\"rolesOf(address)\":{\"returns\":{\"authorizer\":\"Authorizer address.\",\"beneficiary\":\"Beneficiary address.\",\"owner\":\"Stake owner address.\"}},\"seize(uint96,uint256,address,address[])\":{\"details\":\"This method doesn't emit events for staking providers that are         added to the queue. If necessary  events can be added to the         application level.\"},\"setMinimumStakeAmount(uint96)\":{\"details\":\"Staking providers are not required to maintain a minimum T stake      all the time. 24 hours after the delegation, T stake can be reduced      below the minimum stake. The minimum stake in the staking contract      is just to protect against griefing stake operation. Please note      that each application may have its own minimum authorization though      and the authorization can not be higher than the stake.\"},\"slash(uint96,address[])\":{\"details\":\"This method doesn't emit events for providers that are added to         the queue. If necessary  events can be added to the application         level.\"},\"stake(address,address,address,uint96)\":{\"details\":\"The owner of the delegation needs to have the amount approved to      transfer to the staking contract.\"},\"stakeKeep(address)\":{\"details\":\"The staking provider in T staking contract is the legacy KEEP      staking contract operator.\"},\"stakes(address)\":{\"details\":\"All values are in T denomination\"},\"topUp(address,uint96)\":{\"details\":\"The sender of this transaction needs to have the amount approved to      transfer to the staking contract.\"},\"unstakeKeep(address)\":{\"details\":\"This function (or `unstakeAll`) must be called before         `undelegate`/`undelegateAt` in Keep staking contract. Otherwise         provider can be slashed by `notifyKeepStakeDiscrepancy` method.\"},\"unstakeNu(address,uint96)\":{\"details\":\"This function (or `unstakeAll`) must be called before `withdraw`         in NuCypher staking contract. Otherwise NU tokens can't be         unlocked.\",\"params\":{\"amount\":\"Amount of NU to unstake in T denomination\",\"stakingProvider\":\"Staking provider address\"}}},\"stateVariables\":{\"keepRatio\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"keepStake\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"keepStakingContract\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"nucypherRatio\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"nucypherStakingContract\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"token\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"version\":1},\"userdoc\":{\"events\":{\"DelegateChanged(address,address,address)\":{\"notice\":\"Emitted when an account changes their delegate.\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"notice\":\"Emitted when a balance or delegate change results in changes         to an account's voting power.\"}},\"kind\":\"user\",\"methods\":{\"approveApplication(address)\":{\"notice\":\"Allows the Governance to approve the particular application         before individual stake authorizers are able to authorize it.\"},\"approveAuthorizationDecrease(address)\":{\"notice\":\"Called by the application at its discretion to approve the         previously requested authorization decrease request. Can only be         called by the application that was previously requested to         decrease the authorization for that staking provider.         Returns resulting authorized amount for the application.\"},\"authorizedStake(address,address)\":{\"notice\":\"Returns the authorized stake amount of the staking provider for         the application.\"},\"delegateVoting(address,address)\":{\"notice\":\"Delegate voting power from the stake associated to the         `stakingProvider` to a `delegatee` address. Caller must be the         owner of this stake.\"},\"delegates(address)\":{\"notice\":\"Get the address `account` is currently delegating to.\"},\"disableApplication(address)\":{\"notice\":\"Disables the given application. The disabled application can't         slash stakers. Also stakers can't increase authorization to that         application but can decrease without waiting by calling         `forceDecreaseAuthorization` at any moment. Can be called only         by the governance. The disabled application can't be approved         again. Should be used only in case of an emergency.\"},\"forceDecreaseAuthorization(address,address)\":{\"notice\":\"Decreases the authorization for the given `stakingProvider` on         the given disabled `application`, for all authorized amount.         Can be called by anyone.\"},\"getApplicationsLength()\":{\"notice\":\"Returns length of application array\"},\"getAvailableToAuthorize(address,address)\":{\"notice\":\"Returns available amount to authorize for the specified         application.\"},\"getMinStaked(address,uint8)\":{\"notice\":\"Returns minimum possible stake for T, KEEP or NU in T denomination\"},\"getPastTotalSupply(uint256)\":{\"notice\":\"Retrieve the `totalSupply` at the end of `blockNumber`.         Note, this value is the sum of all balances, but it is NOT the         sum of all the delegated votes!\"},\"getPastVotes(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of         a block number.\"},\"getSlashingQueueLength()\":{\"notice\":\"Returns length of slashing queue\"},\"getStartStakingTimestamp(address)\":{\"notice\":\"Returns start staking timestamp.\"},\"getVotes(address)\":{\"notice\":\"Gets the current votes balance for `account`.\"},\"increaseAuthorization(address,address,uint96)\":{\"notice\":\"Increases the authorization of the given staking provider for         the given application by the given amount. Can only be called by         the given staking provider\\u2019s authorizer.\"},\"notifyKeepStakeDiscrepancy(address)\":{\"notice\":\"Notifies about the discrepancy between legacy KEEP active stake         and the amount cached in T staking contract. Slashes the staking         provider in case the amount cached is higher than the actual         active stake amount in KEEP staking contract. Needs to update         authorizations of all affected applications and execute an         involuntary authorization decrease on all affected applications.         Can be called by anyone, notifier receives a reward.\"},\"notifyNuStakeDiscrepancy(address)\":{\"notice\":\"Notifies about the discrepancy between legacy NU active stake         and the amount cached in T staking contract. Slashes the         staking provider in case the amount cached is higher than the         actual active stake amount in NU staking contract. Needs to         update authorizations of all affected applications and execute an         involuntary authorization decrease on all affected applications.         Can be called by anyone, notifier receives a reward.\"},\"numCheckpoints(address)\":{\"notice\":\"Get number of checkpoints for `account`.\"},\"pauseApplication(address)\":{\"notice\":\"Pauses the given application\\u2019s eligibility to slash stakes.         Besides that stakers can't change authorization to the application.         Can be called only by the Panic Button of the particular         application. The paused application can not slash stakes until         it is approved again by the Governance using `approveApplication`         function. Should be used only in case of an emergency.\"},\"processSlashing(uint256)\":{\"notice\":\"Takes the given number of queued slashing operations and         processes them. Receives 5% of the slashed amount.         Executes `involuntaryAuthorizationDecrease` function on each         affected application.\"},\"pushNotificationReward(uint96)\":{\"notice\":\"Transfer some amount of T tokens as reward for notifications         of misbehaviour\"},\"refreshKeepStakeOwner(address)\":{\"notice\":\"Refresh Keep stake owner. Can be called only by the old owner         or their staking provider.\"},\"requestAuthorizationDecrease(address)\":{\"notice\":\"Requests decrease of all authorizations for the given staking         provider on all applications by all authorized amount.         It may not change the authorized amount immediatelly. When         it happens depends on the application. Can only be called by the         given staking provider\\u2019s authorizer. Overwrites pending         authorization decrease for the given staking provider and         application.\"},\"requestAuthorizationDecrease(address,address,uint96)\":{\"notice\":\"Requests decrease of the authorization for the given staking         provider on the given application by the provided amount.         It may not change the authorized amount immediatelly. When         it happens depends on the application. Can only be called by the         given staking provider\\u2019s authorizer. Overwrites pending         authorization decrease for the given staking provider and         application if the application agrees for that. If the         application does not agree for overwriting, the function         reverts.\"},\"rolesOf(address)\":{\"notice\":\"Gets the stake owner, the beneficiary and the authorizer         for the specified staking provider address.\"},\"seize(uint96,uint256,address,address[])\":{\"notice\":\"Adds staking providers to the slashing queue along with the         amount. The notifier will receive reward per each provider from         notifiers treasury. Can only be called by application         authorized for all staking providers in the array.\"},\"setAuthorizationCeiling(uint256)\":{\"notice\":\"Sets the maximum number of applications one staking provider can         have authorized. Used to protect against DoSing slashing queue.         Can only be called by the Governance.\"},\"setMinimumStakeAmount(uint96)\":{\"notice\":\"Allows the Governance to set the minimum required stake amount.         This amount is required to protect against griefing the staking         contract and individual applications are allowed to require         higher minimum stakes if necessary.\"},\"setNotificationReward(uint96)\":{\"notice\":\"Sets reward in T tokens for notification of misbehaviour         of one staking provider. Can only be called by the governance.\"},\"setPanicButton(address,address)\":{\"notice\":\"Sets the Panic Button role for the given application to the         provided address. Can only be called by the Governance. If the         Panic Button for the given application should be disabled, the         role address should be set to 0x0 address.\"},\"setStakeDiscrepancyPenalty(uint96,uint256)\":{\"notice\":\"Sets the penalty amount for stake discrepancy and reward         multiplier for reporting it. The penalty is seized from the         delegated stake, and 5% of the penalty, scaled by the         multiplier, is given to the notifier. The rest of the tokens are         burned. Can only be called by the Governance. See `seize` function.\"},\"slash(uint96,address[])\":{\"notice\":\"Adds staking providers to the slashing queue along with the         amount that should be slashed from each one of them. Can only be         called by application authorized for all staking providers in         the array.\"},\"stake(address,address,address,uint96)\":{\"notice\":\"Creates a delegation with `msg.sender` owner with the given         staking provider, beneficiary, and authorizer. Transfers the         given amount of T to the staking contract.\"},\"stakeKeep(address)\":{\"notice\":\"Copies delegation from the legacy KEEP staking contract to T         staking contract. No tokens are transferred. Caches the active         stake amount from KEEP staking contract. Can be called by         anyone.\"},\"stakeNu(address,address,address)\":{\"notice\":\"Copies delegation from the legacy NU staking contract to T         staking contract, additionally appointing beneficiary and         authorizer roles. Caches the amount staked in NU staking         contract. Can be called only by the original delegation owner.\"},\"stakedNu(address)\":{\"notice\":\"Returns staked amount of NU for the specified staking provider.\"},\"stakes(address)\":{\"notice\":\"Returns staked amount of T, Keep and Nu for the specified         staking provider.\"},\"topUp(address,uint96)\":{\"notice\":\"Increases the amount of the stake for the given staking provider.\"},\"topUpKeep(address)\":{\"notice\":\"Propagates information about stake top-up from the legacy KEEP         staking contract to T staking contract. Can be called only by         the owner or the staking provider.\"},\"topUpNu(address)\":{\"notice\":\"Propagates information about stake top-up from the legacy NU         staking contract to T staking contract. Can be called only by         the owner or the staking provider.\"},\"transferGovernance(address)\":{\"notice\":\"Transfers ownership of the contract to `newGuvnor`.\"},\"unstakeAll(address)\":{\"notice\":\"Sets cached legacy stake amount to 0, sets the liquid T stake         amount to 0 and withdraws all liquid T from the stake to the         owner. Reverts if there is at least one non-zero authorization.         Can be called only by the delegation owner or the staking         provider. Can only be called when 24h passed since the stake         has been delegated.\"},\"unstakeKeep(address)\":{\"notice\":\"Sets the legacy KEEP staking contract active stake amount cached         in T staking contract to 0. Reverts if the amount of liquid T         staked in T staking contract is lower than the highest         application authorization. This function allows to unstake from         KEEP staking contract and still being able to operate in T         network and earning rewards based on the liquid T staked. Can be         called only by the delegation owner or the staking provider.         Can only be called when 24h passed since the stake has been         delegated.\"},\"unstakeNu(address,uint96)\":{\"notice\":\"Reduces cached legacy NU stake amount by the provided amount.         Reverts if there is at least one authorization higher than the         sum of remaining legacy NU stake and liquid T stake for that         staking provider or if the untaked amount is higher than the         cached legacy stake amount. If succeeded, the legacy NU stake         can be partially or fully undelegated on the legacy staking         contract. This function allows to unstake from NU staking         contract and still being able to operate in T network and         earning rewards based on the liquid T staked. Can be called only         by the delegation owner or the staking provider. Can only be         called when 24h passed since the stake has been delegated.\"},\"unstakeT(address,uint96)\":{\"notice\":\"Reduces the liquid T stake amount by the provided amount and         withdraws T to the owner. Reverts if there is at least one         authorization higher than the sum of the legacy stake and         remaining liquid T stake or if the unstake amount is higher than         the liquid T stake amount. Can be called only by the owner or         the staking provider. Can only be called when 24h passed since         the stake has been delegated.\"},\"withdrawNotificationReward(address,uint96)\":{\"notice\":\"Withdraw some amount of T tokens from notifiers treasury.         Can only be called by the governance.\"}},\"notice\":\"TokenStaking is the main staking contract of the Threshold Network.         Apart from the basic usage of enabling T stakes, it also acts as a         sort of \\\"meta-staking\\\" contract, accepting existing legacy NU/KEEP         stakes. Additionally, it serves as application manager for the apps         that run on the Threshold Network. Note that legacy NU/KEEP staking         contracts see TokenStaking as an application (e.g., slashing is         requested by TokenStaking and performed by the legacy contracts).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/TokenStaking.sol\":\"TokenStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xd0a917e32d1251a9b2f1dea15e932815d5382e64e6b0a18104664a6cc774cd70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xcec885ecdf113b4265ed0856972d7ff167bfeb3802604b18cbb782bf47ecc4ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@thesis/solidity-contracts/contracts/token/ERC20WithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./IERC20WithPermit.sol\\\";\\nimport \\\"./IReceiveApproval.sol\\\";\\n\\n/// @title  ERC20WithPermit\\n/// @notice Burnable ERC20 token with EIP2612 permit functionality. User can\\n///         authorize a transfer of their token with a signature conforming\\n///         EIP712 standard instead of an on-chain transaction from their\\n///         address. Anyone can submit this signature on the user's behalf by\\n///         calling the permit function, as specified in EIP2612 standard,\\n///         paying gas fees, and possibly performing other actions in the same\\n///         transaction.\\ncontract ERC20WithPermit is IERC20WithPermit, Ownable {\\n    /// @notice The amount of tokens owned by the given account.\\n    mapping(address => uint256) public override balanceOf;\\n\\n    /// @notice The remaining number of tokens that spender will be\\n    ///         allowed to spend on behalf of owner through `transferFrom` and\\n    ///         `burnFrom`. This is zero by default.\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    /// @notice Returns the current nonce for EIP2612 permission for the\\n    ///         provided token owner for a replay protection. Used to construct\\n    ///         EIP2612 signature provided to `permit` function.\\n    mapping(address => uint256) public override nonce;\\n\\n    uint256 public immutable cachedChainId;\\n    bytes32 public immutable cachedDomainSeparator;\\n\\n    /// @notice Returns EIP2612 Permit message hash. Used to construct EIP2612\\n    ///         signature provided to `permit` function.\\n    bytes32 public constant override PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    /// @notice The amount of tokens in existence.\\n    uint256 public override totalSupply;\\n\\n    /// @notice The name of the token.\\n    string public override name;\\n\\n    /// @notice The symbol of the token.\\n    string public override symbol;\\n\\n    /// @notice The decimals places of the token.\\n    uint8 public constant override decimals = 18;\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n\\n        cachedChainId = block.chainid;\\n        cachedDomainSeparator = buildDomainSeparator();\\n    }\\n\\n    /// @notice Moves `amount` tokens from the caller's account to `recipient`.\\n    /// @return True if the operation succeeded, reverts otherwise.\\n    /// @dev Requirements:\\n    ///       - `recipient` cannot be the zero address,\\n    ///       - the caller must have a balance of at least `amount`.\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /// @notice Moves `amount` tokens from `spender` to `recipient` using the\\n    ///         allowance mechanism. `amount` is then deducted from the caller's\\n    ///         allowance unless the allowance was made for `type(uint256).max`.\\n    /// @return True if the operation succeeded, reverts otherwise.\\n    /// @dev Requirements:\\n    ///      - `spender` and `recipient` cannot be the zero address,\\n    ///      - `spender` must have a balance of at least `amount`,\\n    ///      - the caller must have allowance for `spender`'s tokens of at least\\n    ///        `amount`.\\n    function transferFrom(\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        uint256 currentAllowance = allowance[spender][msg.sender];\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"Transfer amount exceeds allowance\\\"\\n            );\\n            _approve(spender, msg.sender, currentAllowance - amount);\\n        }\\n        _transfer(spender, recipient, amount);\\n        return true;\\n    }\\n\\n    /// @notice EIP2612 approval made with secp256k1 signature.\\n    ///         Users can authorize a transfer of their tokens with a signature\\n    ///         conforming EIP712 standard, rather than an on-chain transaction\\n    ///         from their address. Anyone can submit this signature on the\\n    ///         user's behalf by calling the permit function, paying gas fees,\\n    ///         and possibly performing other actions in the same transaction.\\n    /// @dev    The deadline argument can be set to `type(uint256).max to create\\n    ///         permits that effectively never expire.  If the `amount` is set\\n    ///         to `type(uint256).max` then `transferFrom` and `burnFrom` will\\n    ///         not reduce an allowance.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        /* solhint-disable-next-line not-rely-on-time */\\n        require(deadline >= block.timestamp, \\\"Permission expired\\\");\\n\\n        // Validate `s` and `v` values for a malleability concern described in EIP2.\\n        // Only signatures with `s` value in the lower half of the secp256k1\\n        // curve's order and `v` value of 27 or 28 are considered valid.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"Invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"Invalid signature 'v' value\\\");\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR(),\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        owner,\\n                        spender,\\n                        amount,\\n                        nonce[owner]++,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"Invalid signature\\\"\\n        );\\n        _approve(owner, spender, amount);\\n    }\\n\\n    /// @notice Creates `amount` tokens and assigns them to `account`,\\n    ///         increasing the total supply.\\n    /// @dev Requirements:\\n    ///      - `recipient` cannot be the zero address.\\n    function mint(address recipient, uint256 amount) external onlyOwner {\\n        require(recipient != address(0), \\\"Mint to the zero address\\\");\\n\\n        beforeTokenTransfer(address(0), recipient, amount);\\n\\n        totalSupply += amount;\\n        balanceOf[recipient] += amount;\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n    /// @notice Destroys `amount` tokens from the caller.\\n    /// @dev Requirements:\\n    ///       - the caller must have a balance of at least `amount`.\\n    function burn(uint256 amount) external override {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /// @notice Destroys `amount` of tokens from `account` using the allowance\\n    ///         mechanism. `amount` is then deducted from the caller's allowance\\n    ///         unless the allowance was made for `type(uint256).max`.\\n    /// @dev Requirements:\\n    ///      - `account` must have a balance of at least `amount`,\\n    ///      - the caller must have allowance for `account`'s tokens of at least\\n    ///        `amount`.\\n    function burnFrom(address account, uint256 amount) external override {\\n        uint256 currentAllowance = allowance[account][msg.sender];\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"Burn amount exceeds allowance\\\"\\n            );\\n            _approve(account, msg.sender, currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n\\n    /// @notice Calls `receiveApproval` function on spender previously approving\\n    ///         the spender to withdraw from the caller multiple times, up to\\n    ///         the `amount` amount. If this function is called again, it\\n    ///         overwrites the current allowance with `amount`. Reverts if the\\n    ///         approval reverted or if `receiveApproval` call on the spender\\n    ///         reverted.\\n    /// @return True if both approval and `receiveApproval` calls succeeded.\\n    /// @dev If the `amount` is set to `type(uint256).max` then\\n    ///      `transferFrom` and `burnFrom` will not reduce an allowance.\\n    function approveAndCall(\\n        address spender,\\n        uint256 amount,\\n        bytes memory extraData\\n    ) external override returns (bool) {\\n        if (approve(spender, amount)) {\\n            IReceiveApproval(spender).receiveApproval(\\n                msg.sender,\\n                amount,\\n                address(this),\\n                extraData\\n            );\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's\\n    ///         tokens.\\n    /// @return True if the operation succeeded.\\n    /// @dev If the `amount` is set to `type(uint256).max` then\\n    ///      `transferFrom` and `burnFrom` will not reduce an allowance.\\n    ///      Beware that changing an allowance with this method brings the risk\\n    ///      that someone may use both the old and the new allowance by\\n    ///      unfortunate transaction ordering. One possible solution to mitigate\\n    ///      this race condition is to first reduce the spender's allowance to 0\\n    ///      and set the desired value afterwards:\\n    ///      https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    function approve(address spender, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /// @notice Returns hash of EIP712 Domain struct with the token name as\\n    ///         a signing domain and token contract as a verifying contract.\\n    ///         Used to construct EIP2612 signature provided to `permit`\\n    ///         function.\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\\n        // As explained in EIP-2612, if the DOMAIN_SEPARATOR contains the\\n        // chainId and is defined at contract deployment instead of\\n        // reconstructed for every signature, there is a risk of possible replay\\n        // attacks between chains in the event of a future chain split.\\n        // To address this issue, we check the cached chain ID against the\\n        // current one and in case they are different, we build domain separator\\n        // from scratch.\\n        if (block.chainid == cachedChainId) {\\n            return cachedDomainSeparator;\\n        } else {\\n            return buildDomainSeparator();\\n        }\\n    }\\n\\n    /// @dev Hook that is called before any transfer of tokens. This includes\\n    ///      minting and burning.\\n    ///\\n    /// Calling conditions:\\n    /// - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\\n    ///   will be to transferred to `to`.\\n    /// - when `from` is zero, `amount` tokens will be minted for `to`.\\n    /// - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n    /// - `from` and `to` are never both zero.\\n    // slither-disable-next-line dead-code\\n    function beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _burn(address account, uint256 amount) internal {\\n        uint256 currentBalance = balanceOf[account];\\n        require(currentBalance >= amount, \\\"Burn amount exceeds balance\\\");\\n\\n        beforeTokenTransfer(account, address(0), amount);\\n\\n        balanceOf[account] = currentBalance - amount;\\n        totalSupply -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _transfer(\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        require(spender != address(0), \\\"Transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"Transfer to the zero address\\\");\\n        require(recipient != address(this), \\\"Transfer to the token address\\\");\\n\\n        beforeTokenTransfer(spender, recipient, amount);\\n\\n        uint256 spenderBalance = balanceOf[spender];\\n        require(spenderBalance >= amount, \\\"Transfer amount exceeds balance\\\");\\n        balanceOf[spender] = spenderBalance - amount;\\n        balanceOf[recipient] += amount;\\n        emit Transfer(spender, recipient, amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(owner != address(0), \\\"Approve from the zero address\\\");\\n        require(spender != address(0), \\\"Approve to the zero address\\\");\\n        allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function buildDomainSeparator() private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                    ),\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(\\\"1\\\")),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x1e1bf4ec5c9d6fe70f6f834316482aeff3f122ff4ffaa7178099e7ae71a0b16d\",\"license\":\"MIT\"},\"@thesis/solidity-contracts/contracts/token/IApproveAndCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/// @notice An interface that should be implemented by tokens supporting\\n///         `approveAndCall`/`receiveApproval` pattern.\\ninterface IApproveAndCall {\\n    /// @notice Executes `receiveApproval` function on spender as specified in\\n    ///         `IReceiveApproval` interface. Approves spender to withdraw from\\n    ///         the caller multiple times, up to the `amount`. If this\\n    ///         function is called again, it overwrites the current allowance\\n    ///         with `amount`. Reverts if the approval reverted or if\\n    ///         `receiveApproval` call on the spender reverted.\\n    function approveAndCall(\\n        address spender,\\n        uint256 amount,\\n        bytes memory extraData\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x393d18ef81a57dcc96fff4c340cc2945deaebb37b9796c322cf2bc96872c3df8\",\"license\":\"MIT\"},\"@thesis/solidity-contracts/contracts/token/IERC20WithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./IApproveAndCall.sol\\\";\\n\\n/// @title  IERC20WithPermit\\n/// @notice Burnable ERC20 token with EIP2612 permit functionality. User can\\n///         authorize a transfer of their token with a signature conforming\\n///         EIP712 standard instead of an on-chain transaction from their\\n///         address. Anyone can submit this signature on the user's behalf by\\n///         calling the permit function, as specified in EIP2612 standard,\\n///         paying gas fees, and possibly performing other actions in the same\\n///         transaction.\\ninterface IERC20WithPermit is IERC20, IERC20Metadata, IApproveAndCall {\\n    /// @notice EIP2612 approval made with secp256k1 signature.\\n    ///         Users can authorize a transfer of their tokens with a signature\\n    ///         conforming EIP712 standard, rather than an on-chain transaction\\n    ///         from their address. Anyone can submit this signature on the\\n    ///         user's behalf by calling the permit function, paying gas fees,\\n    ///         and possibly performing other actions in the same transaction.\\n    /// @dev    The deadline argument can be set to `type(uint256).max to create\\n    ///         permits that effectively never expire.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /// @notice Destroys `amount` tokens from the caller.\\n    function burn(uint256 amount) external;\\n\\n    /// @notice Destroys `amount` of tokens from `account`, deducting the amount\\n    ///         from caller's allowance.\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    /// @notice Returns hash of EIP712 Domain struct with the token name as\\n    ///         a signing domain and token contract as a verifying contract.\\n    ///         Used to construct EIP2612 signature provided to `permit`\\n    ///         function.\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Returns the current nonce for EIP2612 permission for the\\n    ///         provided token owner for a replay protection. Used to construct\\n    ///         EIP2612 signature provided to `permit` function.\\n    function nonce(address owner) external view returns (uint256);\\n\\n    /// @notice Returns EIP2612 Permit message hash. Used to construct EIP2612\\n    ///         signature provided to `permit` function.\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xdac9a5086c19a7128b505a7be1ab0ac1aa314f6989cb88d2417e9d7383f89fa9\",\"license\":\"MIT\"},\"@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/// @notice An interface that should be implemented by contracts supporting\\n///         `approveAndCall`/`receiveApproval` pattern.\\ninterface IReceiveApproval {\\n    /// @notice Receives approval to spend tokens. Called as a result of\\n    ///         `approveAndCall` call on the token.\\n    function receiveApproval(\\n        address from,\\n        uint256 amount,\\n        address token,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6a30d83ad230548b1e7839737affc8489a035314209de14b89dbef7fb0f66395\",\"license\":\"MIT\"},\"@thesis/solidity-contracts/contracts/token/MisfundRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/// @title  MisfundRecovery\\n/// @notice Allows the owner of the token contract extending MisfundRecovery\\n///         to recover any ERC20 and ERC721 sent mistakenly to the token\\n///         contract address.\\ncontract MisfundRecovery is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    function recoverERC20(\\n        IERC20 token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyOwner {\\n        token.safeTransfer(recipient, amount);\\n    }\\n\\n    function recoverERC721(\\n        IERC721 token,\\n        address recipient,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external onlyOwner {\\n        token.safeTransferFrom(address(this), recipient, tokenId, data);\\n    }\\n}\\n\",\"keccak256\":\"0xbbfea02bf20e2a6df5a497bbc05c7540a3b7c7dfb8b1feeaffef7f6b8ba65d65\",\"license\":\"MIT\"},\"contracts/governance/Checkpoints.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./IVotesHistory.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\r\\n\\r\\n/// @title Checkpoints\\r\\n/// @dev Abstract contract to support checkpoints for Compound-like voting and\\r\\n///      delegation. This implementation supports token supply up to 2^96 - 1.\\r\\n///      This contract keeps a history (checkpoints) of each account's vote\\r\\n///      power. Vote power can be delegated either by calling the {delegate}\\r\\n///      function directly, or by providing a signature to be used with\\r\\n///      {delegateBySig}. Voting power can be publicly queried through\\r\\n///      {getVotes} and {getPastVotes}.\\r\\n///      NOTE: Extracted from OpenZeppelin ERCVotes.sol.\\r\\n/// @dev This contract is upgrade-safe.\\r\\nabstract contract Checkpoints is IVotesHistory {\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint96 votes;\\r\\n    }\\r\\n\\r\\n    // slither-disable-next-line uninitialized-state\\r\\n    mapping(address => address) internal _delegates;\\r\\n    mapping(address => uint128[]) internal _checkpoints;\\r\\n    uint128[] internal _totalSupplyCheckpoints;\\r\\n\\r\\n    // Reserved storage space in case we need to add more variables,\\r\\n    // since there are upgradeable contracts that inherit from this one.\\r\\n    // See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n    // slither-disable-next-line unused-state\\r\\n    uint256[47] private __gap;\\r\\n\\r\\n    /// @notice Emitted when an account changes their delegate.\\r\\n    event DelegateChanged(\\r\\n        address indexed delegator,\\r\\n        address indexed fromDelegate,\\r\\n        address indexed toDelegate\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when a balance or delegate change results in changes\\r\\n    ///         to an account's voting power.\\r\\n    event DelegateVotesChanged(\\r\\n        address indexed delegate,\\r\\n        uint256 previousBalance,\\r\\n        uint256 newBalance\\r\\n    );\\r\\n\\r\\n    function checkpoints(address account, uint32 pos)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (Checkpoint memory checkpoint)\\r\\n    {\\r\\n        (uint32 fromBlock, uint96 votes) = decodeCheckpoint(\\r\\n            _checkpoints[account][pos]\\r\\n        );\\r\\n        checkpoint = Checkpoint(fromBlock, votes);\\r\\n    }\\r\\n\\r\\n    /// @notice Get number of checkpoints for `account`.\\r\\n    function numCheckpoints(address account)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint32)\\r\\n    {\\r\\n        return SafeCastUpgradeable.toUint32(_checkpoints[account].length);\\r\\n    }\\r\\n\\r\\n    /// @notice Get the address `account` is currently delegating to.\\r\\n    function delegates(address account) public view virtual returns (address) {\\r\\n        return _delegates[account];\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the current votes balance for `account`.\\r\\n    /// @param account The address to get votes balance\\r\\n    /// @return The number of current votes for `account`\\r\\n    function getVotes(address account) public view returns (uint96) {\\r\\n        uint256 pos = _checkpoints[account].length;\\r\\n        return pos == 0 ? 0 : decodeValue(_checkpoints[account][pos - 1]);\\r\\n    }\\r\\n\\r\\n    /// @notice Determine the prior number of votes for an account as of\\r\\n    ///         a block number.\\r\\n    /// @dev Block number must be a finalized block or else this function will\\r\\n    ///      revert to prevent misinformation.\\r\\n    /// @param account The address of the account to check\\r\\n    /// @param blockNumber The block number to get the vote balance at\\r\\n    /// @return The number of votes the account had as of the given block\\r\\n    function getPastVotes(address account, uint256 blockNumber)\\r\\n        public\\r\\n        view\\r\\n        returns (uint96)\\r\\n    {\\r\\n        return lookupCheckpoint(_checkpoints[account], blockNumber);\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieve the `totalSupply` at the end of `blockNumber`.\\r\\n    ///         Note, this value is the sum of all balances, but it is NOT the\\r\\n    ///         sum of all the delegated votes!\\r\\n    /// @param blockNumber The block number to get the total supply at\\r\\n    /// @dev `blockNumber` must have been already mined\\r\\n    function getPastTotalSupply(uint256 blockNumber)\\r\\n        public\\r\\n        view\\r\\n        returns (uint96)\\r\\n    {\\r\\n        return lookupCheckpoint(_totalSupplyCheckpoints, blockNumber);\\r\\n    }\\r\\n\\r\\n    /// @notice Change delegation for `delegator` to `delegatee`.\\r\\n    // slither-disable-next-line dead-code\\r\\n    function delegate(address delegator, address delegatee) internal virtual;\\r\\n\\r\\n    /// @notice Moves voting power from one delegate to another\\r\\n    /// @param src Address of old delegate\\r\\n    /// @param dst Address of new delegate\\r\\n    /// @param amount Voting power amount to transfer between delegates\\r\\n    function moveVotingPower(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (src != dst && amount > 0) {\\r\\n            if (src != address(0)) {\\r\\n                // https://github.com/crytic/slither/issues/960\\r\\n                // slither-disable-next-line variable-scope\\r\\n                (uint256 oldWeight, uint256 newWeight) = writeCheckpoint(\\r\\n                    _checkpoints[src],\\r\\n                    subtract,\\r\\n                    amount\\r\\n                );\\r\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\r\\n            }\\r\\n\\r\\n            if (dst != address(0)) {\\r\\n                // https://github.com/crytic/slither/issues/959\\r\\n                // slither-disable-next-line uninitialized-local\\r\\n                (uint256 oldWeight, uint256 newWeight) = writeCheckpoint(\\r\\n                    _checkpoints[dst],\\r\\n                    add,\\r\\n                    amount\\r\\n                );\\r\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Writes a new checkpoint based on operating last stored value\\r\\n    ///         with a `delta`. Usually, said operation is the `add` or\\r\\n    ///         `subtract` functions from this contract, but more complex\\r\\n    ///         functions can be passed as parameters.\\r\\n    /// @param ckpts The checkpoints array to use\\r\\n    /// @param op The function to apply over the last value and the `delta`\\r\\n    /// @param delta Variation with respect to last stored value to be used\\r\\n    ///              for new checkpoint\\r\\n    function writeCheckpoint(\\r\\n        uint128[] storage ckpts,\\r\\n        function(uint256, uint256) view returns (uint256) op,\\r\\n        uint256 delta\\r\\n    ) internal returns (uint256 oldWeight, uint256 newWeight) {\\r\\n        uint256 pos = ckpts.length;\\r\\n        oldWeight = pos == 0 ? 0 : decodeValue(ckpts[pos - 1]);\\r\\n        newWeight = op(oldWeight, delta);\\r\\n\\r\\n        if (pos > 0) {\\r\\n            uint32 fromBlock = decodeBlockNumber(ckpts[pos - 1]);\\r\\n            // slither-disable-next-line incorrect-equality\\r\\n            if (fromBlock == block.number) {\\r\\n                ckpts[pos - 1] = encodeCheckpoint(\\r\\n                    fromBlock,\\r\\n                    SafeCastUpgradeable.toUint96(newWeight)\\r\\n                );\\r\\n                return (oldWeight, newWeight);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ckpts.push(\\r\\n            encodeCheckpoint(\\r\\n                SafeCastUpgradeable.toUint32(block.number),\\r\\n                SafeCastUpgradeable.toUint96(newWeight)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Lookup a value in a list of (sorted) checkpoints.\\r\\n    /// @param ckpts The checkpoints array to use\\r\\n    /// @param blockNumber Block number when we want to get the checkpoint at\\r\\n    function lookupCheckpoint(uint128[] storage ckpts, uint256 blockNumber)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint96)\\r\\n    {\\r\\n        // We run a binary search to look for the earliest checkpoint taken\\r\\n        // after `blockNumber`. During the loop, the index of the wanted\\r\\n        // checkpoint remains in the range [low-1, high). With each iteration,\\r\\n        // either `low` or `high` is moved towards the middle of the range to\\r\\n        // maintain the invariant.\\r\\n        // - If the middle checkpoint is after `blockNumber`,\\r\\n        //   we look in [low, mid)\\r\\n        // - If the middle checkpoint is before or equal to `blockNumber`,\\r\\n        //   we look in [mid+1, high)\\r\\n        // Once we reach a single value (when low == high), we've found the\\r\\n        // right checkpoint at the index high-1, if not out of bounds (in that\\r\\n        // case we're looking too far in the past and the result is 0).\\r\\n        // Note that if the latest checkpoint available is exactly for\\r\\n        // `blockNumber`, we end up with an index that is past the end of the\\r\\n        // array, so we technically don't find a checkpoint after\\r\\n        // `blockNumber`, but it works out the same.\\r\\n        require(blockNumber < block.number, \\\"Block not yet determined\\\");\\r\\n\\r\\n        uint256 high = ckpts.length;\\r\\n        uint256 low = 0;\\r\\n        while (low < high) {\\r\\n            uint256 mid = MathUpgradeable.average(low, high);\\r\\n            uint32 midBlock = decodeBlockNumber(ckpts[mid]);\\r\\n            if (midBlock > blockNumber) {\\r\\n                high = mid;\\r\\n            } else {\\r\\n                low = mid + 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return high == 0 ? 0 : decodeValue(ckpts[high - 1]);\\r\\n    }\\r\\n\\r\\n    /// @notice Maximum token supply. Defaults to `type(uint96).max` (2^96 - 1)\\r\\n    // slither-disable-next-line dead-code\\r\\n    function maxSupply() internal view virtual returns (uint96) {\\r\\n        return type(uint96).max;\\r\\n    }\\r\\n\\r\\n    /// @notice Encodes a `blockNumber` and `value` into a single `uint128`\\r\\n    ///         checkpoint.\\r\\n    /// @dev `blockNumber` is stored in the first 32 bits, while `value` in the\\r\\n    ///      remaining 96 bits.\\r\\n    function encodeCheckpoint(uint32 blockNumber, uint96 value)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint128)\\r\\n    {\\r\\n        return (uint128(blockNumber) << 96) | uint128(value);\\r\\n    }\\r\\n\\r\\n    /// @notice Decodes a block number from a `uint128` `checkpoint`.\\r\\n    function decodeBlockNumber(uint128 checkpoint)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint32)\\r\\n    {\\r\\n        return uint32(bytes4(bytes16(checkpoint)));\\r\\n    }\\r\\n\\r\\n    /// @notice Decodes a voting value from a `uint128` `checkpoint`.\\r\\n    function decodeValue(uint128 checkpoint) internal pure returns (uint96) {\\r\\n        return uint96(checkpoint);\\r\\n    }\\r\\n\\r\\n    /// @notice Decodes a block number and voting value from a `uint128`\\r\\n    ///         `checkpoint`.\\r\\n    function decodeCheckpoint(uint128 checkpoint)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint32 blockNumber, uint96 value)\\r\\n    {\\r\\n        blockNumber = decodeBlockNumber(checkpoint);\\r\\n        value = decodeValue(checkpoint);\\r\\n    }\\r\\n\\r\\n    // slither-disable-next-line dead-code\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    // slither-disable-next-line dead-code\\r\\n    function subtract(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd090360d343ef0eb46d38f31820479d74173aa04353e639f1c6bdd9bfefa149d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/governance/IVotesHistory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IVotesHistory {\\r\\n    function getPastVotes(address account, uint256 blockNumber)\\r\\n        external\\r\\n        view\\r\\n        returns (uint96);\\r\\n\\r\\n    function getPastTotalSupply(uint256 blockNumber)\\r\\n        external\\r\\n        view\\r\\n        returns (uint96);\\r\\n}\\r\\n\",\"keccak256\":\"0x98d9924c9a95d7107fedc4a74e5cdf19b3c9f55ad3805a69e39bae8857b115cd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/IApplication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/// @title  Application interface for Threshold Network applications\\r\\n/// @notice Generic interface for an application. Application is an external\\r\\n///         smart contract or a set of smart contracts utilizing functionalities\\r\\n///         offered by Threshold Network. Applications authorized for the given\\r\\n///         staking provider are eligible to slash the stake delegated to that\\r\\n///         staking provider.\\r\\ninterface IApplication {\\r\\n    /// @dev Event emitted by `withdrawRewards` function.\\r\\n    event RewardsWithdrawn(address indexed stakingProvider, uint96 amount);\\r\\n\\r\\n    /// @notice Withdraws application rewards for the given staking provider.\\r\\n    ///         Rewards are withdrawn to the staking provider's beneficiary\\r\\n    ///         address set in the staking contract.\\r\\n    /// @dev Emits `RewardsWithdrawn` event.\\r\\n    function withdrawRewards(address stakingProvider) external;\\r\\n\\r\\n    /// @notice Used by T staking contract to inform the application that the\\r\\n    ///         authorized amount for the given staking provider increased.\\r\\n    ///         The application may do any necessary housekeeping. The\\r\\n    ///         application must revert the transaction in case the\\r\\n    ///         authorization is below the minimum required.\\r\\n    function authorizationIncreased(\\r\\n        address stakingProvider,\\r\\n        uint96 fromAmount,\\r\\n        uint96 toAmount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Used by T staking contract to inform the application that the\\r\\n    ///         authorization decrease for the given staking provider has been\\r\\n    ///         requested. The application should mark the authorization as\\r\\n    ///         pending decrease and respond to the staking contract with\\r\\n    ///         `approveAuthorizationDecrease` at its discretion. It may\\r\\n    ///         happen right away but it also may happen several months later.\\r\\n    ///         If there is already a pending authorization decrease request\\r\\n    ///         for the application, and the application does not agree for\\r\\n    ///         overwriting it, the function should revert.\\r\\n    function authorizationDecreaseRequested(\\r\\n        address stakingProvider,\\r\\n        uint96 fromAmount,\\r\\n        uint96 toAmount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Used by T staking contract to inform the application the\\r\\n    ///         authorization has been decreased for the given staking provider\\r\\n    ///         involuntarily, as a result of slashing. Lets the application to\\r\\n    ///         do any housekeeping neccessary. Called with 250k gas limit and\\r\\n    ///         does not revert the transaction if\\r\\n    ///         `involuntaryAuthorizationDecrease` call failed.\\r\\n    function involuntaryAuthorizationDecrease(\\r\\n        address stakingProvider,\\r\\n        uint96 fromAmount,\\r\\n        uint96 toAmount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Returns the amount of application rewards available for\\r\\n    ///         withdrawal for the given staking provider.\\r\\n    function availableRewards(address stakingProvider)\\r\\n        external\\r\\n        view\\r\\n        returns (uint96);\\r\\n\\r\\n    /// @notice The minimum authorization amount required for the staking\\r\\n    ///         provider so that they can participate in the application.\\r\\n    function minimumAuthorization() external view returns (uint96);\\r\\n}\\r\\n\",\"keccak256\":\"0xe70ae549d2c1d38712a050a6198e9bcfaf61f9e6dbeb2fc69bc931e6e7254771\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/ILegacyTokenStaking.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/// @title IKeepTokenStaking\\r\\n/// @notice Interface for Keep TokenStaking contract\\r\\ninterface IKeepTokenStaking {\\r\\n    /// @notice Seize provided token amount from every member in the misbehaved\\r\\n    /// operators array. The tattletale is rewarded with 5% of the total seized\\r\\n    /// amount scaled by the reward adjustment parameter and the rest 95% is burned.\\r\\n    /// @param amountToSeize Token amount to seize from every misbehaved operator.\\r\\n    /// @param rewardMultiplier Reward adjustment in percentage. Min 1% and 100% max.\\r\\n    /// @param tattletale Address to receive the 5% reward.\\r\\n    /// @param misbehavedOperators Array of addresses to seize the tokens from.\\r\\n    function seize(\\r\\n        uint256 amountToSeize,\\r\\n        uint256 rewardMultiplier,\\r\\n        address tattletale,\\r\\n        address[] memory misbehavedOperators\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Gets stake delegation info for the given operator.\\r\\n    /// @param operator Operator address.\\r\\n    /// @return amount The amount of tokens the given operator delegated.\\r\\n    /// @return createdAt The time when the stake has been delegated.\\r\\n    /// @return undelegatedAt The time when undelegation has been requested.\\r\\n    /// If undelegation has not been requested, 0 is returned.\\r\\n    function getDelegationInfo(address operator)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 amount,\\r\\n            uint256 createdAt,\\r\\n            uint256 undelegatedAt\\r\\n        );\\r\\n\\r\\n    /// @notice Gets the stake owner for the specified operator address.\\r\\n    /// @return Stake owner address.\\r\\n    function ownerOf(address operator) external view returns (address);\\r\\n\\r\\n    /// @notice Gets the beneficiary for the specified operator address.\\r\\n    /// @return Beneficiary address.\\r\\n    function beneficiaryOf(address operator)\\r\\n        external\\r\\n        view\\r\\n        returns (address payable);\\r\\n\\r\\n    /// @notice Gets the authorizer for the specified operator address.\\r\\n    /// @return Authorizer address.\\r\\n    function authorizerOf(address operator) external view returns (address);\\r\\n\\r\\n    /// @notice Gets the eligible stake balance of the specified address.\\r\\n    /// An eligible stake is a stake that passed the initialization period\\r\\n    /// and is not currently undelegating. Also, the operator had to approve\\r\\n    /// the specified operator contract.\\r\\n    ///\\r\\n    /// Operator with a minimum required amount of eligible stake can join the\\r\\n    /// network and participate in new work selection.\\r\\n    ///\\r\\n    /// @param operator address of stake operator.\\r\\n    /// @param operatorContract address of operator contract.\\r\\n    /// @return balance an uint256 representing the eligible stake balance.\\r\\n    function eligibleStake(address operator, address operatorContract)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 balance);\\r\\n}\\r\\n\\r\\n/// @title INuCypherStakingEscrow\\r\\n/// @notice Interface for NuCypher StakingEscrow contract\\r\\ninterface INuCypherStakingEscrow {\\r\\n    /// @notice Slash the staker's stake and reward the investigator\\r\\n    /// @param staker Staker's address\\r\\n    /// @param penalty Penalty\\r\\n    /// @param investigator Investigator\\r\\n    /// @param reward Reward for the investigator\\r\\n    function slashStaker(\\r\\n        address staker,\\r\\n        uint256 penalty,\\r\\n        address investigator,\\r\\n        uint256 reward\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Request merge between NuCypher staking contract and T staking contract.\\r\\n    ///         Returns amount of staked tokens\\r\\n    function requestMerge(address staker, address stakingProvider)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice Get all tokens belonging to the staker\\r\\n    function getAllTokens(address staker) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x194a4ea8c7340d9c84f98e0a9bc297867d20d7c0e74329faced9ee01a96361f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/// @title Interface of Threshold Network staking contract\\r\\n/// @notice The staking contract enables T owners to have their wallets offline\\r\\n///         and their stake managed by staking providers on their behalf.\\r\\n///         The staking contract does not define operator role. The operator\\r\\n///         responsible for running off-chain client software is appointed by\\r\\n///         the staking provider in the particular application utilizing the\\r\\n///         staking contract. All off-chain client software should be able\\r\\n///         to run without exposing operator's or staking provider\\u2019s private\\r\\n///         key and should not require any owner\\u2019s keys at all. The stake\\r\\n///         delegation optimizes the network throughput without compromising the\\r\\n///         security of the owners\\u2019 stake.\\r\\ninterface IStaking {\\r\\n    enum StakeType {\\r\\n        NU,\\r\\n        KEEP,\\r\\n        T\\r\\n    }\\r\\n\\r\\n    //\\r\\n    //\\r\\n    // Delegating a stake\\r\\n    //\\r\\n    //\\r\\n\\r\\n    /// @notice Creates a delegation with `msg.sender` owner with the given\\r\\n    ///         staking provider, beneficiary, and authorizer. Transfers the\\r\\n    ///         given amount of T to the staking contract.\\r\\n    /// @dev The owner of the delegation needs to have the amount approved to\\r\\n    ///      transfer to the staking contract.\\r\\n    function stake(\\r\\n        address stakingProvider,\\r\\n        address payable beneficiary,\\r\\n        address authorizer,\\r\\n        uint96 amount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Copies delegation from the legacy KEEP staking contract to T\\r\\n    ///         staking contract. No tokens are transferred. Caches the active\\r\\n    ///         stake amount from KEEP staking contract. Can be called by\\r\\n    ///         anyone.\\r\\n    /// @dev The staking provider in T staking contract is the legacy KEEP\\r\\n    ///      staking contract operator.\\r\\n    function stakeKeep(address stakingProvider) external;\\r\\n\\r\\n    /// @notice Copies delegation from the legacy NU staking contract to T\\r\\n    ///         staking contract, additionally appointing staking provider,\\r\\n    ///         beneficiary and authorizer roles. Caches the amount staked in NU\\r\\n    ///         staking contract. Can be called only by the original delegation\\r\\n    ///         owner.\\r\\n    function stakeNu(\\r\\n        address stakingProvider,\\r\\n        address payable beneficiary,\\r\\n        address authorizer\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Refresh Keep stake owner. Can be called only by the old owner\\r\\n    ///         or their staking provider.\\r\\n    /// @dev The staking provider in T staking contract is the legacy KEEP\\r\\n    ///      staking contract operator.\\r\\n    function refreshKeepStakeOwner(address stakingProvider) external;\\r\\n\\r\\n    /// @notice Allows the Governance to set the minimum required stake amount.\\r\\n    ///         This amount is required to protect against griefing the staking\\r\\n    ///         contract and individual applications are allowed to require\\r\\n    ///         higher minimum stakes if necessary.\\r\\n    function setMinimumStakeAmount(uint96 amount) external;\\r\\n\\r\\n    //\\r\\n    //\\r\\n    // Authorizing an application\\r\\n    //\\r\\n    //\\r\\n\\r\\n    /// @notice Allows the Governance to approve the particular application\\r\\n    ///         before individual stake authorizers are able to authorize it.\\r\\n    function approveApplication(address application) external;\\r\\n\\r\\n    /// @notice Increases the authorization of the given staking provider for\\r\\n    ///         the given application by the given amount. Can only be called by\\r\\n    ///         the authorizer for that staking provider.\\r\\n    /// @dev Calls `authorizationIncreased(address stakingProvider, uint256 amount)`\\r\\n    ///      on the given application to notify the application about\\r\\n    ///      authorization change. See `IApplication`.\\r\\n    function increaseAuthorization(\\r\\n        address stakingProvider,\\r\\n        address application,\\r\\n        uint96 amount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Requests decrease of the authorization for the given staking\\r\\n    ///         provider on the given application by the provided amount.\\r\\n    ///         It may not change the authorized amount immediatelly. When\\r\\n    ///         it happens depends on the application. Can only be called by the\\r\\n    ///         given staking provider\\u2019s authorizer. Overwrites pending\\r\\n    ///         authorization decrease for the given staking provider and\\r\\n    ///         application if the application agrees for that. If the\\r\\n    ///         application does not agree for overwriting, the function\\r\\n    ///         reverts.\\r\\n    /// @dev Calls `authorizationDecreaseRequested(address stakingProvider, uint256 amount)`\\r\\n    ///      on the given application. See `IApplication`.\\r\\n    function requestAuthorizationDecrease(\\r\\n        address stakingProvider,\\r\\n        address application,\\r\\n        uint96 amount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Requests decrease of all authorizations for the given staking\\r\\n    ///         provider on all applications by all authorized amount.\\r\\n    ///         It may not change the authorized amount immediatelly. When\\r\\n    ///         it happens depends on the application. Can only be called by the\\r\\n    ///         given staking provider\\u2019s authorizer. Overwrites pending\\r\\n    ///         authorization decrease for the given staking provider and\\r\\n    ///         application.\\r\\n    /// @dev Calls `authorizationDecreaseRequested(address stakingProvider, uint256 amount)`\\r\\n    ///      for each authorized application. See `IApplication`.\\r\\n    function requestAuthorizationDecrease(address stakingProvider) external;\\r\\n\\r\\n    /// @notice Called by the application at its discretion to approve the\\r\\n    ///         previously requested authorization decrease request. Can only be\\r\\n    ///         called by the application that was previously requested to\\r\\n    ///         decrease the authorization for that staking provider.\\r\\n    ///         Returns resulting authorized amount for the application.\\r\\n    function approveAuthorizationDecrease(address stakingProvider)\\r\\n        external\\r\\n        returns (uint96);\\r\\n\\r\\n    /// @notice Decreases the authorization for the given `stakingProvider` on\\r\\n    ///         the given disabled `application`, for all authorized amount.\\r\\n    ///         Can be called by anyone.\\r\\n    function forceDecreaseAuthorization(\\r\\n        address stakingProvider,\\r\\n        address application\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Pauses the given application\\u2019s eligibility to slash stakes.\\r\\n    ///         Besides that stakers can't change authorization to the application.\\r\\n    ///         Can be called only by the Panic Button of the particular\\r\\n    ///         application. The paused application can not slash stakes until\\r\\n    ///         it is approved again by the Governance using `approveApplication`\\r\\n    ///         function. Should be used only in case of an emergency.\\r\\n    function pauseApplication(address application) external;\\r\\n\\r\\n    /// @notice Disables the given application. The disabled application can't\\r\\n    ///         slash stakers. Also stakers can't increase authorization to that\\r\\n    ///         application but can decrease without waiting by calling\\r\\n    ///         `requestAuthorizationDecrease` at any moment. Can be called only\\r\\n    ///         by the governance. The disabled application can't be approved\\r\\n    ///         again. Should be used only in case of an emergency.\\r\\n    function disableApplication(address application) external;\\r\\n\\r\\n    /// @notice Sets the Panic Button role for the given application to the\\r\\n    ///         provided address. Can only be called by the Governance. If the\\r\\n    ///         Panic Button for the given application should be disabled, the\\r\\n    ///         role address should be set to 0x0 address.\\r\\n    function setPanicButton(address application, address panicButton) external;\\r\\n\\r\\n    /// @notice Sets the maximum number of applications one staking provider can\\r\\n    ///         have authorized. Used to protect against DoSing slashing queue.\\r\\n    ///         Can only be called by the Governance.\\r\\n    function setAuthorizationCeiling(uint256 ceiling) external;\\r\\n\\r\\n    //\\r\\n    //\\r\\n    // Stake top-up\\r\\n    //\\r\\n    //\\r\\n\\r\\n    /// @notice Increases the amount of the stake for the given staking provider.\\r\\n    /// @dev The sender of this transaction needs to have the amount approved to\\r\\n    ///      transfer to the staking contract.\\r\\n    function topUp(address stakingProvider, uint96 amount) external;\\r\\n\\r\\n    /// @notice Propagates information about stake top-up from the legacy KEEP\\r\\n    ///         staking contract to T staking contract. Can be called only by\\r\\n    ///         the owner or the staking provider.\\r\\n    function topUpKeep(address stakingProvider) external;\\r\\n\\r\\n    /// @notice Propagates information about stake top-up from the legacy NU\\r\\n    ///         staking contract to T staking contract. Can be called only by\\r\\n    ///         the owner or the staking provider.\\r\\n    function topUpNu(address stakingProvider) external;\\r\\n\\r\\n    //\\r\\n    //\\r\\n    // Undelegating a stake (unstaking)\\r\\n    //\\r\\n    //\\r\\n\\r\\n    /// @notice Reduces the liquid T stake amount by the provided amount and\\r\\n    ///         withdraws T to the owner. Reverts if there is at least one\\r\\n    ///         authorization higher than the sum of the legacy stake and\\r\\n    ///         remaining liquid T stake or if the unstake amount is higher than\\r\\n    ///         the liquid T stake amount. Can be called only by the delegation\\r\\n    ///         owner or the staking provider.\\r\\n    function unstakeT(address stakingProvider, uint96 amount) external;\\r\\n\\r\\n    /// @notice Sets the legacy KEEP staking contract active stake amount cached\\r\\n    ///         in T staking contract to 0. Reverts if the amount of liquid T\\r\\n    ///         staked in T staking contract is lower than the highest\\r\\n    ///         application authorization. This function allows to unstake from\\r\\n    ///         KEEP staking contract and still being able to operate in T\\r\\n    ///         network and earning rewards based on the liquid T staked. Can be\\r\\n    ///         called only by the delegation owner or the staking provider.\\r\\n    function unstakeKeep(address stakingProvider) external;\\r\\n\\r\\n    /// @notice Reduces cached legacy NU stake amount by the provided amount.\\r\\n    ///         Reverts if there is at least one authorization higher than the\\r\\n    ///         sum of remaining legacy NU stake and liquid T stake for that\\r\\n    ///         staking provider or if the untaked amount is higher than the\\r\\n    ///         cached legacy stake amount. If succeeded, the legacy NU stake\\r\\n    ///         can be partially or fully undelegated on the legacy staking\\r\\n    ///         contract. This function allows to unstake from NU staking\\r\\n    ///         contract and still being able to operate in T network and\\r\\n    ///         earning rewards based on the liquid T staked. Can be called only\\r\\n    ///         by the delegation owner or the staking provider.\\r\\n    function unstakeNu(address stakingProvider, uint96 amount) external;\\r\\n\\r\\n    /// @notice Sets cached legacy stake amount to 0, sets the liquid T stake\\r\\n    ///         amount to 0 and withdraws all liquid T from the stake to the\\r\\n    ///         owner. Reverts if there is at least one non-zero authorization.\\r\\n    ///         Can be called only by the delegation owner or the staking\\r\\n    ///         provider.\\r\\n    function unstakeAll(address stakingProvider) external;\\r\\n\\r\\n    //\\r\\n    //\\r\\n    // Keeping information in sync\\r\\n    //\\r\\n    //\\r\\n\\r\\n    /// @notice Notifies about the discrepancy between legacy KEEP active stake\\r\\n    ///         and the amount cached in T staking contract. Slashes the staking\\r\\n    ///         provider in case the amount cached is higher than the actual\\r\\n    ///         active stake amount in KEEP staking contract. Needs to update\\r\\n    ///         authorizations of all affected applications and execute an\\r\\n    ///         involuntary allocation decrease on all affected applications.\\r\\n    ///         Can be called by anyone, notifier receives a reward.\\r\\n    function notifyKeepStakeDiscrepancy(address stakingProvider) external;\\r\\n\\r\\n    /// @notice Notifies about the discrepancy between legacy NU active stake\\r\\n    ///         and the amount cached in T staking contract. Slashes the\\r\\n    ///         staking provider in case the amount cached is higher than the\\r\\n    ///         actual active stake amount in NU staking contract. Needs to\\r\\n    ///         update authorizations of all affected applications and execute\\r\\n    ///         an involuntary allocation decrease on all affected applications.\\r\\n    ///         Can be called by anyone, notifier receives a reward.\\r\\n    function notifyNuStakeDiscrepancy(address stakingProvider) external;\\r\\n\\r\\n    /// @notice Sets the penalty amount for stake discrepancy and reward\\r\\n    ///         multiplier for reporting it. The penalty is seized from the\\r\\n    ///         delegated stake, and 5% of the penalty, scaled by the\\r\\n    ///         multiplier, is given to the notifier. The rest of the tokens are\\r\\n    ///         burned. Can only be called by the Governance. See `seize` function.\\r\\n    function setStakeDiscrepancyPenalty(\\r\\n        uint96 penalty,\\r\\n        uint256 rewardMultiplier\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Sets reward in T tokens for notification of misbehaviour\\r\\n    ///         of one staking provider. Can only be called by the governance.\\r\\n    function setNotificationReward(uint96 reward) external;\\r\\n\\r\\n    /// @notice Transfer some amount of T tokens as reward for notifications\\r\\n    ///         of misbehaviour\\r\\n    function pushNotificationReward(uint96 reward) external;\\r\\n\\r\\n    /// @notice Withdraw some amount of T tokens from notifiers treasury.\\r\\n    ///         Can only be called by the governance.\\r\\n    function withdrawNotificationReward(address recipient, uint96 amount)\\r\\n        external;\\r\\n\\r\\n    /// @notice Adds staking providers to the slashing queue along with the\\r\\n    ///         amount that should be slashed from each one of them. Can only be\\r\\n    ///         called by application authorized for all staking providers in\\r\\n    ///         the array.\\r\\n    function slash(uint96 amount, address[] memory stakingProviders) external;\\r\\n\\r\\n    /// @notice Adds staking providers to the slashing queue along with the\\r\\n    ///         amount. The notifier will receive reward per each staking\\r\\n    ///         provider from notifiers treasury. Can only be called by\\r\\n    ///         application authorized for all staking providers in the array.\\r\\n    function seize(\\r\\n        uint96 amount,\\r\\n        uint256 rewardMultipier,\\r\\n        address notifier,\\r\\n        address[] memory stakingProviders\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Takes the given number of queued slashing operations and\\r\\n    ///         processes them. Receives 5% of the slashed amount.\\r\\n    ///         Executes `involuntaryAllocationDecrease` function on each\\r\\n    ///         affected application.\\r\\n    function processSlashing(uint256 count) external;\\r\\n\\r\\n    //\\r\\n    //\\r\\n    // Auxiliary functions\\r\\n    //\\r\\n    //\\r\\n\\r\\n    /// @notice Returns the authorized stake amount of the staking provider for\\r\\n    ///         the application.\\r\\n    function authorizedStake(address stakingProvider, address application)\\r\\n        external\\r\\n        view\\r\\n        returns (uint96);\\r\\n\\r\\n    /// @notice Returns staked amount of T, Keep and Nu for the specified\\r\\n    ///         staking provider.\\r\\n    /// @dev    All values are in T denomination\\r\\n    function stakes(address stakingProvider)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint96 tStake,\\r\\n            uint96 keepInTStake,\\r\\n            uint96 nuInTStake\\r\\n        );\\r\\n\\r\\n    /// @notice Returns start staking timestamp.\\r\\n    /// @dev    This value is set at most once.\\r\\n    function getStartStakingTimestamp(address stakingProvider)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice Returns staked amount of NU for the specified staking provider.\\r\\n    function stakedNu(address stakingProvider) external view returns (uint256);\\r\\n\\r\\n    /// @notice Gets the stake owner, the beneficiary and the authorizer\\r\\n    ///         for the specified staking provider address.\\r\\n    /// @return owner Stake owner address.\\r\\n    /// @return beneficiary Beneficiary address.\\r\\n    /// @return authorizer Authorizer address.\\r\\n    function rolesOf(address stakingProvider)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address owner,\\r\\n            address payable beneficiary,\\r\\n            address authorizer\\r\\n        );\\r\\n\\r\\n    /// @notice Returns length of application array\\r\\n    function getApplicationsLength() external view returns (uint256);\\r\\n\\r\\n    /// @notice Returns length of slashing queue\\r\\n    function getSlashingQueueLength() external view returns (uint256);\\r\\n\\r\\n    /// @notice Returns minimum possible stake for T, KEEP or NU in T\\r\\n    ///         denomination.\\r\\n    /// @dev For example, suppose the given staking provider has 10 T, 20 T\\r\\n    ///      worth of KEEP, and 30 T worth of NU all staked, and the maximum\\r\\n    ///      application authorization is 40 T, then `getMinStaked` for\\r\\n    ///      that staking provider returns:\\r\\n    ///          * 0 T if KEEP stake type specified i.e.\\r\\n    ///            min = 40 T max - (10 T + 30 T worth of NU) = 0 T\\r\\n    ///          * 10 T if NU stake type specified i.e.\\r\\n    ///            min = 40 T max - (10 T + 20 T worth of KEEP) = 10 T\\r\\n    ///          * 0 T if T stake type specified i.e.\\r\\n    ///            min = 40 T max - (20 T worth of KEEP + 30 T worth of NU) < 0 T\\r\\n    ///      In other words, the minimum stake amount for the specified\\r\\n    ///      stake type is the minimum amount of stake of the given type\\r\\n    ///      needed to satisfy the maximum application authorization given the\\r\\n    ///      staked amounts of the other stake types for that staking provider.\\r\\n    function getMinStaked(address stakingProvider, StakeType stakeTypes)\\r\\n        external\\r\\n        view\\r\\n        returns (uint96);\\r\\n\\r\\n    /// @notice Returns available amount to authorize for the specified application\\r\\n    function getAvailableToAuthorize(\\r\\n        address stakingProvider,\\r\\n        address application\\r\\n    ) external view returns (uint96);\\r\\n}\\r\\n\",\"keccak256\":\"0x93db77e7f9eb2dad9c5ce471021156abcfda33b193c2c8d3b6ebbb7df303ef73\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/KeepStake.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./ILegacyTokenStaking.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/// @title KEEP ManagedGrant contract interface\\r\\ninterface IManagedGrant {\\r\\n    function grantee() external view returns (address);\\r\\n}\\r\\n\\r\\n/// @title KEEP stake owner resolver\\r\\n/// @notice T network staking contract supports existing KEEP stakes by allowing\\r\\n///         KEEP stakers to use their stakes in T network and weights them based\\r\\n///         on KEEP<>T token ratio. KEEP stake owner is cached in T staking\\r\\n///         contract and used to restrict access to all functions only owner or\\r\\n///         operator should call. To cache KEEP stake owner in T staking\\r\\n///         contract, T staking contract first needs to resolve the owner.\\r\\n///\\r\\n///         Resolving liquid KEEP stake owner is easy. Resolving token grant\\r\\n///         stake owner is complicated and not possible to do on-chain from\\r\\n///         a contract external to KEEP TokenStaking contract. Keep TokenStaking\\r\\n///         knows the grant ID but does not expose it externally.\\r\\n///\\r\\n///         KeepStake contract addresses this problem by exposing\\r\\n///         operator-owner mappings snapshotted off-chain based on events and\\r\\n///         information publicly available from KEEP TokenStaking contract and\\r\\n///         KEEP TokenGrant contract. Additionally, it gives the Governance\\r\\n///         ability to add new mappings in case they are ever needed; in\\r\\n///         practice, this will be needed only if someone decides to stake their\\r\\n///         KEEP token grant in KEEP network after 2021-11-11 when the snapshot\\r\\n///         was taken.\\r\\n///\\r\\n///         Operator-owner pairs were snapshotted 2021-11-11 in the following\\r\\n///         way:\\r\\n///         1. Fetch all TokenStaking events from KEEP staking contract.\\r\\n///         2. Filter out undelegated operators.\\r\\n///         3. Filter out canceled delegations.\\r\\n///         4. Fetch grant stake information from KEEP TokenGrant for that\\r\\n///            operator to determine if we are dealing with grant delegation.\\r\\n///         5. Fetch grantee address from KEEP TokenGrant contract.\\r\\n///         6. Check if we are dealing with ManagedGrant by looking for all\\r\\n///            created ManagedGrants and comparing their address against grantee\\r\\n///            address fetched from TokenGrant contract.\\r\\ncontract KeepStake is Ownable {\\r\\n    IKeepTokenStaking public immutable keepTokenStaking;\\r\\n\\r\\n    mapping(address => address) public operatorToManagedGrant;\\r\\n    mapping(address => address) public operatorToGrantee;\\r\\n\\r\\n    constructor(IKeepTokenStaking _keepTokenStaking) {\\r\\n        keepTokenStaking = _keepTokenStaking;\\r\\n    }\\r\\n\\r\\n    /// @notice Allows the Governance to set new operator-managed grant pair.\\r\\n    ///         This function should only be called for managed grants if\\r\\n    ///         the snapshot does include this pair.\\r\\n    function setManagedGrant(address operator, address managedGrant)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        operatorToManagedGrant[operator] = managedGrant;\\r\\n    }\\r\\n\\r\\n    /// @notice Allows the Governance to set new operator-grantee pair.\\r\\n    ///         This function should only be called for non-managed grants if\\r\\n    ///         the snapshot does include this pair.\\r\\n    function setGrantee(address operator, address grantee) external onlyOwner {\\r\\n        operatorToGrantee[operator] = grantee;\\r\\n    }\\r\\n\\r\\n    /// @notice Resolves KEEP stake owner for the provided operator address.\\r\\n    ///         Reverts if could not resolve the owner.\\r\\n    function resolveOwner(address operator) external view returns (address) {\\r\\n        address owner = operatorToManagedGrant[operator];\\r\\n        if (owner != address(0)) {\\r\\n            return IManagedGrant(owner).grantee();\\r\\n        }\\r\\n\\r\\n        owner = operatorToGrantee[operator];\\r\\n        if (owner != address(0)) {\\r\\n            return owner;\\r\\n        }\\r\\n\\r\\n        owner = resolveSnapshottedManagedGrantees(operator);\\r\\n        if (owner != address(0)) {\\r\\n            return owner;\\r\\n        }\\r\\n\\r\\n        owner = resolveSnapshottedGrantees(operator);\\r\\n        if (owner != address(0)) {\\r\\n            return owner;\\r\\n        }\\r\\n\\r\\n        owner = keepTokenStaking.ownerOf(operator);\\r\\n        require(owner != address(0), \\\"Could not resolve the owner\\\");\\r\\n\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    function resolveSnapshottedManagedGrantees(address operator)\\r\\n        internal\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        if (operator == 0x855A951162B1B93D70724484d5bdc9D00B56236B) {\\r\\n            return\\r\\n                IManagedGrant(0xFADbF758307A054C57B365Db1De90acA71feaFE5)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0xF1De9490Bf7298b5F350cE74332Ad7cf8d5cB181) {\\r\\n            return\\r\\n                IManagedGrant(0xAEd493Aaf3E76E83b29E151848b71eF4544f92f1)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x39d2aCBCD80d80080541C6eed7e9feBb8127B2Ab) {\\r\\n            return\\r\\n                IManagedGrant(0xA2fa09D6f8C251422F5fde29a0BAd1C53dEfAe66)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0xd66cAE89FfBc6E50e6b019e45c1aEc93Dec54781) {\\r\\n            return\\r\\n                IManagedGrant(0x306309f9d105F34132db0bFB3Ce3f5B0245Cd386)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x2eBE08379f4fD866E871A9b9E1d5C695154C6A9F) {\\r\\n            return\\r\\n                IManagedGrant(0xd00c0d43b747C33726B3f0ff4BDA4b72dc53c6E9)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0xA97c34278162b556A527CFc01B53eb4DDeDFD223) {\\r\\n            return\\r\\n                IManagedGrant(0xB3E967355c456B1Bd43cB0188A321592D410D096)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x6C76d49322C9f8761A1623CEd89A31490cdB649d) {\\r\\n            return\\r\\n                IManagedGrant(0xB3E967355c456B1Bd43cB0188A321592D410D096)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x4a41c7a884d119eaaefE471D0B3a638226408382) {\\r\\n            return\\r\\n                IManagedGrant(0xcdf3d216d82a463Ce82971F2F5DA3d8f9C5f093A)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x9c06Feb7Ebc8065ee11Cd5E8EEdaAFb2909A7087) {\\r\\n            return\\r\\n                IManagedGrant(0x45119cd98d145283762BA9eBCAea75F72D188733)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x9bD818Ab6ACC974f2Cf2BD2EBA7a250126Accb9F) {\\r\\n            return\\r\\n                IManagedGrant(0x6E535043377067621954ee84065b0bd7357e7aBa)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x1d803c89760F8B4057DB15BCb3B8929E0498D310) {\\r\\n            return\\r\\n                IManagedGrant(0xB3E967355c456B1Bd43cB0188A321592D410D096)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x3101927DEeC27A2bfA6c4a6316e3A221f631dB91) {\\r\\n            return\\r\\n                IManagedGrant(0x178Bf1946feD0e2362fdF8bcD3f91F0701a012C6)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x9d9b187E478bC62694A7bED216Fc365de87F280C) {\\r\\n            return\\r\\n                IManagedGrant(0xFBad17CFad6cb00D726c65501D69FdC13Ca5477c)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0xd977144724Bc77FaeFAe219F958AE3947205d0b5) {\\r\\n            return\\r\\n                IManagedGrant(0x087B442BFd4E42675cf2df5fa566F87d7A96Fb12)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x045E511f53DeBF55c9C0B4522f14F602f7C7cA81) {\\r\\n            return\\r\\n                IManagedGrant(0xFcfe8C036C414a15cF871071c483687095caF7D6)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x3Dd301b3c96A282d8092E1e6f6846f24172D45C1) {\\r\\n            return\\r\\n                IManagedGrant(0xb5Bdd2D9B3541fc8f581Af37430D26527e59aeF8)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x5d84DEB482E770479154028788Df79aA7C563aA4) {\\r\\n            return\\r\\n                IManagedGrant(0x9D1a179c469a8BdD0b683A9f9250246cc47e8fBE)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x1dF927B69A97E8140315536163C029d188e8573b) {\\r\\n            return\\r\\n                IManagedGrant(0xb5Bdd2D9B3541fc8f581Af37430D26527e59aeF8)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x617daCE069Fbd41993491de211b4DfccdAcbd348) {\\r\\n            return\\r\\n                IManagedGrant(0xb5Bdd2D9B3541fc8f581Af37430D26527e59aeF8)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x650A9eD18Df873cad98C88dcaC8170531cAD2399) {\\r\\n            return\\r\\n                IManagedGrant(0x1Df7324A3aD20526DFa02Cc803eD2D97Cac81F3b)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x07C9a8f8264221906b7b8958951Ce4753D39628B) {\\r\\n            return\\r\\n                IManagedGrant(0x305D12b4d70529Cd618dA7399F5520701E510041)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x63eB4c3DD0751F9BE7070A01156513C227fa1eF6) {\\r\\n            return\\r\\n                IManagedGrant(0x306309f9d105F34132db0bFB3Ce3f5B0245Cd386)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0xc6349eEC31048787676b6297ba71721376A8DdcF) {\\r\\n            return\\r\\n                IManagedGrant(0xac1a985E75C6a0b475b9c807Ad0705a988Be2D99)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x3B945f9C0C8737e44f8e887d4F04B5B3A491Ac4d) {\\r\\n            return\\r\\n                IManagedGrant(0x82e17477726E8D9D2C237745cA9989631582eE98)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0xF35343299a4f80Dd5D917bbe5ddd54eBB820eBd4) {\\r\\n            return\\r\\n                IManagedGrant(0xCC88c15506251B62ccCeebA193e100d6bBC9a30D)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x3B9e5ae72d068448bB96786989c0d86FBC0551D1) {\\r\\n            return\\r\\n                IManagedGrant(0x306309f9d105F34132db0bFB3Ce3f5B0245Cd386)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0xB2D53Be158Cb8451dFc818bD969877038c1BdeA1) {\\r\\n            return\\r\\n                IManagedGrant(0xaE55e3800f0A3feaFdcE535A8C0fab0fFdB90DEe)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0xF6dbF7AFe05b8Bb6f198eC7e69333c98D3C4608C) {\\r\\n            return\\r\\n                IManagedGrant(0xbb8D24a20c20625f86739824014C3cBAAAb26700)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0xB62Fc1ADfFb2ab832041528C8178358338d85f76) {\\r\\n            return\\r\\n                IManagedGrant(0x9ED98fD1C29018B9342CB8F57A3073B9695f0c02)\\r\\n                    .grantee();\\r\\n        }\\r\\n        if (operator == 0x9bC8d30d971C9e74298112803036C05db07D73e3) {\\r\\n            return\\r\\n                IManagedGrant(0x66beda757939f8e505b5Eb883cd02C8d4a11Bca2)\\r\\n                    .grantee();\\r\\n        }\\r\\n\\r\\n        return address(0);\\r\\n    }\\r\\n\\r\\n    function resolveSnapshottedGrantees(address operator)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        if (operator == 0x1147ccFB4AEFc6e587a23b78724Ef20Ec6e474D4) {\\r\\n            return 0x3FB49dA4375Ef9019f17990D04c6d5daD482D80a;\\r\\n        }\\r\\n        if (operator == 0x4c21541f95a00C03C75F38C71DC220bd27cbbEd9) {\\r\\n            return 0xC897cfeE43a8d827F76D4226994D5CE5EBBe2571;\\r\\n        }\\r\\n        if (operator == 0x7E6332d18719a5463d3867a1a892359509589a3d) {\\r\\n            return 0x1578eD833D986c1188D1a998aA5FEcD418beF5da;\\r\\n        }\\r\\n        if (operator == 0x8Bd660A764Ca14155F3411a4526a028b6316CB3E) {\\r\\n            return 0xf6f372DfAeCC1431186598c304e91B79Ce115766;\\r\\n        }\\r\\n        if (operator == 0x4F4f0D0dfd93513B3f4Cb116Fe9d0A005466F725) {\\r\\n            return 0x8b055ac1c4dd287E2a46D4a52d61FE76FB551bD0;\\r\\n        }\\r\\n        if (operator == 0x1DF0250027fEC876d8876d1ac7A392c9098F1a1e) {\\r\\n            return 0xE408fFa969707Ce5d7aA3e5F8d44674Fa4b26219;\\r\\n        }\\r\\n        if (operator == 0x860EF3f83B6adFEF757F98345c3B8DdcFCA9d152) {\\r\\n            return 0x08a3633AAb8f3E436DEA204288Ee26Fe094406b0;\\r\\n        }\\r\\n        if (operator == 0xe3a2d16dA142E6B190A5d9F7e0C07cc460B58A5F) {\\r\\n            return 0x875f8fFCDDeD63B5d8Cf54be4E4b82FE6c6E249C;\\r\\n        }\\r\\n        if (operator == 0xBDE07f1cA107Ef319b0Bb26eBF1d0a5b4c97ffc1) {\\r\\n            return 0x1578eD833D986c1188D1a998aA5FEcD418beF5da;\\r\\n        }\\r\\n        if (operator == 0xE86181D6b672d78D33e83029fF3D0ef4A601B4C4) {\\r\\n            return 0x1578eD833D986c1188D1a998aA5FEcD418beF5da;\\r\\n        }\\r\\n        if (operator == 0xb7c561e2069aCaE2c4480111B1606790BB4E13fE) {\\r\\n            return 0x1578eD833D986c1188D1a998aA5FEcD418beF5da;\\r\\n        }\\r\\n        if (operator == 0x526c013f8382B050d32d86e7090Ac84De22EdA4D) {\\r\\n            return 0x61C6E5DDacded540CD08066C08cbc096d22D91f4;\\r\\n        }\\r\\n\\r\\n        return address(0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa7a6edd1b38fab63f225bc216a19d6105947c77bf1bb4c6612c2e209091ed44f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/TokenStaking.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./IApplication.sol\\\";\\r\\nimport \\\"./ILegacyTokenStaking.sol\\\";\\r\\nimport \\\"./IStaking.sol\\\";\\r\\nimport \\\"./KeepStake.sol\\\";\\r\\nimport \\\"../governance/Checkpoints.sol\\\";\\r\\nimport \\\"../token/T.sol\\\";\\r\\nimport \\\"../utils/PercentUtils.sol\\\";\\r\\nimport \\\"../utils/SafeTUpgradeable.sol\\\";\\r\\nimport \\\"../vending/VendingMachine.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\n/// @notice TokenStaking is the main staking contract of the Threshold Network.\\r\\n///         Apart from the basic usage of enabling T stakes, it also acts as a\\r\\n///         sort of \\\"meta-staking\\\" contract, accepting existing legacy NU/KEEP\\r\\n///         stakes. Additionally, it serves as application manager for the apps\\r\\n///         that run on the Threshold Network. Note that legacy NU/KEEP staking\\r\\n///         contracts see TokenStaking as an application (e.g., slashing is\\r\\n///         requested by TokenStaking and performed by the legacy contracts).\\r\\n/// @dev TokenStaking is upgradeable, using OpenZeppelin's Upgradeability\\r\\n///      framework. As such, it is required to satisfy OZ's guidelines, like\\r\\n///      restrictions on constructors, immutable variables, base contracts and\\r\\n///      libraries. See https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\\r\\ncontract TokenStaking is Initializable, IStaking, Checkpoints {\\r\\n    using SafeTUpgradeable for T;\\r\\n    using PercentUtils for uint256;\\r\\n    using SafeCastUpgradeable for uint256;\\r\\n\\r\\n    enum ApplicationStatus {\\r\\n        NOT_APPROVED,\\r\\n        APPROVED,\\r\\n        PAUSED,\\r\\n        DISABLED\\r\\n    }\\r\\n\\r\\n    struct StakingProviderInfo {\\r\\n        uint96 nuInTStake;\\r\\n        address owner;\\r\\n        uint96 keepInTStake;\\r\\n        address payable beneficiary;\\r\\n        uint96 tStake;\\r\\n        address authorizer;\\r\\n        mapping(address => AppAuthorization) authorizations;\\r\\n        address[] authorizedApplications;\\r\\n        uint256 startStakingTimestamp;\\r\\n    }\\r\\n\\r\\n    struct AppAuthorization {\\r\\n        uint96 authorized;\\r\\n        uint96 deauthorizing;\\r\\n    }\\r\\n\\r\\n    struct ApplicationInfo {\\r\\n        ApplicationStatus status;\\r\\n        address panicButton;\\r\\n    }\\r\\n\\r\\n    struct SlashingEvent {\\r\\n        address stakingProvider;\\r\\n        uint96 amount;\\r\\n    }\\r\\n\\r\\n    uint256 internal constant SLASHING_REWARD_PERCENT = 5;\\r\\n    uint256 internal constant MIN_STAKE_TIME = 24 hours;\\r\\n    uint256 internal constant GAS_LIMIT_AUTHORIZATION_DECREASE = 250000;\\r\\n    uint256 internal constant CONVERSION_DIVISOR = 10**(18 - 3);\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\r\\n    T internal immutable token;\\r\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\r\\n    IKeepTokenStaking internal immutable keepStakingContract;\\r\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\r\\n    KeepStake internal immutable keepStake;\\r\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\r\\n    INuCypherStakingEscrow internal immutable nucypherStakingContract;\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\r\\n    uint256 internal immutable keepRatio;\\r\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\r\\n    uint256 internal immutable nucypherRatio;\\r\\n\\r\\n    address public governance;\\r\\n    uint96 public minTStakeAmount;\\r\\n    uint256 public authorizationCeiling;\\r\\n    uint96 public stakeDiscrepancyPenalty;\\r\\n    uint256 public stakeDiscrepancyRewardMultiplier;\\r\\n\\r\\n    uint256 public notifiersTreasury;\\r\\n    uint256 public notificationReward;\\r\\n\\r\\n    mapping(address => StakingProviderInfo) internal stakingProviders;\\r\\n    mapping(address => ApplicationInfo) public applicationInfo;\\r\\n    address[] public applications;\\r\\n\\r\\n    SlashingEvent[] public slashingQueue;\\r\\n    uint256 public slashingQueueIndex;\\r\\n\\r\\n    event Staked(\\r\\n        StakeType indexed stakeType,\\r\\n        address indexed owner,\\r\\n        address indexed stakingProvider,\\r\\n        address beneficiary,\\r\\n        address authorizer,\\r\\n        uint96 amount\\r\\n    );\\r\\n    event MinimumStakeAmountSet(uint96 amount);\\r\\n    event ApplicationStatusChanged(\\r\\n        address indexed application,\\r\\n        ApplicationStatus indexed newStatus\\r\\n    );\\r\\n    event AuthorizationIncreased(\\r\\n        address indexed stakingProvider,\\r\\n        address indexed application,\\r\\n        uint96 fromAmount,\\r\\n        uint96 toAmount\\r\\n    );\\r\\n    event AuthorizationDecreaseRequested(\\r\\n        address indexed stakingProvider,\\r\\n        address indexed application,\\r\\n        uint96 fromAmount,\\r\\n        uint96 toAmount\\r\\n    );\\r\\n    event AuthorizationDecreaseApproved(\\r\\n        address indexed stakingProvider,\\r\\n        address indexed application,\\r\\n        uint96 fromAmount,\\r\\n        uint96 toAmount\\r\\n    );\\r\\n    event AuthorizationInvoluntaryDecreased(\\r\\n        address indexed stakingProvider,\\r\\n        address indexed application,\\r\\n        uint96 fromAmount,\\r\\n        uint96 toAmount,\\r\\n        bool indexed successfulCall\\r\\n    );\\r\\n    event PanicButtonSet(\\r\\n        address indexed application,\\r\\n        address indexed panicButton\\r\\n    );\\r\\n    event AuthorizationCeilingSet(uint256 ceiling);\\r\\n    event ToppedUp(address indexed stakingProvider, uint96 amount);\\r\\n    event Unstaked(address indexed stakingProvider, uint96 amount);\\r\\n    event TokensSeized(\\r\\n        address indexed stakingProvider,\\r\\n        uint96 amount,\\r\\n        bool indexed discrepancy\\r\\n    );\\r\\n    event StakeDiscrepancyPenaltySet(uint96 penalty, uint256 rewardMultiplier);\\r\\n    event NotificationRewardSet(uint96 reward);\\r\\n    event NotificationRewardPushed(uint96 reward);\\r\\n    event NotificationRewardWithdrawn(address recipient, uint96 amount);\\r\\n    event NotifierRewarded(address indexed notifier, uint256 amount);\\r\\n    event SlashingProcessed(\\r\\n        address indexed caller,\\r\\n        uint256 count,\\r\\n        uint256 tAmount\\r\\n    );\\r\\n    event OwnerRefreshed(\\r\\n        address indexed stakingProvider,\\r\\n        address indexed oldOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n    event GovernanceTransferred(address oldGovernance, address newGovernance);\\r\\n\\r\\n    modifier onlyGovernance() {\\r\\n        require(governance == msg.sender, \\\"Caller is not the governance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPanicButtonOf(address application) {\\r\\n        require(\\r\\n            applicationInfo[application].panicButton == msg.sender,\\r\\n            \\\"Caller is not the panic button\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAuthorizerOf(address stakingProvider) {\\r\\n        //slither-disable-next-line incorrect-equality\\r\\n        require(\\r\\n            stakingProviders[stakingProvider].authorizer == msg.sender,\\r\\n            \\\"Not authorizer\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwnerOrStakingProvider(address stakingProvider) {\\r\\n        //slither-disable-next-line incorrect-equality\\r\\n        require(\\r\\n            stakingProviders[stakingProvider].owner != address(0) &&\\r\\n                (stakingProvider == msg.sender ||\\r\\n                    stakingProviders[stakingProvider].owner == msg.sender),\\r\\n            \\\"Not owner or provider\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @param _token Address of T token contract\\r\\n    /// @param _keepStakingContract Address of Keep staking contract\\r\\n    /// @param _nucypherStakingContract Address of NuCypher staking contract\\r\\n    /// @param _keepVendingMachine Address of Keep vending machine\\r\\n    /// @param _nucypherVendingMachine Address of NuCypher vending machine\\r\\n    /// @param _keepStake Address of Keep contract with grant owners\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor(\\r\\n        T _token,\\r\\n        IKeepTokenStaking _keepStakingContract,\\r\\n        INuCypherStakingEscrow _nucypherStakingContract,\\r\\n        VendingMachine _keepVendingMachine,\\r\\n        VendingMachine _nucypherVendingMachine,\\r\\n        KeepStake _keepStake\\r\\n    ) {\\r\\n        // calls to check contracts are working\\r\\n        require(\\r\\n            _token.totalSupply() > 0 &&\\r\\n                _keepStakingContract.ownerOf(address(0)) == address(0) &&\\r\\n                _nucypherStakingContract.getAllTokens(address(0)) == 0 &&\\r\\n                AddressUpgradeable.isContract(address(_keepStake)),\\r\\n            \\\"Wrong input parameters\\\"\\r\\n        );\\r\\n        token = _token;\\r\\n        keepStakingContract = _keepStakingContract;\\r\\n        keepStake = _keepStake;\\r\\n        nucypherStakingContract = _nucypherStakingContract;\\r\\n\\r\\n        keepRatio = _keepVendingMachine.ratio();\\r\\n        nucypherRatio = _nucypherVendingMachine.ratio();\\r\\n    }\\r\\n\\r\\n    function initialize() external initializer {\\r\\n        _transferGovernance(msg.sender);\\r\\n    }\\r\\n\\r\\n    //\\r\\n    //\\r\\n    // Delegating a stake\\r\\n    //\\r\\n    //\\r\\n\\r\\n    /// @notice Creates a delegation with `msg.sender` owner with the given\\r\\n    ///         staking provider, beneficiary, and authorizer. Transfers the\\r\\n    ///         given amount of T to the staking contract.\\r\\n    /// @dev The owner of the delegation needs to have the amount approved to\\r\\n    ///      transfer to the staking contract.\\r\\n    function stake(\\r\\n        address stakingProvider,\\r\\n        address payable beneficiary,\\r\\n        address authorizer,\\r\\n        uint96 amount\\r\\n    ) external override {\\r\\n        require(\\r\\n            stakingProvider != address(0) &&\\r\\n                beneficiary != address(0) &&\\r\\n                authorizer != address(0),\\r\\n            \\\"Parameters must be specified\\\"\\r\\n        );\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        (, uint256 createdAt, ) = keepStakingContract.getDelegationInfo(\\r\\n            stakingProvider\\r\\n        );\\r\\n        require(\\r\\n            createdAt == 0 && stakingProviderStruct.owner == address(0),\\r\\n            \\\"Provider is already in use\\\"\\r\\n        );\\r\\n        require(\\r\\n            amount > 0 && amount >= minTStakeAmount,\\r\\n            \\\"Amount is less than minimum\\\"\\r\\n        );\\r\\n        stakingProviderStruct.owner = msg.sender;\\r\\n        stakingProviderStruct.authorizer = authorizer;\\r\\n        stakingProviderStruct.beneficiary = beneficiary;\\r\\n\\r\\n        stakingProviderStruct.tStake = amount;\\r\\n        /* solhint-disable-next-line not-rely-on-time */\\r\\n        stakingProviderStruct.startStakingTimestamp = block.timestamp;\\r\\n\\r\\n        increaseStakeCheckpoint(stakingProvider, amount);\\r\\n\\r\\n        emit Staked(\\r\\n            StakeType.T,\\r\\n            msg.sender,\\r\\n            stakingProvider,\\r\\n            beneficiary,\\r\\n            authorizer,\\r\\n            amount\\r\\n        );\\r\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Copies delegation from the legacy KEEP staking contract to T\\r\\n    ///         staking contract. No tokens are transferred. Caches the active\\r\\n    ///         stake amount from KEEP staking contract. Can be called by\\r\\n    ///         anyone.\\r\\n    /// @dev The staking provider in T staking contract is the legacy KEEP\\r\\n    ///      staking contract operator.\\r\\n    function stakeKeep(address stakingProvider) external override {\\r\\n        require(stakingProvider != address(0), \\\"Parameters must be specified\\\");\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n\\r\\n        require(\\r\\n            stakingProviderStruct.owner == address(0),\\r\\n            \\\"Provider is already in use\\\"\\r\\n        );\\r\\n\\r\\n        uint96 tAmount = getKeepAmountInT(stakingProvider);\\r\\n        require(tAmount != 0, \\\"Nothing to sync\\\");\\r\\n\\r\\n        stakingProviderStruct.keepInTStake = tAmount;\\r\\n        stakingProviderStruct.owner = keepStake.resolveOwner(stakingProvider);\\r\\n        stakingProviderStruct.authorizer = keepStakingContract.authorizerOf(\\r\\n            stakingProvider\\r\\n        );\\r\\n        stakingProviderStruct.beneficiary = keepStakingContract.beneficiaryOf(\\r\\n            stakingProvider\\r\\n        );\\r\\n\\r\\n        /* solhint-disable-next-line not-rely-on-time */\\r\\n        stakingProviderStruct.startStakingTimestamp = block.timestamp;\\r\\n\\r\\n        increaseStakeCheckpoint(stakingProvider, tAmount);\\r\\n\\r\\n        emit Staked(\\r\\n            StakeType.KEEP,\\r\\n            stakingProviderStruct.owner,\\r\\n            stakingProvider,\\r\\n            stakingProviderStruct.beneficiary,\\r\\n            stakingProviderStruct.authorizer,\\r\\n            tAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Copies delegation from the legacy NU staking contract to T\\r\\n    ///         staking contract, additionally appointing beneficiary and\\r\\n    ///         authorizer roles. Caches the amount staked in NU staking\\r\\n    ///         contract. Can be called only by the original delegation owner.\\r\\n    function stakeNu(\\r\\n        address stakingProvider,\\r\\n        address payable beneficiary,\\r\\n        address authorizer\\r\\n    ) external override {\\r\\n        require(\\r\\n            stakingProvider != address(0) &&\\r\\n                beneficiary != address(0) &&\\r\\n                authorizer != address(0),\\r\\n            \\\"Parameters must be specified\\\"\\r\\n        );\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        (, uint256 createdAt, ) = keepStakingContract.getDelegationInfo(\\r\\n            stakingProvider\\r\\n        );\\r\\n        require(\\r\\n            createdAt == 0 && stakingProviderStruct.owner == address(0),\\r\\n            \\\"Provider is already in use\\\"\\r\\n        );\\r\\n\\r\\n        uint96 tAmount = getNuAmountInT(msg.sender, stakingProvider);\\r\\n        require(tAmount > 0, \\\"Nothing to sync\\\");\\r\\n\\r\\n        stakingProviderStruct.nuInTStake = tAmount;\\r\\n        stakingProviderStruct.owner = msg.sender;\\r\\n        stakingProviderStruct.authorizer = authorizer;\\r\\n        stakingProviderStruct.beneficiary = beneficiary;\\r\\n        /* solhint-disable-next-line not-rely-on-time */\\r\\n        stakingProviderStruct.startStakingTimestamp = block.timestamp;\\r\\n\\r\\n        increaseStakeCheckpoint(stakingProvider, tAmount);\\r\\n\\r\\n        emit Staked(\\r\\n            StakeType.NU,\\r\\n            msg.sender,\\r\\n            stakingProvider,\\r\\n            beneficiary,\\r\\n            authorizer,\\r\\n            tAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Refresh Keep stake owner. Can be called only by the old owner\\r\\n    ///         or their staking provider.\\r\\n    /// @dev The staking provider in T staking contract is the legacy KEEP\\r\\n    ///      staking contract operator.\\r\\n    function refreshKeepStakeOwner(address stakingProvider)\\r\\n        external\\r\\n        override\\r\\n        onlyOwnerOrStakingProvider(stakingProvider)\\r\\n    {\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        address newOwner = keepStake.resolveOwner(stakingProvider);\\r\\n\\r\\n        emit OwnerRefreshed(\\r\\n            stakingProvider,\\r\\n            stakingProviderStruct.owner,\\r\\n            newOwner\\r\\n        );\\r\\n        stakingProviderStruct.owner = newOwner;\\r\\n    }\\r\\n\\r\\n    /// @notice Allows the Governance to set the minimum required stake amount.\\r\\n    ///         This amount is required to protect against griefing the staking\\r\\n    ///         contract and individual applications are allowed to require\\r\\n    ///         higher minimum stakes if necessary.\\r\\n    /// @dev Staking providers are not required to maintain a minimum T stake\\r\\n    ///      all the time. 24 hours after the delegation, T stake can be reduced\\r\\n    ///      below the minimum stake. The minimum stake in the staking contract\\r\\n    ///      is just to protect against griefing stake operation. Please note\\r\\n    ///      that each application may have its own minimum authorization though\\r\\n    ///      and the authorization can not be higher than the stake.\\r\\n    function setMinimumStakeAmount(uint96 amount)\\r\\n        external\\r\\n        override\\r\\n        onlyGovernance\\r\\n    {\\r\\n        minTStakeAmount = amount;\\r\\n        emit MinimumStakeAmountSet(amount);\\r\\n    }\\r\\n\\r\\n    //\\r\\n    //\\r\\n    // Authorizing an application\\r\\n    //\\r\\n    //\\r\\n\\r\\n    /// @notice Allows the Governance to approve the particular application\\r\\n    ///         before individual stake authorizers are able to authorize it.\\r\\n    function approveApplication(address application)\\r\\n        external\\r\\n        override\\r\\n        onlyGovernance\\r\\n    {\\r\\n        require(application != address(0), \\\"Parameters must be specified\\\");\\r\\n        ApplicationInfo storage info = applicationInfo[application];\\r\\n        require(\\r\\n            info.status == ApplicationStatus.NOT_APPROVED ||\\r\\n                info.status == ApplicationStatus.PAUSED,\\r\\n            \\\"Can't approve application\\\"\\r\\n        );\\r\\n\\r\\n        if (info.status == ApplicationStatus.NOT_APPROVED) {\\r\\n            applications.push(application);\\r\\n        }\\r\\n        info.status = ApplicationStatus.APPROVED;\\r\\n        emit ApplicationStatusChanged(application, ApplicationStatus.APPROVED);\\r\\n    }\\r\\n\\r\\n    /// @notice Increases the authorization of the given staking provider for\\r\\n    ///         the given application by the given amount. Can only be called by\\r\\n    ///         the given staking provider\\u2019s authorizer.\\r\\n    /// @dev Calls `authorizationIncreased` callback on the given application to\\r\\n    ///      notify the application about authorization change.\\r\\n    ///      See `IApplication`.\\r\\n    function increaseAuthorization(\\r\\n        address stakingProvider,\\r\\n        address application,\\r\\n        uint96 amount\\r\\n    ) external override onlyAuthorizerOf(stakingProvider) {\\r\\n        ApplicationInfo storage applicationStruct = applicationInfo[\\r\\n            application\\r\\n        ];\\r\\n        require(\\r\\n            applicationStruct.status == ApplicationStatus.APPROVED,\\r\\n            \\\"Application is not approved\\\"\\r\\n        );\\r\\n\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        AppAuthorization storage authorization = stakingProviderStruct\\r\\n            .authorizations[application];\\r\\n        uint96 fromAmount = authorization.authorized;\\r\\n        if (fromAmount == 0) {\\r\\n            require(\\r\\n                authorizationCeiling == 0 ||\\r\\n                    stakingProviderStruct.authorizedApplications.length <\\r\\n                    authorizationCeiling,\\r\\n                \\\"Too many applications\\\"\\r\\n            );\\r\\n            stakingProviderStruct.authorizedApplications.push(application);\\r\\n        }\\r\\n\\r\\n        uint96 availableTValue = getAvailableToAuthorize(\\r\\n            stakingProvider,\\r\\n            application\\r\\n        );\\r\\n        require(availableTValue >= amount, \\\"Not enough stake to authorize\\\");\\r\\n        authorization.authorized += amount;\\r\\n        emit AuthorizationIncreased(\\r\\n            stakingProvider,\\r\\n            application,\\r\\n            fromAmount,\\r\\n            authorization.authorized\\r\\n        );\\r\\n        IApplication(application).authorizationIncreased(\\r\\n            stakingProvider,\\r\\n            fromAmount,\\r\\n            authorization.authorized\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Requests decrease of all authorizations for the given staking\\r\\n    ///         provider on all applications by all authorized amount.\\r\\n    ///         It may not change the authorized amount immediatelly. When\\r\\n    ///         it happens depends on the application. Can only be called by the\\r\\n    ///         given staking provider\\u2019s authorizer. Overwrites pending\\r\\n    ///         authorization decrease for the given staking provider and\\r\\n    ///         application.\\r\\n    /// @dev Calls `authorizationDecreaseRequested` callback\\r\\n    ///      for each authorized application. See `IApplication`.\\r\\n    function requestAuthorizationDecrease(address stakingProvider) external {\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        uint96 deauthorizing = 0;\\r\\n        for (\\r\\n            uint256 i = 0;\\r\\n            i < stakingProviderStruct.authorizedApplications.length;\\r\\n            i++\\r\\n        ) {\\r\\n            address application = stakingProviderStruct.authorizedApplications[\\r\\n                i\\r\\n            ];\\r\\n            uint96 authorized = stakingProviderStruct\\r\\n                .authorizations[application]\\r\\n                .authorized;\\r\\n            if (authorized > 0) {\\r\\n                requestAuthorizationDecrease(\\r\\n                    stakingProvider,\\r\\n                    application,\\r\\n                    authorized\\r\\n                );\\r\\n                deauthorizing += authorized;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(deauthorizing > 0, \\\"Nothing was authorized\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Called by the application at its discretion to approve the\\r\\n    ///         previously requested authorization decrease request. Can only be\\r\\n    ///         called by the application that was previously requested to\\r\\n    ///         decrease the authorization for that staking provider.\\r\\n    ///         Returns resulting authorized amount for the application.\\r\\n    function approveAuthorizationDecrease(address stakingProvider)\\r\\n        external\\r\\n        override\\r\\n        returns (uint96)\\r\\n    {\\r\\n        ApplicationInfo storage applicationStruct = applicationInfo[msg.sender];\\r\\n        require(\\r\\n            applicationStruct.status == ApplicationStatus.APPROVED,\\r\\n            \\\"Application is not approved\\\"\\r\\n        );\\r\\n\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        AppAuthorization storage authorization = stakingProviderStruct\\r\\n            .authorizations[msg.sender];\\r\\n        require(authorization.deauthorizing > 0, \\\"No deauthorizing in process\\\");\\r\\n\\r\\n        uint96 fromAmount = authorization.authorized;\\r\\n        authorization.authorized -= authorization.deauthorizing;\\r\\n        authorization.deauthorizing = 0;\\r\\n        emit AuthorizationDecreaseApproved(\\r\\n            stakingProvider,\\r\\n            msg.sender,\\r\\n            fromAmount,\\r\\n            authorization.authorized\\r\\n        );\\r\\n\\r\\n        // remove application from an array\\r\\n        if (authorization.authorized == 0) {\\r\\n            cleanAuthorizedApplications(stakingProviderStruct, 1);\\r\\n        }\\r\\n\\r\\n        return authorization.authorized;\\r\\n    }\\r\\n\\r\\n    /// @notice Decreases the authorization for the given `stakingProvider` on\\r\\n    ///         the given disabled `application`, for all authorized amount.\\r\\n    ///         Can be called by anyone.\\r\\n    function forceDecreaseAuthorization(\\r\\n        address stakingProvider,\\r\\n        address application\\r\\n    ) external override {\\r\\n        require(\\r\\n            applicationInfo[application].status == ApplicationStatus.DISABLED,\\r\\n            \\\"Application is not disabled\\\"\\r\\n        );\\r\\n\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        AppAuthorization storage authorization = stakingProviderStruct\\r\\n            .authorizations[application];\\r\\n        uint96 fromAmount = authorization.authorized;\\r\\n        require(fromAmount > 0, \\\"Application is not authorized\\\");\\r\\n        authorization.authorized = 0;\\r\\n        authorization.deauthorizing = 0;\\r\\n\\r\\n        emit AuthorizationDecreaseApproved(\\r\\n            stakingProvider,\\r\\n            application,\\r\\n            fromAmount,\\r\\n            0\\r\\n        );\\r\\n        cleanAuthorizedApplications(stakingProviderStruct, 1);\\r\\n    }\\r\\n\\r\\n    /// @notice Pauses the given application\\u2019s eligibility to slash stakes.\\r\\n    ///         Besides that stakers can't change authorization to the application.\\r\\n    ///         Can be called only by the Panic Button of the particular\\r\\n    ///         application. The paused application can not slash stakes until\\r\\n    ///         it is approved again by the Governance using `approveApplication`\\r\\n    ///         function. Should be used only in case of an emergency.\\r\\n    function pauseApplication(address application)\\r\\n        external\\r\\n        override\\r\\n        onlyPanicButtonOf(application)\\r\\n    {\\r\\n        ApplicationInfo storage applicationStruct = applicationInfo[\\r\\n            application\\r\\n        ];\\r\\n        require(\\r\\n            applicationStruct.status == ApplicationStatus.APPROVED,\\r\\n            \\\"Can't pause application\\\"\\r\\n        );\\r\\n        applicationStruct.status = ApplicationStatus.PAUSED;\\r\\n        emit ApplicationStatusChanged(application, ApplicationStatus.PAUSED);\\r\\n    }\\r\\n\\r\\n    /// @notice Disables the given application. The disabled application can't\\r\\n    ///         slash stakers. Also stakers can't increase authorization to that\\r\\n    ///         application but can decrease without waiting by calling\\r\\n    ///         `forceDecreaseAuthorization` at any moment. Can be called only\\r\\n    ///         by the governance. The disabled application can't be approved\\r\\n    ///         again. Should be used only in case of an emergency.\\r\\n    function disableApplication(address application)\\r\\n        external\\r\\n        override\\r\\n        onlyGovernance\\r\\n    {\\r\\n        ApplicationInfo storage applicationStruct = applicationInfo[\\r\\n            application\\r\\n        ];\\r\\n        require(\\r\\n            applicationStruct.status == ApplicationStatus.APPROVED ||\\r\\n                applicationStruct.status == ApplicationStatus.PAUSED,\\r\\n            \\\"Can't disable application\\\"\\r\\n        );\\r\\n        applicationStruct.status = ApplicationStatus.DISABLED;\\r\\n        emit ApplicationStatusChanged(application, ApplicationStatus.DISABLED);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the Panic Button role for the given application to the\\r\\n    ///         provided address. Can only be called by the Governance. If the\\r\\n    ///         Panic Button for the given application should be disabled, the\\r\\n    ///         role address should be set to 0x0 address.\\r\\n    function setPanicButton(address application, address panicButton)\\r\\n        external\\r\\n        override\\r\\n        onlyGovernance\\r\\n    {\\r\\n        ApplicationInfo storage applicationStruct = applicationInfo[\\r\\n            application\\r\\n        ];\\r\\n        require(\\r\\n            applicationStruct.status == ApplicationStatus.APPROVED,\\r\\n            \\\"Application is not approved\\\"\\r\\n        );\\r\\n        applicationStruct.panicButton = panicButton;\\r\\n        emit PanicButtonSet(application, panicButton);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the maximum number of applications one staking provider can\\r\\n    ///         have authorized. Used to protect against DoSing slashing queue.\\r\\n    ///         Can only be called by the Governance.\\r\\n    function setAuthorizationCeiling(uint256 ceiling)\\r\\n        external\\r\\n        override\\r\\n        onlyGovernance\\r\\n    {\\r\\n        authorizationCeiling = ceiling;\\r\\n        emit AuthorizationCeilingSet(ceiling);\\r\\n    }\\r\\n\\r\\n    //\\r\\n    //\\r\\n    // Stake top-up\\r\\n    //\\r\\n    //\\r\\n\\r\\n    /// @notice Increases the amount of the stake for the given staking provider.\\r\\n    /// @dev The sender of this transaction needs to have the amount approved to\\r\\n    ///      transfer to the staking contract.\\r\\n    function topUp(address stakingProvider, uint96 amount) external override {\\r\\n        require(\\r\\n            stakingProviders[stakingProvider].owner != address(0),\\r\\n            \\\"Nothing to top-up\\\"\\r\\n        );\\r\\n        require(amount > 0, \\\"Parameters must be specified\\\");\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        stakingProviderStruct.tStake += amount;\\r\\n        emit ToppedUp(stakingProvider, amount);\\r\\n        increaseStakeCheckpoint(stakingProvider, amount);\\r\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Propagates information about stake top-up from the legacy KEEP\\r\\n    ///         staking contract to T staking contract. Can be called only by\\r\\n    ///         the owner or the staking provider.\\r\\n    function topUpKeep(address stakingProvider)\\r\\n        external\\r\\n        override\\r\\n        onlyOwnerOrStakingProvider(stakingProvider)\\r\\n    {\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        uint96 tAmount = getKeepAmountInT(stakingProvider);\\r\\n        require(\\r\\n            tAmount > stakingProviderStruct.keepInTStake,\\r\\n            \\\"Nothing to top-up\\\"\\r\\n        );\\r\\n\\r\\n        uint96 toppedUp = tAmount - stakingProviderStruct.keepInTStake;\\r\\n        emit ToppedUp(stakingProvider, toppedUp);\\r\\n        stakingProviderStruct.keepInTStake = tAmount;\\r\\n        increaseStakeCheckpoint(stakingProvider, toppedUp);\\r\\n    }\\r\\n\\r\\n    /// @notice Propagates information about stake top-up from the legacy NU\\r\\n    ///         staking contract to T staking contract. Can be called only by\\r\\n    ///         the owner or the staking provider.\\r\\n    function topUpNu(address stakingProvider)\\r\\n        external\\r\\n        override\\r\\n        onlyOwnerOrStakingProvider(stakingProvider)\\r\\n    {\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        uint96 tAmount = getNuAmountInT(\\r\\n            stakingProviderStruct.owner,\\r\\n            stakingProvider\\r\\n        );\\r\\n        require(\\r\\n            tAmount > stakingProviderStruct.nuInTStake,\\r\\n            \\\"Nothing to top-up\\\"\\r\\n        );\\r\\n\\r\\n        uint96 toppedUp = tAmount - stakingProviderStruct.nuInTStake;\\r\\n        emit ToppedUp(stakingProvider, toppedUp);\\r\\n        stakingProviderStruct.nuInTStake = tAmount;\\r\\n        increaseStakeCheckpoint(stakingProvider, toppedUp);\\r\\n    }\\r\\n\\r\\n    //\\r\\n    //\\r\\n    // Undelegating a stake (unstaking)\\r\\n    //\\r\\n    //\\r\\n\\r\\n    /// @notice Reduces the liquid T stake amount by the provided amount and\\r\\n    ///         withdraws T to the owner. Reverts if there is at least one\\r\\n    ///         authorization higher than the sum of the legacy stake and\\r\\n    ///         remaining liquid T stake or if the unstake amount is higher than\\r\\n    ///         the liquid T stake amount. Can be called only by the owner or\\r\\n    ///         the staking provider. Can only be called when 24h passed since\\r\\n    ///         the stake has been delegated.\\r\\n    function unstakeT(address stakingProvider, uint96 amount)\\r\\n        external\\r\\n        override\\r\\n        onlyOwnerOrStakingProvider(stakingProvider)\\r\\n    {\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        require(\\r\\n            amount > 0 &&\\r\\n                amount + getMinStaked(stakingProvider, StakeType.T) <=\\r\\n                stakingProviderStruct.tStake,\\r\\n            \\\"Too much to unstake\\\"\\r\\n        );\\r\\n        require(\\r\\n            stakingProviderStruct.startStakingTimestamp + MIN_STAKE_TIME <=\\r\\n                /* solhint-disable-next-line not-rely-on-time */\\r\\n                block.timestamp,\\r\\n            \\\"Can't unstake earlier than 24h\\\"\\r\\n        );\\r\\n\\r\\n        stakingProviderStruct.tStake -= amount;\\r\\n        decreaseStakeCheckpoint(stakingProvider, amount);\\r\\n        emit Unstaked(stakingProvider, amount);\\r\\n        token.safeTransfer(stakingProviderStruct.owner, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the legacy KEEP staking contract active stake amount cached\\r\\n    ///         in T staking contract to 0. Reverts if the amount of liquid T\\r\\n    ///         staked in T staking contract is lower than the highest\\r\\n    ///         application authorization. This function allows to unstake from\\r\\n    ///         KEEP staking contract and still being able to operate in T\\r\\n    ///         network and earning rewards based on the liquid T staked. Can be\\r\\n    ///         called only by the delegation owner or the staking provider.\\r\\n    ///         Can only be called when 24h passed since the stake has been\\r\\n    ///         delegated.\\r\\n    /// @dev    This function (or `unstakeAll`) must be called before\\r\\n    ///         `undelegate`/`undelegateAt` in Keep staking contract. Otherwise\\r\\n    ///         provider can be slashed by `notifyKeepStakeDiscrepancy` method.\\r\\n    function unstakeKeep(address stakingProvider)\\r\\n        external\\r\\n        override\\r\\n        onlyOwnerOrStakingProvider(stakingProvider)\\r\\n    {\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        uint96 keepInTStake = stakingProviderStruct.keepInTStake;\\r\\n        require(keepInTStake != 0, \\\"Nothing to unstake\\\");\\r\\n        require(\\r\\n            getMinStaked(stakingProvider, StakeType.KEEP) == 0,\\r\\n            \\\"Keep stake still authorized\\\"\\r\\n        );\\r\\n        require(\\r\\n            stakingProviderStruct.startStakingTimestamp + MIN_STAKE_TIME <=\\r\\n                /* solhint-disable-next-line not-rely-on-time */\\r\\n                block.timestamp,\\r\\n            \\\"Can't unstake earlier than 24h\\\"\\r\\n        );\\r\\n\\r\\n        emit Unstaked(stakingProvider, keepInTStake);\\r\\n        stakingProviderStruct.keepInTStake = 0;\\r\\n        decreaseStakeCheckpoint(stakingProvider, keepInTStake);\\r\\n    }\\r\\n\\r\\n    /// @notice Reduces cached legacy NU stake amount by the provided amount.\\r\\n    ///         Reverts if there is at least one authorization higher than the\\r\\n    ///         sum of remaining legacy NU stake and liquid T stake for that\\r\\n    ///         staking provider or if the untaked amount is higher than the\\r\\n    ///         cached legacy stake amount. If succeeded, the legacy NU stake\\r\\n    ///         can be partially or fully undelegated on the legacy staking\\r\\n    ///         contract. This function allows to unstake from NU staking\\r\\n    ///         contract and still being able to operate in T network and\\r\\n    ///         earning rewards based on the liquid T staked. Can be called only\\r\\n    ///         by the delegation owner or the staking provider. Can only be\\r\\n    ///         called when 24h passed since the stake has been delegated.\\r\\n    /// @dev    This function (or `unstakeAll`) must be called before `withdraw`\\r\\n    ///         in NuCypher staking contract. Otherwise NU tokens can't be\\r\\n    ///         unlocked.\\r\\n    /// @param stakingProvider Staking provider address\\r\\n    /// @param amount Amount of NU to unstake in T denomination\\r\\n    function unstakeNu(address stakingProvider, uint96 amount)\\r\\n        external\\r\\n        override\\r\\n        onlyOwnerOrStakingProvider(stakingProvider)\\r\\n    {\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        // rounding amount to guarantee exact T<>NU conversion in both ways,\\r\\n        // so there's no remainder after unstaking\\r\\n        (, uint96 tRemainder) = convertFromT(amount, nucypherRatio);\\r\\n        amount -= tRemainder;\\r\\n        require(\\r\\n            amount > 0 &&\\r\\n                amount + getMinStaked(stakingProvider, StakeType.NU) <=\\r\\n                stakingProviderStruct.nuInTStake,\\r\\n            \\\"Too much to unstake\\\"\\r\\n        );\\r\\n        require(\\r\\n            stakingProviderStruct.startStakingTimestamp + MIN_STAKE_TIME <=\\r\\n                /* solhint-disable-next-line not-rely-on-time */\\r\\n                block.timestamp,\\r\\n            \\\"Can't unstake earlier than 24h\\\"\\r\\n        );\\r\\n\\r\\n        stakingProviderStruct.nuInTStake -= amount;\\r\\n        decreaseStakeCheckpoint(stakingProvider, amount);\\r\\n        emit Unstaked(stakingProvider, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets cached legacy stake amount to 0, sets the liquid T stake\\r\\n    ///         amount to 0 and withdraws all liquid T from the stake to the\\r\\n    ///         owner. Reverts if there is at least one non-zero authorization.\\r\\n    ///         Can be called only by the delegation owner or the staking\\r\\n    ///         provider. Can only be called when 24h passed since the stake\\r\\n    ///         has been delegated.\\r\\n    function unstakeAll(address stakingProvider)\\r\\n        external\\r\\n        override\\r\\n        onlyOwnerOrStakingProvider(stakingProvider)\\r\\n    {\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        require(\\r\\n            stakingProviderStruct.authorizedApplications.length == 0,\\r\\n            \\\"Stake still authorized\\\"\\r\\n        );\\r\\n        require(\\r\\n            stakingProviderStruct.startStakingTimestamp + MIN_STAKE_TIME <=\\r\\n                /* solhint-disable-next-line not-rely-on-time */\\r\\n                block.timestamp,\\r\\n            \\\"Can't unstake earlier than 24h\\\"\\r\\n        );\\r\\n\\r\\n        uint96 unstaked = stakingProviderStruct.tStake +\\r\\n            stakingProviderStruct.keepInTStake +\\r\\n            stakingProviderStruct.nuInTStake;\\r\\n        emit Unstaked(stakingProvider, unstaked);\\r\\n        uint96 amount = stakingProviderStruct.tStake;\\r\\n        stakingProviderStruct.tStake = 0;\\r\\n        stakingProviderStruct.keepInTStake = 0;\\r\\n        stakingProviderStruct.nuInTStake = 0;\\r\\n        decreaseStakeCheckpoint(stakingProvider, unstaked);\\r\\n\\r\\n        if (amount > 0) {\\r\\n            token.safeTransfer(stakingProviderStruct.owner, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //\\r\\n    //\\r\\n    // Keeping information in sync\\r\\n    //\\r\\n    //\\r\\n\\r\\n    /// @notice Notifies about the discrepancy between legacy KEEP active stake\\r\\n    ///         and the amount cached in T staking contract. Slashes the staking\\r\\n    ///         provider in case the amount cached is higher than the actual\\r\\n    ///         active stake amount in KEEP staking contract. Needs to update\\r\\n    ///         authorizations of all affected applications and execute an\\r\\n    ///         involuntary authorization decrease on all affected applications.\\r\\n    ///         Can be called by anyone, notifier receives a reward.\\r\\n    function notifyKeepStakeDiscrepancy(address stakingProvider)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        require(stakingProviderStruct.keepInTStake > 0, \\\"Nothing to slash\\\");\\r\\n\\r\\n        (uint256 keepStakeAmount, , uint256 undelegatedAt) = keepStakingContract\\r\\n            .getDelegationInfo(stakingProvider);\\r\\n\\r\\n        (uint96 realKeepInTStake, ) = convertToT(keepStakeAmount, keepRatio);\\r\\n        uint96 oldKeepInTStake = stakingProviderStruct.keepInTStake;\\r\\n\\r\\n        require(\\r\\n            oldKeepInTStake > realKeepInTStake || undelegatedAt != 0,\\r\\n            \\\"There is no discrepancy\\\"\\r\\n        );\\r\\n        stakingProviderStruct.keepInTStake = realKeepInTStake;\\r\\n        seizeKeep(\\r\\n            stakingProviderStruct,\\r\\n            stakingProvider,\\r\\n            stakeDiscrepancyPenalty,\\r\\n            stakeDiscrepancyRewardMultiplier\\r\\n        );\\r\\n\\r\\n        uint96 slashedAmount = realKeepInTStake -\\r\\n            stakingProviderStruct.keepInTStake;\\r\\n        emit TokensSeized(stakingProvider, slashedAmount, true);\\r\\n        if (undelegatedAt != 0) {\\r\\n            stakingProviderStruct.keepInTStake = 0;\\r\\n        }\\r\\n\\r\\n        decreaseStakeCheckpoint(\\r\\n            stakingProvider,\\r\\n            oldKeepInTStake - stakingProviderStruct.keepInTStake\\r\\n        );\\r\\n\\r\\n        authorizationDecrease(\\r\\n            stakingProvider,\\r\\n            stakingProviderStruct,\\r\\n            slashedAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Notifies about the discrepancy between legacy NU active stake\\r\\n    ///         and the amount cached in T staking contract. Slashes the\\r\\n    ///         staking provider in case the amount cached is higher than the\\r\\n    ///         actual active stake amount in NU staking contract. Needs to\\r\\n    ///         update authorizations of all affected applications and execute an\\r\\n    ///         involuntary authorization decrease on all affected applications.\\r\\n    ///         Can be called by anyone, notifier receives a reward.\\r\\n    /// @dev    Real discrepancy between T and Nu is impossible.\\r\\n    ///         This method is a safeguard in case of bugs in NuCypher staking\\r\\n    ///         contract\\r\\n    function notifyNuStakeDiscrepancy(address stakingProvider)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        require(stakingProviderStruct.nuInTStake > 0, \\\"Nothing to slash\\\");\\r\\n\\r\\n        uint256 nuStakeAmount = nucypherStakingContract.getAllTokens(\\r\\n            stakingProviderStruct.owner\\r\\n        );\\r\\n        (uint96 realNuInTStake, ) = convertToT(nuStakeAmount, nucypherRatio);\\r\\n        uint96 oldNuInTStake = stakingProviderStruct.nuInTStake;\\r\\n        require(oldNuInTStake > realNuInTStake, \\\"There is no discrepancy\\\");\\r\\n\\r\\n        stakingProviderStruct.nuInTStake = realNuInTStake;\\r\\n        seizeNu(\\r\\n            stakingProviderStruct,\\r\\n            stakeDiscrepancyPenalty,\\r\\n            stakeDiscrepancyRewardMultiplier\\r\\n        );\\r\\n\\r\\n        uint96 slashedAmount = realNuInTStake -\\r\\n            stakingProviderStruct.nuInTStake;\\r\\n        emit TokensSeized(stakingProvider, slashedAmount, true);\\r\\n        authorizationDecrease(\\r\\n            stakingProvider,\\r\\n            stakingProviderStruct,\\r\\n            slashedAmount\\r\\n        );\\r\\n        decreaseStakeCheckpoint(\\r\\n            stakingProvider,\\r\\n            oldNuInTStake - stakingProviderStruct.nuInTStake\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the penalty amount for stake discrepancy and reward\\r\\n    ///         multiplier for reporting it. The penalty is seized from the\\r\\n    ///         delegated stake, and 5% of the penalty, scaled by the\\r\\n    ///         multiplier, is given to the notifier. The rest of the tokens are\\r\\n    ///         burned. Can only be called by the Governance. See `seize` function.\\r\\n    function setStakeDiscrepancyPenalty(\\r\\n        uint96 penalty,\\r\\n        uint256 rewardMultiplier\\r\\n    ) external override onlyGovernance {\\r\\n        stakeDiscrepancyPenalty = penalty;\\r\\n        stakeDiscrepancyRewardMultiplier = rewardMultiplier;\\r\\n        emit StakeDiscrepancyPenaltySet(penalty, rewardMultiplier);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets reward in T tokens for notification of misbehaviour\\r\\n    ///         of one staking provider. Can only be called by the governance.\\r\\n    function setNotificationReward(uint96 reward)\\r\\n        external\\r\\n        override\\r\\n        onlyGovernance\\r\\n    {\\r\\n        notificationReward = reward;\\r\\n        emit NotificationRewardSet(reward);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfer some amount of T tokens as reward for notifications\\r\\n    ///         of misbehaviour\\r\\n    function pushNotificationReward(uint96 reward) external override {\\r\\n        require(reward > 0, \\\"Parameters must be specified\\\");\\r\\n        notifiersTreasury += reward;\\r\\n        emit NotificationRewardPushed(reward);\\r\\n        token.safeTransferFrom(msg.sender, address(this), reward);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw some amount of T tokens from notifiers treasury.\\r\\n    ///         Can only be called by the governance.\\r\\n    function withdrawNotificationReward(address recipient, uint96 amount)\\r\\n        external\\r\\n        override\\r\\n        onlyGovernance\\r\\n    {\\r\\n        require(amount <= notifiersTreasury, \\\"Not enough tokens\\\");\\r\\n        notifiersTreasury -= amount;\\r\\n        emit NotificationRewardWithdrawn(recipient, amount);\\r\\n        token.safeTransfer(recipient, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Adds staking providers to the slashing queue along with the\\r\\n    ///         amount that should be slashed from each one of them. Can only be\\r\\n    ///         called by application authorized for all staking providers in\\r\\n    ///         the array.\\r\\n    /// @dev    This method doesn't emit events for providers that are added to\\r\\n    ///         the queue. If necessary  events can be added to the application\\r\\n    ///         level.\\r\\n    function slash(uint96 amount, address[] memory _stakingProviders)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        notify(amount, 0, address(0), _stakingProviders);\\r\\n    }\\r\\n\\r\\n    /// @notice Adds staking providers to the slashing queue along with the\\r\\n    ///         amount. The notifier will receive reward per each provider from\\r\\n    ///         notifiers treasury. Can only be called by application\\r\\n    ///         authorized for all staking providers in the array.\\r\\n    /// @dev    This method doesn't emit events for staking providers that are\\r\\n    ///         added to the queue. If necessary  events can be added to the\\r\\n    ///         application level.\\r\\n    function seize(\\r\\n        uint96 amount,\\r\\n        uint256 rewardMultiplier,\\r\\n        address notifier,\\r\\n        address[] memory _stakingProviders\\r\\n    ) external override {\\r\\n        notify(amount, rewardMultiplier, notifier, _stakingProviders);\\r\\n    }\\r\\n\\r\\n    /// @notice Takes the given number of queued slashing operations and\\r\\n    ///         processes them. Receives 5% of the slashed amount.\\r\\n    ///         Executes `involuntaryAuthorizationDecrease` function on each\\r\\n    ///         affected application.\\r\\n    function processSlashing(uint256 count) external virtual override {\\r\\n        require(\\r\\n            slashingQueueIndex < slashingQueue.length && count > 0,\\r\\n            \\\"Nothing to process\\\"\\r\\n        );\\r\\n\\r\\n        uint256 maxIndex = slashingQueueIndex + count;\\r\\n        maxIndex = MathUpgradeable.min(maxIndex, slashingQueue.length);\\r\\n        count = maxIndex - slashingQueueIndex;\\r\\n        uint96 tAmountToBurn = 0;\\r\\n\\r\\n        uint256 index = slashingQueueIndex;\\r\\n        for (; index < maxIndex; index++) {\\r\\n            SlashingEvent storage slashing = slashingQueue[index];\\r\\n            tAmountToBurn += processSlashing(slashing);\\r\\n        }\\r\\n        slashingQueueIndex = index;\\r\\n\\r\\n        uint256 tProcessorReward = uint256(tAmountToBurn).percent(\\r\\n            SLASHING_REWARD_PERCENT\\r\\n        );\\r\\n        notifiersTreasury += tAmountToBurn - tProcessorReward.toUint96();\\r\\n        emit SlashingProcessed(msg.sender, count, tProcessorReward);\\r\\n        if (tProcessorReward > 0) {\\r\\n            token.safeTransfer(msg.sender, tProcessorReward);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Delegate voting power from the stake associated to the\\r\\n    ///         `stakingProvider` to a `delegatee` address. Caller must be the\\r\\n    ///         owner of this stake.\\r\\n    function delegateVoting(address stakingProvider, address delegatee)\\r\\n        external\\r\\n    {\\r\\n        delegate(stakingProvider, delegatee);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ownership of the contract to `newGuvnor`.\\r\\n    function transferGovernance(address newGuvnor)\\r\\n        external\\r\\n        virtual\\r\\n        onlyGovernance\\r\\n    {\\r\\n        _transferGovernance(newGuvnor);\\r\\n    }\\r\\n\\r\\n    //\\r\\n    //\\r\\n    // Auxiliary functions\\r\\n    //\\r\\n    //\\r\\n\\r\\n    /// @notice Returns the authorized stake amount of the staking provider for\\r\\n    ///         the application.\\r\\n    function authorizedStake(address stakingProvider, address application)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint96)\\r\\n    {\\r\\n        return\\r\\n            stakingProviders[stakingProvider]\\r\\n                .authorizations[application]\\r\\n                .authorized;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns staked amount of T, Keep and Nu for the specified\\r\\n    ///         staking provider.\\r\\n    /// @dev    All values are in T denomination\\r\\n    function stakes(address stakingProvider)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint96 tStake,\\r\\n            uint96 keepInTStake,\\r\\n            uint96 nuInTStake\\r\\n        )\\r\\n    {\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        tStake = stakingProviderStruct.tStake;\\r\\n        keepInTStake = stakingProviderStruct.keepInTStake;\\r\\n        nuInTStake = stakingProviderStruct.nuInTStake;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns start staking timestamp.\\r\\n    /// @dev    This value is set at most once.\\r\\n    function getStartStakingTimestamp(address stakingProvider)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return stakingProviders[stakingProvider].startStakingTimestamp;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns staked amount of NU for the specified staking provider.\\r\\n    function stakedNu(address stakingProvider)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 nuAmount)\\r\\n    {\\r\\n        (nuAmount, ) = convertFromT(\\r\\n            stakingProviders[stakingProvider].nuInTStake,\\r\\n            nucypherRatio\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the stake owner, the beneficiary and the authorizer\\r\\n    ///         for the specified staking provider address.\\r\\n    /// @return owner Stake owner address.\\r\\n    /// @return beneficiary Beneficiary address.\\r\\n    /// @return authorizer Authorizer address.\\r\\n    function rolesOf(address stakingProvider)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            address owner,\\r\\n            address payable beneficiary,\\r\\n            address authorizer\\r\\n        )\\r\\n    {\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        owner = stakingProviderStruct.owner;\\r\\n        beneficiary = stakingProviderStruct.beneficiary;\\r\\n        authorizer = stakingProviderStruct.authorizer;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns length of application array\\r\\n    function getApplicationsLength() external view override returns (uint256) {\\r\\n        return applications.length;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns length of slashing queue\\r\\n    function getSlashingQueueLength() external view override returns (uint256) {\\r\\n        return slashingQueue.length;\\r\\n    }\\r\\n\\r\\n    /// @notice Requests decrease of the authorization for the given staking\\r\\n    ///         provider on the given application by the provided amount.\\r\\n    ///         It may not change the authorized amount immediatelly. When\\r\\n    ///         it happens depends on the application. Can only be called by the\\r\\n    ///         given staking provider\\u2019s authorizer. Overwrites pending\\r\\n    ///         authorization decrease for the given staking provider and\\r\\n    ///         application if the application agrees for that. If the\\r\\n    ///         application does not agree for overwriting, the function\\r\\n    ///         reverts.\\r\\n    /// @dev Calls `authorizationDecreaseRequested` callback on the given\\r\\n    ///      application. See `IApplication`.\\r\\n    function requestAuthorizationDecrease(\\r\\n        address stakingProvider,\\r\\n        address application,\\r\\n        uint96 amount\\r\\n    ) public override onlyAuthorizerOf(stakingProvider) {\\r\\n        ApplicationInfo storage applicationStruct = applicationInfo[\\r\\n            application\\r\\n        ];\\r\\n        require(\\r\\n            applicationStruct.status == ApplicationStatus.APPROVED,\\r\\n            \\\"Application is not approved\\\"\\r\\n        );\\r\\n\\r\\n        require(amount > 0, \\\"Parameters must be specified\\\");\\r\\n\\r\\n        AppAuthorization storage authorization = stakingProviders[\\r\\n            stakingProvider\\r\\n        ].authorizations[application];\\r\\n        require(\\r\\n            authorization.authorized >= amount,\\r\\n            \\\"Amount exceeds authorized\\\"\\r\\n        );\\r\\n\\r\\n        authorization.deauthorizing = amount;\\r\\n        uint96 deauthorizingTo = authorization.authorized - amount;\\r\\n        emit AuthorizationDecreaseRequested(\\r\\n            stakingProvider,\\r\\n            application,\\r\\n            authorization.authorized,\\r\\n            deauthorizingTo\\r\\n        );\\r\\n        IApplication(application).authorizationDecreaseRequested(\\r\\n            stakingProvider,\\r\\n            authorization.authorized,\\r\\n            deauthorizingTo\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Returns minimum possible stake for T, KEEP or NU in T denomination\\r\\n    /// @dev For example, suppose the given staking provider has 10 T, 20 T worth\\r\\n    ///      of KEEP, and 30 T worth of NU all staked, and the maximum\\r\\n    ///      application authorization is 40 T, then `getMinStaked` for\\r\\n    ///      that staking provider returns:\\r\\n    ///          * 0 T if KEEP stake type specified i.e.\\r\\n    ///            min = 40 T max - (10 T + 30 T worth of NU) = 0 T\\r\\n    ///          * 10 T if NU stake type specified i.e.\\r\\n    ///            min = 40 T max - (10 T + 20 T worth of KEEP) = 10 T\\r\\n    ///          * 0 T if T stake type specified i.e.\\r\\n    ///            min = 40 T max - (20 T worth of KEEP + 30 T worth of NU) < 0 T\\r\\n    ///      In other words, the minimum stake amount for the specified\\r\\n    ///      stake type is the minimum amount of stake of the given type\\r\\n    ///      needed to satisfy the maximum application authorization given\\r\\n    ///      the staked amounts of the other stake types for that staking\\r\\n    ///      provider.\\r\\n    function getMinStaked(address stakingProvider, StakeType stakeTypes)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint96)\\r\\n    {\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        uint256 maxAuthorization = 0;\\r\\n        for (\\r\\n            uint256 i = 0;\\r\\n            i < stakingProviderStruct.authorizedApplications.length;\\r\\n            i++\\r\\n        ) {\\r\\n            address application = stakingProviderStruct.authorizedApplications[\\r\\n                i\\r\\n            ];\\r\\n            maxAuthorization = MathUpgradeable.max(\\r\\n                maxAuthorization,\\r\\n                stakingProviderStruct.authorizations[application].authorized\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (maxAuthorization == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        if (stakeTypes != StakeType.T) {\\r\\n            maxAuthorization -= MathUpgradeable.min(\\r\\n                maxAuthorization,\\r\\n                stakingProviderStruct.tStake\\r\\n            );\\r\\n        }\\r\\n        if (stakeTypes != StakeType.NU) {\\r\\n            maxAuthorization -= MathUpgradeable.min(\\r\\n                maxAuthorization,\\r\\n                stakingProviderStruct.nuInTStake\\r\\n            );\\r\\n        }\\r\\n        if (stakeTypes != StakeType.KEEP) {\\r\\n            maxAuthorization -= MathUpgradeable.min(\\r\\n                maxAuthorization,\\r\\n                stakingProviderStruct.keepInTStake\\r\\n            );\\r\\n        }\\r\\n        return maxAuthorization.toUint96();\\r\\n    }\\r\\n\\r\\n    /// @notice Returns available amount to authorize for the specified\\r\\n    ///         application.\\r\\n    function getAvailableToAuthorize(\\r\\n        address stakingProvider,\\r\\n        address application\\r\\n    ) public view override returns (uint96 availableTValue) {\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        availableTValue =\\r\\n            stakingProviderStruct.tStake +\\r\\n            stakingProviderStruct.keepInTStake +\\r\\n            stakingProviderStruct.nuInTStake;\\r\\n        availableTValue -= stakingProviderStruct\\r\\n            .authorizations[application]\\r\\n            .authorized;\\r\\n    }\\r\\n\\r\\n    /// @notice Delegate voting power from the stake associated to the\\r\\n    ///         `stakingProvider` to a `delegatee` address. Caller must be the owner\\r\\n    ///         of this stake.\\r\\n    /// @dev Original abstract function defined in Checkpoints contract had two\\r\\n    ///      parameters, `delegator` and `delegatee`. Here we override it and\\r\\n    ///      comply with the same signature but the semantics of the first\\r\\n    ///      parameter changes to the `stakingProvider` address.\\r\\n    function delegate(address stakingProvider, address delegatee)\\r\\n        internal\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            stakingProvider\\r\\n        ];\\r\\n        require(\\r\\n            stakingProviderStruct.owner == msg.sender,\\r\\n            \\\"Caller is not owner\\\"\\r\\n        );\\r\\n        uint96 stakingProviderBalance = stakingProviderStruct.tStake +\\r\\n            stakingProviderStruct.keepInTStake +\\r\\n            stakingProviderStruct.nuInTStake;\\r\\n        address oldDelegatee = delegates(stakingProvider);\\r\\n        _delegates[stakingProvider] = delegatee;\\r\\n        emit DelegateChanged(stakingProvider, oldDelegatee, delegatee);\\r\\n        moveVotingPower(oldDelegatee, delegatee, stakingProviderBalance);\\r\\n    }\\r\\n\\r\\n    /// @notice Adds staking providers to the slashing queue along with the\\r\\n    ///         amount. The notifier will receive reward per each staking\\r\\n    ///         provider from notifiers treasury. Can only be called by\\r\\n    ///         application authorized for all staking providers in the array.\\r\\n    function notify(\\r\\n        uint96 amount,\\r\\n        uint256 rewardMultiplier,\\r\\n        address notifier,\\r\\n        address[] memory _stakingProviders\\r\\n    ) internal {\\r\\n        require(\\r\\n            amount > 0 && _stakingProviders.length > 0,\\r\\n            \\\"Parameters must be specified\\\"\\r\\n        );\\r\\n\\r\\n        ApplicationInfo storage applicationStruct = applicationInfo[msg.sender];\\r\\n        require(\\r\\n            applicationStruct.status == ApplicationStatus.APPROVED,\\r\\n            \\\"Application is not approved\\\"\\r\\n        );\\r\\n\\r\\n        uint256 queueLength = slashingQueue.length;\\r\\n        for (uint256 i = 0; i < _stakingProviders.length; i++) {\\r\\n            address stakingProvider = _stakingProviders[i];\\r\\n            uint256 amountToSlash = MathUpgradeable.min(\\r\\n                stakingProviders[stakingProvider]\\r\\n                    .authorizations[msg.sender]\\r\\n                    .authorized,\\r\\n                amount\\r\\n            );\\r\\n            if (\\r\\n                //slither-disable-next-line incorrect-equality\\r\\n                amountToSlash == 0\\r\\n            ) {\\r\\n                continue;\\r\\n            }\\r\\n            slashingQueue.push(\\r\\n                SlashingEvent(stakingProvider, amountToSlash.toUint96())\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (notifier != address(0)) {\\r\\n            uint256 reward = ((slashingQueue.length - queueLength) *\\r\\n                notificationReward).percent(rewardMultiplier);\\r\\n            reward = MathUpgradeable.min(reward, notifiersTreasury);\\r\\n            emit NotifierRewarded(notifier, reward);\\r\\n            if (reward != 0) {\\r\\n                notifiersTreasury -= reward;\\r\\n                token.safeTransfer(notifier, reward);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Processes one specified slashing event.\\r\\n    ///         Executes `involuntaryAuthorizationDecrease` function on each\\r\\n    ///         affected application.\\r\\n    //slither-disable-next-line dead-code\\r\\n    function processSlashing(SlashingEvent storage slashing)\\r\\n        internal\\r\\n        returns (uint96 tAmountToBurn)\\r\\n    {\\r\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\r\\n            slashing.stakingProvider\\r\\n        ];\\r\\n        uint96 tAmountToSlash = slashing.amount;\\r\\n        uint96 oldStake = stakingProviderStruct.tStake +\\r\\n            stakingProviderStruct.keepInTStake +\\r\\n            stakingProviderStruct.nuInTStake;\\r\\n        // slash T\\r\\n        if (stakingProviderStruct.tStake > 0) {\\r\\n            if (tAmountToSlash <= stakingProviderStruct.tStake) {\\r\\n                tAmountToBurn = tAmountToSlash;\\r\\n            } else {\\r\\n                tAmountToBurn = stakingProviderStruct.tStake;\\r\\n            }\\r\\n            stakingProviderStruct.tStake -= tAmountToBurn;\\r\\n            tAmountToSlash -= tAmountToBurn;\\r\\n        }\\r\\n\\r\\n        // slash KEEP\\r\\n        if (tAmountToSlash > 0 && stakingProviderStruct.keepInTStake > 0) {\\r\\n            (uint256 keepStakeAmount, , ) = keepStakingContract\\r\\n                .getDelegationInfo(slashing.stakingProvider);\\r\\n            (uint96 tAmount, ) = convertToT(keepStakeAmount, keepRatio);\\r\\n            stakingProviderStruct.keepInTStake = tAmount;\\r\\n\\r\\n            tAmountToSlash = seizeKeep(\\r\\n                stakingProviderStruct,\\r\\n                slashing.stakingProvider,\\r\\n                tAmountToSlash,\\r\\n                100\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // slash NU\\r\\n        if (tAmountToSlash > 0 && stakingProviderStruct.nuInTStake > 0) {\\r\\n            // synchronization skipped due to impossibility of real discrepancy\\r\\n            tAmountToSlash = seizeNu(\\r\\n                stakingProviderStruct,\\r\\n                tAmountToSlash,\\r\\n                100\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint96 slashedAmount = slashing.amount - tAmountToSlash;\\r\\n        emit TokensSeized(slashing.stakingProvider, slashedAmount, false);\\r\\n        authorizationDecrease(\\r\\n            slashing.stakingProvider,\\r\\n            stakingProviderStruct,\\r\\n            slashedAmount\\r\\n        );\\r\\n        uint96 newStake = stakingProviderStruct.tStake +\\r\\n            stakingProviderStruct.keepInTStake +\\r\\n            stakingProviderStruct.nuInTStake;\\r\\n        decreaseStakeCheckpoint(slashing.stakingProvider, oldStake - newStake);\\r\\n    }\\r\\n\\r\\n    /// @notice Synchronize authorizations (if needed) after slashing stake\\r\\n    function authorizationDecrease(\\r\\n        address stakingProvider,\\r\\n        StakingProviderInfo storage stakingProviderStruct,\\r\\n        uint96 slashedAmount\\r\\n    ) internal {\\r\\n        uint96 totalStake = stakingProviderStruct.tStake +\\r\\n            stakingProviderStruct.nuInTStake +\\r\\n            stakingProviderStruct.keepInTStake;\\r\\n        uint256 applicationsToDelete = 0;\\r\\n        for (\\r\\n            uint256 i = 0;\\r\\n            i < stakingProviderStruct.authorizedApplications.length;\\r\\n            i++\\r\\n        ) {\\r\\n            address authorizedApplication = stakingProviderStruct\\r\\n                .authorizedApplications[i];\\r\\n            AppAuthorization storage authorization = stakingProviderStruct\\r\\n                .authorizations[authorizedApplication];\\r\\n            uint96 fromAmount = authorization.authorized;\\r\\n\\r\\n            authorization.authorized -= MathUpgradeable\\r\\n                .min(fromAmount, slashedAmount)\\r\\n                .toUint96();\\r\\n\\r\\n            if (authorization.authorized > totalStake) {\\r\\n                authorization.authorized = totalStake;\\r\\n            }\\r\\n\\r\\n            bool successful = true;\\r\\n            //slither-disable-next-line calls-loop\\r\\n            try\\r\\n                IApplication(authorizedApplication)\\r\\n                    .involuntaryAuthorizationDecrease{\\r\\n                    gas: GAS_LIMIT_AUTHORIZATION_DECREASE\\r\\n                }(stakingProvider, fromAmount, authorization.authorized)\\r\\n            {} catch {\\r\\n                successful = false;\\r\\n            }\\r\\n            if (authorization.deauthorizing > authorization.authorized) {\\r\\n                authorization.deauthorizing = authorization.authorized;\\r\\n            }\\r\\n            emit AuthorizationInvoluntaryDecreased(\\r\\n                stakingProvider,\\r\\n                authorizedApplication,\\r\\n                fromAmount,\\r\\n                authorization.authorized,\\r\\n                successful\\r\\n            );\\r\\n            if (authorization.authorized == 0) {\\r\\n                applicationsToDelete++;\\r\\n            }\\r\\n        }\\r\\n        if (applicationsToDelete > 0) {\\r\\n            cleanAuthorizedApplications(\\r\\n                stakingProviderStruct,\\r\\n                applicationsToDelete\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Convert amount from T to Keep and call `seize` in Keep staking contract.\\r\\n    ///         Returns remainder of slashing amount in T\\r\\n    /// @dev Note this internal function doesn't update stake checkpoints\\r\\n    function seizeKeep(\\r\\n        StakingProviderInfo storage stakingProviderStruct,\\r\\n        address stakingProvider,\\r\\n        uint96 tAmountToSlash,\\r\\n        uint256 rewardMultiplier\\r\\n    ) internal returns (uint96) {\\r\\n        if (stakingProviderStruct.keepInTStake == 0) {\\r\\n            return tAmountToSlash;\\r\\n        }\\r\\n\\r\\n        uint96 tPenalty;\\r\\n        if (tAmountToSlash <= stakingProviderStruct.keepInTStake) {\\r\\n            tPenalty = tAmountToSlash;\\r\\n        } else {\\r\\n            tPenalty = stakingProviderStruct.keepInTStake;\\r\\n        }\\r\\n\\r\\n        (uint256 keepPenalty, uint96 tRemainder) = convertFromT(\\r\\n            tPenalty,\\r\\n            keepRatio\\r\\n        );\\r\\n        if (keepPenalty == 0) {\\r\\n            return tAmountToSlash;\\r\\n        }\\r\\n        tPenalty -= tRemainder;\\r\\n        stakingProviderStruct.keepInTStake -= tPenalty;\\r\\n        tAmountToSlash -= tPenalty;\\r\\n\\r\\n        address[] memory stakingProviderWrapper = new address[](1);\\r\\n        stakingProviderWrapper[0] = stakingProvider;\\r\\n        keepStakingContract.seize(\\r\\n            keepPenalty,\\r\\n            rewardMultiplier,\\r\\n            msg.sender,\\r\\n            stakingProviderWrapper\\r\\n        );\\r\\n        return tAmountToSlash;\\r\\n    }\\r\\n\\r\\n    /// @notice Convert amount from T to NU and call `slashStaker` in NuCypher staking contract.\\r\\n    ///         Returns remainder of slashing amount in T\\r\\n    /// @dev Note this internal function doesn't update the stake checkpoints\\r\\n    function seizeNu(\\r\\n        StakingProviderInfo storage stakingProviderStruct,\\r\\n        uint96 tAmountToSlash,\\r\\n        uint256 rewardMultiplier\\r\\n    ) internal returns (uint96) {\\r\\n        if (stakingProviderStruct.nuInTStake == 0) {\\r\\n            return tAmountToSlash;\\r\\n        }\\r\\n\\r\\n        uint96 tPenalty;\\r\\n        if (tAmountToSlash <= stakingProviderStruct.nuInTStake) {\\r\\n            tPenalty = tAmountToSlash;\\r\\n        } else {\\r\\n            tPenalty = stakingProviderStruct.nuInTStake;\\r\\n        }\\r\\n\\r\\n        (uint256 nuPenalty, uint96 tRemainder) = convertFromT(\\r\\n            tPenalty,\\r\\n            nucypherRatio\\r\\n        );\\r\\n        if (nuPenalty == 0) {\\r\\n            return tAmountToSlash;\\r\\n        }\\r\\n        tPenalty -= tRemainder;\\r\\n        stakingProviderStruct.nuInTStake -= tPenalty;\\r\\n        tAmountToSlash -= tPenalty;\\r\\n\\r\\n        uint256 nuReward = nuPenalty.percent(SLASHING_REWARD_PERCENT).percent(\\r\\n            rewardMultiplier\\r\\n        );\\r\\n        nucypherStakingContract.slashStaker(\\r\\n            stakingProviderStruct.owner,\\r\\n            nuPenalty,\\r\\n            msg.sender,\\r\\n            nuReward\\r\\n        );\\r\\n        return tAmountToSlash;\\r\\n    }\\r\\n\\r\\n    /// @notice Removes application with zero authorization from authorized\\r\\n    ///         applications array\\r\\n    function cleanAuthorizedApplications(\\r\\n        StakingProviderInfo storage stakingProviderStruct,\\r\\n        uint256 numberToDelete\\r\\n    ) internal {\\r\\n        uint256 length = stakingProviderStruct.authorizedApplications.length;\\r\\n        if (numberToDelete == length) {\\r\\n            delete stakingProviderStruct.authorizedApplications;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 deleted = 0;\\r\\n        uint256 index = 0;\\r\\n        uint256 newLength = length - numberToDelete;\\r\\n        while (index < newLength && deleted < numberToDelete) {\\r\\n            address application = stakingProviderStruct.authorizedApplications[\\r\\n                index\\r\\n            ];\\r\\n            if (\\r\\n                stakingProviderStruct.authorizations[application].authorized ==\\r\\n                0\\r\\n            ) {\\r\\n                stakingProviderStruct.authorizedApplications[\\r\\n                        index\\r\\n                    ] = stakingProviderStruct.authorizedApplications[\\r\\n                    length - deleted - 1\\r\\n                ];\\r\\n                deleted++;\\r\\n            } else {\\r\\n                index++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (index = newLength; index < length; index++) {\\r\\n            stakingProviderStruct.authorizedApplications.pop();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Creates new checkpoints due to a change of stake amount\\r\\n    /// @param _delegator Address of the staking provider acting as delegator\\r\\n    /// @param _amount Amount of T to increment\\r\\n    /// @param increase True if the change is an increase, false if a decrease\\r\\n    function newStakeCheckpoint(\\r\\n        address _delegator,\\r\\n        uint96 _amount,\\r\\n        bool increase\\r\\n    ) internal {\\r\\n        if (_amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n        writeCheckpoint(\\r\\n            _totalSupplyCheckpoints,\\r\\n            increase ? add : subtract,\\r\\n            _amount\\r\\n        );\\r\\n        address delegatee = delegates(_delegator);\\r\\n        if (delegatee != address(0)) {\\r\\n            (uint256 oldWeight, uint256 newWeight) = writeCheckpoint(\\r\\n                _checkpoints[delegatee],\\r\\n                increase ? add : subtract,\\r\\n                _amount\\r\\n            );\\r\\n            emit DelegateVotesChanged(delegatee, oldWeight, newWeight);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Creates new checkpoints due to an increment of a stakers' stake\\r\\n    /// @param _delegator Address of the staking provider acting as delegator\\r\\n    /// @param _amount Amount of T to increment\\r\\n    function increaseStakeCheckpoint(address _delegator, uint96 _amount)\\r\\n        internal\\r\\n    {\\r\\n        newStakeCheckpoint(_delegator, _amount, true);\\r\\n    }\\r\\n\\r\\n    /// @notice Creates new checkpoints due to a decrease of a stakers' stake\\r\\n    /// @param _delegator Address of the stake owner acting as delegator\\r\\n    /// @param _amount Amount of T to decrease\\r\\n    function decreaseStakeCheckpoint(address _delegator, uint96 _amount)\\r\\n        internal\\r\\n    {\\r\\n        newStakeCheckpoint(_delegator, _amount, false);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns amount of Nu stake in the NuCypher staking contract for\\r\\n    ///         the specified staking provider.\\r\\n    ///         Resulting value in T denomination\\r\\n    function getNuAmountInT(address owner, address stakingProvider)\\r\\n        internal\\r\\n        returns (uint96)\\r\\n    {\\r\\n        uint256 nuStakeAmount = nucypherStakingContract.requestMerge(\\r\\n            owner,\\r\\n            stakingProvider\\r\\n        );\\r\\n        (uint96 tAmount, ) = convertToT(nuStakeAmount, nucypherRatio);\\r\\n        return tAmount;\\r\\n    }\\r\\n\\r\\n    function _transferGovernance(address newGuvnor) internal virtual {\\r\\n        address oldGuvnor = governance;\\r\\n        governance = newGuvnor;\\r\\n        emit GovernanceTransferred(oldGuvnor, newGuvnor);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns amount of Keep stake in the Keep staking contract for\\r\\n    ///         the specified staking provider.\\r\\n    ///         Resulting value in T denomination\\r\\n    function getKeepAmountInT(address stakingProvider)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint96)\\r\\n    {\\r\\n        uint256 keepStakeAmount = keepStakingContract.eligibleStake(\\r\\n            stakingProvider,\\r\\n            address(this)\\r\\n        );\\r\\n        (uint96 tAmount, ) = convertToT(keepStakeAmount, keepRatio);\\r\\n        return tAmount;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the T token amount that's obtained from `amount` legacy\\r\\n    ///         tokens for the given `ratio`, and the remainder that can't be\\r\\n    ///         converted.\\r\\n    function convertToT(uint256 amount, uint256 ratio)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint96 tAmount, uint256 remainder)\\r\\n    {\\r\\n        remainder = amount % CONVERSION_DIVISOR;\\r\\n        uint256 convertibleAmount = amount - remainder;\\r\\n        tAmount = ((convertibleAmount * ratio) / CONVERSION_DIVISOR).toUint96();\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the amount of legacy tokens that's obtained from\\r\\n    ///         `tAmount` T tokens for the given `ratio`, and the T remainder\\r\\n    ///         that can't be converted.\\r\\n    function convertFromT(uint96 tAmount, uint256 ratio)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 amount, uint96 tRemainder)\\r\\n    {\\r\\n        //slither-disable-next-line weak-prng\\r\\n        tRemainder = (tAmount % ratio).toUint96();\\r\\n        uint256 convertibleAmount = tAmount - tRemainder;\\r\\n        amount = (convertibleAmount * CONVERSION_DIVISOR) / ratio;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1730b21d1497cda2ed5892112d5faddb542242b2dd42b2086b351280b9d4aadc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/token/T.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../governance/Checkpoints.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport \\\"@thesis/solidity-contracts/contracts/token/ERC20WithPermit.sol\\\";\\r\\nimport \\\"@thesis/solidity-contracts/contracts/token/MisfundRecovery.sol\\\";\\r\\n\\r\\n/// @title T token\\r\\n/// @notice Threshold Network T token\\r\\n/// @dev By default, token balance does not account for voting power.\\r\\n///      This makes transfers cheaper. The downside is that it requires users\\r\\n///      to delegate to themselves to activate checkpoints and have their\\r\\n///      voting power tracked.\\r\\ncontract T is ERC20WithPermit, MisfundRecovery, Checkpoints {\\r\\n    /// @notice The EIP-712 typehash for the delegation struct used by\\r\\n    ///         `delegateBySig`.\\r\\n    bytes32 public constant DELEGATION_TYPEHASH =\\r\\n        keccak256(\\r\\n            \\\"Delegation(address delegatee,uint256 nonce,uint256 deadline)\\\"\\r\\n        );\\r\\n\\r\\n    constructor() ERC20WithPermit(\\\"INSAANITY\\\", \\\"INSTY\\\") {}\\r\\n\\r\\n    /// @notice Delegates votes from signatory to `delegatee`\\r\\n    /// @param delegatee The address to delegate votes to\\r\\n    /// @param deadline The time at which to expire the signature\\r\\n    /// @param v The recovery byte of the signature\\r\\n    /// @param r Half of the ECDSA signature pair\\r\\n    /// @param s Half of the ECDSA signature pair\\r\\n    function delegateBySig(\\r\\n        address signatory,\\r\\n        address delegatee,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external {\\r\\n        /* solhint-disable-next-line not-rely-on-time */\\r\\n        require(deadline >= block.timestamp, \\\"Delegation expired\\\");\\r\\n\\r\\n        // Validate `s` and `v` values for a malleability concern described in EIP2.\\r\\n        // Only signatures with `s` value in the lower half of the secp256k1\\r\\n        // curve's order and `v` value of 27 or 28 are considered valid.\\r\\n        require(\\r\\n            uint256(s) <=\\r\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\r\\n            \\\"Invalid signature 's' value\\\"\\r\\n        );\\r\\n        require(v == 27 || v == 28, \\\"Invalid signature 'v' value\\\");\\r\\n\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\r\\n                \\\"\\\\x19\\\\x01\\\",\\r\\n                DOMAIN_SEPARATOR(),\\r\\n                keccak256(\\r\\n                    abi.encode(\\r\\n                        DELEGATION_TYPEHASH,\\r\\n                        delegatee,\\r\\n                        nonce[signatory]++,\\r\\n                        deadline\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\r\\n        require(\\r\\n            recoveredAddress != address(0) && recoveredAddress == signatory,\\r\\n            \\\"Invalid signature\\\"\\r\\n        );\\r\\n\\r\\n        return delegate(signatory, delegatee);\\r\\n    }\\r\\n\\r\\n    /// @notice Delegate votes from `msg.sender` to `delegatee`.\\r\\n    /// @param delegatee The address to delegate votes to\\r\\n    function delegate(address delegatee) public virtual {\\r\\n        return delegate(msg.sender, delegatee);\\r\\n    }\\r\\n\\r\\n    // slither-disable-next-line dead-code\\r\\n    function beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        uint96 safeAmount = SafeCast.toUint96(amount);\\r\\n\\r\\n        // When minting:\\r\\n        if (from == address(0)) {\\r\\n            // Does not allow to mint more than uint96 can fit. Otherwise, the\\r\\n            // Checkpoint might not fit the balance.\\r\\n            require(\\r\\n                totalSupply + amount <= maxSupply(),\\r\\n                \\\"Maximum total supply exceeded\\\"\\r\\n            );\\r\\n            writeCheckpoint(_totalSupplyCheckpoints, add, safeAmount);\\r\\n        }\\r\\n\\r\\n        // When burning:\\r\\n        if (to == address(0)) {\\r\\n            writeCheckpoint(_totalSupplyCheckpoints, subtract, safeAmount);\\r\\n        }\\r\\n\\r\\n        moveVotingPower(delegates(from), delegates(to), safeAmount);\\r\\n    }\\r\\n\\r\\n    function delegate(address delegator, address delegatee)\\r\\n        internal\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        address currentDelegate = delegates(delegator);\\r\\n        uint96 delegatorBalance = SafeCast.toUint96(balanceOf[delegator]);\\r\\n        _delegates[delegator] = delegatee;\\r\\n\\r\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\r\\n\\r\\n        moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xae87fcb04d4736f45124db969b26b60dc71636ed38e1ae8a3087a88a5c31df45\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/PercentUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary PercentUtils {\\r\\n    // Return `b`% of `a`\\r\\n    // 200.percent(40) == 80\\r\\n    // Commutative, works both ways\\r\\n    function percent(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return (a * b) / 100;\\r\\n    }\\r\\n\\r\\n    // Return `a` as percentage of `b`:\\r\\n    // 80.asPercentOf(200) == 40\\r\\n    //slither-disable-next-line dead-code\\r\\n    function asPercentOf(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return (a * 100) / b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x73fa6d52600d278b712257e75cef8d3252e7cf09503f93b889a0d012acc728f0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/SafeTUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../token/T.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\n\\r\\n/// @notice A wrapper around OpenZeppelin's `SafeERC20Upgradeable` but specific\\r\\n///         to the T token. Use this library in upgradeable contracts. If your\\r\\n///         contract is non-upgradeable, then the traditional `SafeERC20` works.\\r\\n///         The motivation is to prevent upgradeable contracts that use T from\\r\\n///         depending on the `Address` library, which can be problematic since\\r\\n///         it uses `delegatecall`, which is discouraged by OpenZeppelin for use\\r\\n///         in upgradeable contracts.\\r\\n/// @dev This implementation force-casts T to `IERC20Upgradeable` to make it\\r\\n///      work with `SafeERC20Upgradeable`.\\r\\nlibrary SafeTUpgradeable {\\r\\n    function safeTransfer(\\r\\n        T token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        SafeERC20Upgradeable.safeTransfer(\\r\\n            IERC20Upgradeable(address(token)),\\r\\n            to,\\r\\n            value\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        T token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        SafeERC20Upgradeable.safeTransferFrom(\\r\\n            IERC20Upgradeable(address(token)),\\r\\n            from,\\r\\n            to,\\r\\n            value\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb08d9c245a53fedeb738e045baa32f71a86ce3aa73cb8186a7d0e4ead988c3a1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vending/VendingMachine.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588     \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n//               \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c    \\u2590\\u2588\\u2588\\u2588\\u2588\\u258c\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol\\\";\\r\\nimport \\\"../token/T.sol\\\";\\r\\n\\r\\n/// @title T token vending machine\\r\\n/// @notice Contract implements a special update protocol to enable KEEP/NU\\r\\n///         token holders to wrap their tokens and obtain T tokens according\\r\\n///         to a fixed ratio. This will go on indefinitely and enable NU and\\r\\n///         KEEP token holders to join T network without needing to buy or\\r\\n///         sell any assets. Logistically, anyone holding NU or KEEP can wrap\\r\\n///         those assets in order to upgrade to T. They can also unwrap T in\\r\\n///         order to downgrade back to the underlying asset. There is a separate\\r\\n///         instance of this contract deployed for KEEP holders and a separate\\r\\n///         instance of this contract deployed for NU holders.\\r\\ncontract VendingMachine is IReceiveApproval {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeERC20 for T;\\r\\n\\r\\n    /// @notice Number of decimal places of precision in conversion to/from\\r\\n    ///         wrapped tokens (assuming typical ERC20 token with 18 decimals).\\r\\n    ///         This implies that amounts of wrapped tokens below this precision\\r\\n    ///         won't take part in the conversion. E.g., for a value of 3, then\\r\\n    ///         for a conversion of 1.123456789 wrapped tokens, only 1.123 is\\r\\n    ///         convertible (i.e., 3 decimal places), and 0.000456789 is left.\\r\\n    uint256 public constant WRAPPED_TOKEN_CONVERSION_PRECISION = 3;\\r\\n\\r\\n    /// @notice Divisor for precision purposes, used to represent fractions.\\r\\n    uint256 public constant FLOATING_POINT_DIVISOR =\\r\\n        10**(18 - WRAPPED_TOKEN_CONVERSION_PRECISION);\\r\\n\\r\\n    /// @notice The token being wrapped to T (KEEP/NU).\\r\\n    IERC20 public immutable wrappedToken;\\r\\n\\r\\n    /// @notice T token contract.\\r\\n    T public immutable tToken;\\r\\n\\r\\n    /// @notice The ratio with which T token is converted based on the provided\\r\\n    ///         token being wrapped (KEEP/NU), expressed in 1e18 precision.\\r\\n    ///\\r\\n    ///         When wrapping:\\r\\n    ///           x [T] = amount [KEEP/NU] * ratio / FLOATING_POINT_DIVISOR\\r\\n    ///\\r\\n    ///         When unwrapping:\\r\\n    ///           x [KEEP/NU] = amount [T] * FLOATING_POINT_DIVISOR / ratio\\r\\n    uint256 public immutable ratio;\\r\\n\\r\\n    /// @notice The total balance of wrapped tokens for the given holder\\r\\n    ///         account. Only holders that have previously wrapped KEEP/NU to T\\r\\n    ///         can unwrap, up to the amount previously wrapped.\\r\\n    mapping(address => uint256) public wrappedBalance;\\r\\n\\r\\n    event Wrapped(\\r\\n        address indexed recipient,\\r\\n        uint256 wrappedTokenAmount,\\r\\n        uint256 tTokenAmount\\r\\n    );\\r\\n    event Unwrapped(\\r\\n        address indexed recipient,\\r\\n        uint256 tTokenAmount,\\r\\n        uint256 wrappedTokenAmount\\r\\n    );\\r\\n\\r\\n    /// @notice Sets the reference to `wrappedToken` and `tToken`. Initializes\\r\\n    ///         conversion `ratio` between wrapped token and T based on the\\r\\n    ///         provided `_tTokenAllocation` and `_wrappedTokenAllocation`.\\r\\n    /// @param _wrappedToken Address to ERC20 token that will be wrapped to T\\r\\n    /// @param _tToken Address of T token\\r\\n    /// @param _wrappedTokenAllocation The total supply of the token that will be\\r\\n    ///       wrapped to T\\r\\n    /// @param _tTokenAllocation The allocation of T this instance of Vending\\r\\n    ///        Machine will receive\\r\\n    /// @dev Multiplications in this contract can't overflow uint256 as we\\r\\n    ///     restrict `_wrappedTokenAllocation` and `_tTokenAllocation` to\\r\\n    ///     96 bits and FLOATING_POINT_DIVISOR fits in less than 60 bits.\\r\\n    constructor(\\r\\n        IERC20 _wrappedToken,\\r\\n        T _tToken,\\r\\n        uint96 _wrappedTokenAllocation,\\r\\n        uint96 _tTokenAllocation\\r\\n    ) {\\r\\n        wrappedToken = _wrappedToken;\\r\\n        tToken = _tToken;\\r\\n        ratio =\\r\\n            (FLOATING_POINT_DIVISOR * _tTokenAllocation) /\\r\\n            _wrappedTokenAllocation;\\r\\n    }\\r\\n\\r\\n    /// @notice Wraps up to the the given `amount` of the token (KEEP/NU) and\\r\\n    ///         releases T token proportionally to the amount being wrapped with\\r\\n    ///         respect to the wrap ratio. The token holder needs to have at\\r\\n    ///         least the given amount of the wrapped token (KEEP/NU) approved\\r\\n    ///         to transfer to the Vending Machine before calling this function.\\r\\n    /// @param amount The amount of KEEP/NU to be wrapped\\r\\n    function wrap(uint256 amount) external {\\r\\n        _wrap(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Wraps up to the given amount of the token (KEEP/NU) and releases\\r\\n    ///         T token proportionally to the amount being wrapped with respect\\r\\n    ///         to the wrap ratio. This is a shortcut to `wrap` function that\\r\\n    ///         avoids a separate approval transaction. Only KEEP/NU token\\r\\n    ///         is allowed as a caller, so please call this function via\\r\\n    ///         token's `approveAndCall`.\\r\\n    /// @param from Caller's address, must be the same as `wrappedToken` field\\r\\n    /// @param amount The amount of KEEP/NU to be wrapped\\r\\n    /// @param token Token's address, must be the same as `wrappedToken` field\\r\\n    function receiveApproval(\\r\\n        address from,\\r\\n        uint256 amount,\\r\\n        address token,\\r\\n        bytes calldata\\r\\n    ) external override {\\r\\n        require(\\r\\n            token == address(wrappedToken),\\r\\n            \\\"Token is not the wrapped token\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.sender == address(wrappedToken),\\r\\n            \\\"Only wrapped token caller allowed\\\"\\r\\n        );\\r\\n        _wrap(from, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Unwraps up to the given `amount` of T back to the legacy token\\r\\n    ///         (KEEP/NU) according to the wrap ratio. It can only be called by\\r\\n    ///         a token holder who previously wrapped their tokens in this\\r\\n    ///         vending machine contract. The token holder can't unwrap more\\r\\n    ///         tokens than they originally wrapped. The token holder needs to\\r\\n    ///         have at least the given amount of T tokens approved to transfer\\r\\n    ///         to the Vending Machine before calling this function.\\r\\n    /// @param amount The amount of T to unwrap back to the collateral (KEEP/NU)\\r\\n    function unwrap(uint256 amount) external {\\r\\n        _unwrap(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the T token amount that's obtained from `amount` wrapped\\r\\n    ///         tokens (KEEP/NU), and the remainder that can't be upgraded.\\r\\n    function conversionToT(uint256 amount)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 tAmount, uint256 wrappedRemainder)\\r\\n    {\\r\\n        wrappedRemainder = amount % FLOATING_POINT_DIVISOR;\\r\\n        uint256 convertibleAmount = amount - wrappedRemainder;\\r\\n        tAmount = (convertibleAmount * ratio) / FLOATING_POINT_DIVISOR;\\r\\n    }\\r\\n\\r\\n    /// @notice The amount of wrapped tokens (KEEP/NU) that's obtained from\\r\\n    ///         `amount` T tokens, and the remainder that can't be downgraded.\\r\\n    function conversionFromT(uint256 amount)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 wrappedAmount, uint256 tRemainder)\\r\\n    {\\r\\n        tRemainder = amount % ratio;\\r\\n        uint256 convertibleAmount = amount - tRemainder;\\r\\n        wrappedAmount = (convertibleAmount * FLOATING_POINT_DIVISOR) / ratio;\\r\\n    }\\r\\n\\r\\n    function _wrap(address tokenHolder, uint256 wrappedTokenAmount) internal {\\r\\n        (uint256 tTokenAmount, uint256 remainder) = conversionToT(\\r\\n            wrappedTokenAmount\\r\\n        );\\r\\n        wrappedTokenAmount -= remainder;\\r\\n        require(wrappedTokenAmount > 0, \\\"Disallow conversions of zero value\\\");\\r\\n        emit Wrapped(tokenHolder, wrappedTokenAmount, tTokenAmount);\\r\\n\\r\\n        wrappedBalance[tokenHolder] += wrappedTokenAmount;\\r\\n        wrappedToken.safeTransferFrom(\\r\\n            tokenHolder,\\r\\n            address(this),\\r\\n            wrappedTokenAmount\\r\\n        );\\r\\n        tToken.safeTransfer(tokenHolder, tTokenAmount);\\r\\n    }\\r\\n\\r\\n    function _unwrap(address tokenHolder, uint256 tTokenAmount) internal {\\r\\n        (uint256 wrappedTokenAmount, uint256 remainder) = conversionFromT(\\r\\n            tTokenAmount\\r\\n        );\\r\\n        tTokenAmount -= remainder;\\r\\n        require(tTokenAmount > 0, \\\"Disallow conversions of zero value\\\");\\r\\n        require(\\r\\n            wrappedBalance[tokenHolder] >= wrappedTokenAmount,\\r\\n            \\\"Can not unwrap more than previously wrapped\\\"\\r\\n        );\\r\\n\\r\\n        emit Unwrapped(tokenHolder, tTokenAmount, wrappedTokenAmount);\\r\\n        wrappedBalance[tokenHolder] -= wrappedTokenAmount;\\r\\n        tToken.safeTransferFrom(tokenHolder, address(this), tTokenAmount);\\r\\n        wrappedToken.safeTransfer(tokenHolder, wrappedTokenAmount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6eba12471187b644b11157327ea11fe275af6276dc06876511bd70bb31c9fdef\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b506040516200633b3803806200633b833981016040819052620000359162000380565b6000866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200007157600080fd5b505afa15801562000086573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ac919062000414565b1180156200013f5750604051630a57ebcf60e11b8152600060048201819052906001600160a01b038716906314afd79e9060240160206040518083038186803b158015620000f957600080fd5b505afa1580156200010e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013491906200042e565b6001600160a01b0316145b8015620001c55750604051630bc5b6f360e11b8152600060048201526001600160a01b0385169063178b6de69060240160206040518083038186803b1580156200018857600080fd5b505afa1580156200019d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c3919062000414565b155b8015620001e35750620001e3816200035860201b620039ce1760201c565b620002345760405162461bcd60e51b815260206004820152601660248201527f57726f6e6720696e70757420706172616d657465727300000000000000000000604482015260640160405180910390fd5b6001600160a01b0380871660805285811660a05281811660c05284811660e052604080516371ca337d60e01b81529051918516916371ca337d91600480820192602092909190829003018186803b1580156200028f57600080fd5b505afa158015620002a4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002ca919062000414565b6101008181525050816001600160a01b03166371ca337d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200030c57600080fd5b505afa15801562000321573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000347919062000414565b610120525062000455945050505050565b6001600160a01b03163b151590565b6001600160a01b03811681146200037d57600080fd5b50565b60008060008060008060c087890312156200039a57600080fd5b8651620003a78162000367565b6020880151909650620003ba8162000367565b6040880151909550620003cd8162000367565b6060880151909450620003e08162000367565b6080880151909350620003f38162000367565b60a0880151909250620004068162000367565b809150509295509295509295565b6000602082840312156200042757600080fd5b5051919050565b6000602082840312156200044157600080fd5b81516200044e8162000367565b9392505050565b60805160a05160c05160e0516101005161012051615dee6200054d6000396000818161101101528181611779015281816128040152818161418b015261481e015260008181610cf401528181613cb3015281816142640152614b3a01526000818161276c015281816140e301526149060152600081816114210152612c51015260008181610c4d015281816114dc01528181611595015281816119360152818161240001528181613da9015281816141be0152614aa8015260008181610a8901528181610fb501528181611b1001528181611ef201528181612b6e0152818161306f015281816132e801526147a90152615dee6000f3fe608060405234801561001057600080fd5b50600436106102b45760003560e01c8063067e6bb1146102b95780630fa78bf41461030357806316934fc4146103185780631d5270d31461038857806328c8c55f1461039b5780632c686ca0146103ae5780632cd62915146103c15780632de94807146103d857806332719e06146104505780633a46b1a814610477578063402121af1461048a578063434457481461049d57806344e97423146104b0578063483046bb146104b95780634a11fae3146104cc5780634ec0a9fe146104df57806356f958ee146104f2578063570ea46114610505578063587cde1e1461051857806358ccdf38146105385780635961d5e91461054b5780635aa6e6751461055e5780635f2d5030146105715780636d08f5b0146105845780636d9b9a34146105975780636da91d8b146105aa5780636fcfff45146105bd5780637368dba2146105e557806375e0ae5a146105ee578063793c1365146106015780637d0379f01461060a5780638129fc1c1461061d57806381b0a0ce1461062557806383ddba8f1461063857806386d18a251461064b5780638b7adc091461065e5780638e46ecb6146106715780638e539e8c146106845780639ab24eb014610697578063a0d6ff9a146106aa578063a7bb8ba8146106bd578063ad30e4cd146106c6578063af5f24ad146106ce578063b1958150146106e1578063b626ca3e146106f4578063be2f335114610707578063d38bfff41461071a578063d3e25ef31461072d578063d3ecb6cd14610740578063dfefadff14610753578063e009245a14610766578063e3ae4d0a146107ac578063eaa86492146107bf578063ef47bf40146107d2578063f07f91c5146107e5578063f1127ed8146107f8578063f1f6c31514610835578063f6e0faeb14610856578063f848beff14610882578063ffd2f98414610895575b600080fd5b6102ec6102c73660046152f9565b603a6020526000908152604090205460ff81169061010090046001600160a01b031682565b6040516102fa92919061532c565b60405180910390f35b610316610311366004615366565b61089d565b005b61035e6103263660046152f9565b6001600160a01b031660009081526039602052604090206002810154600182015491546001600160601b039182169392821692911690565b604080516001600160601b03948516815292841660208401529216918101919091526060016102fa565b610316610396366004615366565b6108ab565b6103166103a93660046153b6565b610982565b6103166103bc3660046152f9565b610abf565b6103ca60345481565b6040519081526020016102fa565b6104266103e63660046152f9565b6001600160a01b03908116600090815260396020526040902080546001820154600290920154600160601b91829004841694928290048416939190041690565b604080516001600160a01b03948516815292841660208401529216918101919091526060016102fa565b60335461046a90600160a01b90046001600160601b031681565b6040516102fa91906153eb565b61046a6104853660046153ff565b610bdb565b6103166104983660046152f9565b610c06565b6103166104ab3660046152f9565b610e30565b6103ca60365481565b6103166104c736600461542b565b610f27565b6103ca6104da3660046152f9565b610fe9565b6103166104ed3660046152f9565b61103c565b6103166105003660046152f9565b611207565b6103166105133660046152f9565b61135a565b61052b6105263660046152f9565b6116bb565b6040516102fa9190615446565b6103166105463660046153b6565b6116d9565b61031661055936600461545a565b6118bc565b60335461052b906001600160a01b031681565b61031661057f3660046154b4565b611b49565b61031661059236600461542b565b611d8d565b6103166105a53660046153b6565b611e12565b61046a6105b83660046154fb565b611f22565b6105d06105cb3660046152f9565b612091565b60405163ffffffff90911681526020016102fa565b6103ca60385481565b61046a6105fc3660046152f9565b6120b3565b6103ca60375481565b61031661061836600461552d565b612236565b6103166122c1565b610316610633366004615549565b612386565b610316610646366004615640565b61258e565b6103166106593660046152f9565b61259a565b61046a61066c366004615366565b612691565b61031661067f3660046152f9565b612711565b61046a6106923660046156a9565b6128fe565b61046a6106a53660046152f9565b61290b565b6103166106b83660046152f9565b61299c565b6103ca603d5481565b603b546103ca565b6103166106dc3660046152f9565b612ba7565b6103166106ef3660046156a9565b612d44565b610316610702366004615366565b612da3565b6103166107153660046156a9565b612ef1565b6103166107283660046152f9565b613096565b61031661073b36600461542b565b6130c9565b61031661074e3660046153b6565b613130565b61052b6107613660046156a9565b613321565b61046a610774366004615366565b6001600160a01b039182166000908152603960209081526040808320939094168252600390920190915220546001600160601b031690565b6103166107ba3660046152f9565b61334b565b60355461046a906001600160601b031681565b6103166107e03660046152f9565b6134af565b6103166107f33660046156c2565b6135f8565b61080b61080636600461570f565b613605565b60408051825163ffffffff1681526020928301516001600160601b031692810192909252016102fa565b6108486108433660046156a9565b6136b1565b6040516102fa929190615746565b6103ca6108643660046152f9565b6001600160a01b031660009081526039602052604090206005015490565b6103166108903660046154b4565b6136ec565b603c546103ca565b6108a782826139dd565b5050565b6033546001600160a01b031633146108de5760405162461bcd60e51b81526004016108d590615768565b60405180910390fd5b6001600160a01b0382166000908152603a602052604090206001815460ff16600381111561090e5761090e615316565b1461092b5760405162461bcd60e51b81526004016108d59061579e565b80546001600160a01b038084166101008102610100600160a81b0319909316929092178355604051908516907f5a38ebc6ef9570e77e12b2162c48413d53357005add9be886ab130a58d44feb890600090a3505050565b6001600160a01b03828116600090815260396020526040902054600160601b9004166109c05760405162461bcd60e51b81526004016108d5906157d3565b6000816001600160601b0316116109e95760405162461bcd60e51b81526004016108d5906157fe565b6001600160a01b038216600090815260396020526040812060028101805491928492610a1f9084906001600160601b031661584a565b92506101000a8154816001600160601b0302191690836001600160601b03160217905550826001600160a01b0316600080516020615d5983398151915283604051610a6a91906153eb565b60405180910390a2610a7c8383613af8565b610aba6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633306001600160601b038616613b04565b505050565b6001600160a01b038082166000908152603a60205260409020548291610100909104163314610b305760405162461bcd60e51b815260206004820152601e60248201527f43616c6c6572206973206e6f74207468652070616e696320627574746f6e000060448201526064016108d5565b6001600160a01b0382166000908152603a602052604090206001815460ff166003811115610b6057610b60615316565b14610ba75760405162461bcd60e51b815260206004820152601760248201527621b0b713ba103830bab9b29030b8383634b1b0ba34b7b760491b60448201526064016108d5565b805460ff1916600290811782556040516001600160a01b03851690600080516020615cd983398151915290600090a3505050565b6001600160a01b0382166000908152600260205260408120610bfd9083613b10565b90505b92915050565b6001600160a01b038116600090815260396020526040902060018101546001600160601b0316610c485760405162461bcd60e51b81526004016108d590615875565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fab46d66856040518263ffffffff1660e01b8152600401610c979190615446565b60606040518083038186803b158015610caf57600080fd5b505afa158015610cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce7919061589f565b92505091506000610d18837f0000000000000000000000000000000000000000000000000000000000000000613c0a565b5060018501549091506001600160601b03908116908216811180610d3b57508215155b610d575760405162461bcd60e51b81526004016108d5906158cd565b6001850180546001600160601b0319166001600160601b0384811691909117909155603554603654610d8f9288928a92911690613c5c565b506001850154600090610dab906001600160601b0316846158fe565b905060011515876001600160a01b0316600080516020615cf983398151915283604051610dd891906153eb565b60405180910390a38315610df9576001860180546001600160601b03191690555b6001860154610e1c908890610e17906001600160601b0316856158fe565b613e25565b610e27878783613e31565b50505050505050565b6033546001600160a01b03163314610e5a5760405162461bcd60e51b81526004016108d590615768565b6001600160a01b0381166000908152603a602052604090206001815460ff166003811115610e8a57610e8a615316565b1480610eab57506002815460ff166003811115610ea957610ea9615316565b145b610ef35760405162461bcd60e51b815260206004820152601960248201527821b0b713ba103234b9b0b136329030b8383634b1b0ba34b7b760391b60448201526064016108d5565b805460ff1916600390811782555b6040516001600160a01b03841690600080516020615cd983398151915290600090a35050565b6000816001600160601b031611610f505760405162461bcd60e51b81526004016108d5906157fe565b806001600160601b031660376000828254610f6b9190615926565b90915550506040517f9de5348508c6ad1f6ff7fcfb84e126bb094784e85bf83f7e3801bc44f9c6dc9790610fa09083906153eb565b60405180910390a1610fe66001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633306001600160601b038516613b04565b50565b6001600160a01b038116600090815260396020526040812054611035906001600160601b03167f0000000000000000000000000000000000000000000000000000000000000000614090565b5092915050565b6001600160a01b038082166000908152603960205260409020548291600160601b90910416158015906110a157506001600160a01b0381163314806110a157506001600160a01b03818116600090815260396020526040902054600160601b90041633145b6110bd5760405162461bcd60e51b81526004016108d59061593e565b6001600160a01b038216600090815260396020526040902060018101546001600160601b0316806111255760405162461bcd60e51b81526020600482015260126024820152714e6f7468696e6720746f20756e7374616b6560701b60448201526064016108d5565b611130846001611f22565b6001600160601b0316156111845760405162461bcd60e51b815260206004820152601b60248201527a12d9595c081cdd185ad9481cdd1a5b1b08185d5d1a1bdc9a5e9959602a1b60448201526064016108d5565b426201518083600501546111989190615926565b11156111b65760405162461bcd60e51b81526004016108d59061596d565b836001600160a01b0316600080516020615d39833981519152826040516111dd91906153eb565b60405180910390a26001820180546001600160601b03191690556112018482613e25565b50505050565b6001600160a01b038082166000908152603960205260409020548291600160601b909104161580159061126c57506001600160a01b03811633148061126c57506001600160a01b03818116600090815260396020526040902054600160601b90041633145b6112885760405162461bcd60e51b81526004016108d59061593e565b6001600160a01b038083166000908152603960205260408120805490926112b791600160601b900416856140de565b82549091506001600160601b03908116908216116112e75760405162461bcd60e51b81526004016108d5906157d3565b81546000906112ff906001600160601b0316836158fe565b9050846001600160a01b0316600080516020615d598339815191528260405161132891906153eb565b60405180910390a282546001600160601b0319166001600160601b0383161783556113538582613af8565b5050505050565b6001600160a01b0381166113805760405162461bcd60e51b81526004016108d5906157fe565b6001600160a01b03808216600090815260396020526040902080549091600160601b90910416156113c35760405162461bcd60e51b81526004016108d5906159a4565b60006113ce836141b9565b90506001600160601b0381166113f65760405162461bcd60e51b81526004016108d5906159d8565b6001820180546001600160601b0319166001600160601b03831617905560405162f9934b60e11b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906301f326969061145e908690600401615446565b60206040518083038186803b15801561147657600080fd5b505afa15801561148a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ae9190615a01565b82546001600160601b0316600160601b6001600160a01b039283160217835560405163fb1677b160e01b81527f00000000000000000000000000000000000000000000000000000000000000009091169063fb1677b190611513908690600401615446565b60206040518083038186803b15801561152b57600080fd5b505afa15801561153f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115639190615a01565b6002830180546001600160601b0316600160601b6001600160a01b039384160217905560405163ba7bffd360e01b81527f00000000000000000000000000000000000000000000000000000000000000009091169063ba7bffd3906115cc908690600401615446565b60206040518083038186803b1580156115e457600080fd5b505afa1580156115f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161c9190615a01565b6001830180546001600160a01b0392909216600160601b026001600160601b039092169190911790554260058301556116558382613af8565b81546001600160a01b0380851691600160601b9004166001808501546002860154604051600080516020615d79833981519152926116ae926001600160a01b03600160601b928390048116939290910416908890615a1e565b60405180910390a4505050565b6001600160a01b039081166000908152600160205260409020541690565b6001600160a01b038083166000908152603960205260409020548391600160601b909104161580159061173e57506001600160a01b03811633148061173e57506001600160a01b03818116600090815260396020526040902054600160601b90041633145b61175a5760405162461bcd60e51b81526004016108d59061593e565b6001600160a01b03831660009081526039602052604081209061179d847f0000000000000000000000000000000000000000000000000000000000000000614090565b91506117ab905081856158fe565b93506000846001600160601b03161180156117ed575081546001600160601b03166117d7866000611f22565b6117e1908661584a565b6001600160601b031611155b6118095760405162461bcd60e51b81526004016108d590615a4a565b4262015180836005015461181d9190615926565b111561183b5760405162461bcd60e51b81526004016108d59061596d565b8154849083906000906118589084906001600160601b03166158fe565b92506101000a8154816001600160601b0302191690836001600160601b031602179055506118868585613e25565b846001600160a01b0316600080516020615d39833981519152856040516118ad91906153eb565b60405180910390a25050505050565b6001600160a01b038416158015906118dc57506001600160a01b03831615155b80156118f057506001600160a01b03821615155b61190c5760405162461bcd60e51b81526004016108d5906157fe565b6001600160a01b038085166000908152603960205260408082209051637d5a36b360e11b815290927f0000000000000000000000000000000000000000000000000000000000000000169063fab46d669061196b908990600401615446565b60606040518083038186803b15801561198357600080fd5b505afa158015611997573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bb919061589f565b50915050801580156119dc57508154600160601b90046001600160a01b0316155b6119f85760405162461bcd60e51b81526004016108d5906159a4565b6000836001600160601b0316118015611a2757506033546001600160601b03600160a01b909104811690841610155b611a715760405162461bcd60e51b815260206004820152601b60248201527a416d6f756e74206973206c657373207468616e206d696e696d756d60281b60448201526064016108d5565b8154600160601b3381026001600160601b039283161784556001840180546001600160a01b03898116840291851691909117909155918516918616026001600160601b031916176002830155426005830155611acd8684613af8565b6001600160a01b038616336002600080516020615d79833981519152888888604051611afb93929190615a1e565b60405180910390a4611b416001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633306001600160601b038716613b04565b505050505050565b6001600160a01b038084166000908152603960205260409020600201548491600160601b909104163314611b8f5760405162461bcd60e51b81526004016108d590615a77565b6001600160a01b0383166000908152603a602052604090206001815460ff166003811115611bbf57611bbf615316565b14611bdc5760405162461bcd60e51b81526004016108d59061579e565b6000836001600160601b031611611c055760405162461bcd60e51b81526004016108d5906157fe565b6001600160a01b0380861660009081526039602090815260408083209388168352600390930190522080546001600160601b0380861691161015611c875760405162461bcd60e51b8152602060048201526019602482015278105b5bdd5b9d08195e18d959591cc8185d5d1a1bdc9a5e9959603a1b60448201526064016108d5565b80546001600160601b03808616600160601b02600160601b600160c01b0319831681178455600092611cbf92889281169116176158fe565b82546040519192506001600160a01b0380891692908a16917f132e76775c4e3b4b2c36fe4acc18d539b6c34b984ac6ba494a5996c48d8a017491611d0e916001600160601b0316908690615a9f565b60405180910390a381546040516306a7f7a960e41b81526001600160a01b03881691636a7f7a9091611d52918b916001600160601b03909116908690600401615ab9565b600060405180830381600087803b158015611d6c57600080fd5b505af1158015611d80573d6000803e3d6000fd5b5050505050505050505050565b6033546001600160a01b03163314611db75760405162461bcd60e51b81526004016108d590615768565b603380546001600160a01b0316600160a01b6001600160601b038416021790556040517f91d1e8918c0ec490b6eccd803db78273458f0a7d4b3915e062f1402e9521f51890611e079083906153eb565b60405180910390a150565b6033546001600160a01b03163314611e3c5760405162461bcd60e51b81526004016108d590615768565b603754816001600160601b03161115611e8b5760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820746f6b656e7360781b60448201526064016108d5565b806001600160601b031660376000828254611ea69190615ae3565b90915550506040517f7083cb4f4c81bb6d7425a5bde6b6969cd8c446730ed572607ef79246bc44ee4290611edd9084908490615746565b60405180910390a16108a76001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016836001600160601b038416614291565b6001600160a01b038216600090815260396020526040812081805b6004830154811015611fb4576000836004018281548110611f6057611f60615afa565b60009182526020808320909101546001600160a01b031680835260038701909152604090912054909150611f9e9084906001600160601b031661429c565b9250508080611fac90615b10565b915050611f3d565b5080611fc557600092505050610c00565b6002846002811115611fd957611fd9615316565b14612004576002820154611ff79082906001600160601b03166142b3565b6120019082615ae3565b90505b600084600281111561201857612018615316565b146120405781546120339082906001600160601b03166142b3565b61203d9082615ae3565b90505b600184600281111561205457612054615316565b1461207f5760018201546120729082906001600160601b03166142b3565b61207c9082615ae3565b90505b612088816142c2565b95945050505050565b6001600160a01b038116600090815260026020526040812054610c009061432e565b336000908152603a602052604081206001815460ff1660038111156120da576120da615316565b146120f75760405162461bcd60e51b81526004016108d59061579e565b6001600160a01b0383166000908152603960209081526040808320338452600381019092529091208054600160601b90046001600160601b031661217b5760405162461bcd60e51b815260206004820152601b60248201527a4e6f206465617574686f72697a696e6720696e2070726f6365737360281b60448201526064016108d5565b80546001600160601b0380821691600160601b90041682600061219e83856158fe565b82546101009290920a6001600160601b038181021990931691831602179091558354600160601b600160c01b0319811685556040513393506001600160a01b038a1692600080516020615d19833981519152926122019287929190911690615a9f565b60405180910390a381546001600160601b031661222357612223836001614393565b50546001600160601b0316949350505050565b6033546001600160a01b031633146122605760405162461bcd60e51b81526004016108d590615768565b603580546001600160601b0319166001600160601b038416908117909155603682905560408051918252602082018390527f3f84f36f8e044bbbc00d303ae27c8871614781ac684742a3d8db7eb2eb98785f91015b60405180910390a15050565b600054610100900460ff166122dc5760005460ff16156122e4565b6122e461451a565b6123475760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108d5565b600054610100900460ff16158015612369576000805461ffff19166101011790555b6123723361452b565b8015610fe6576000805461ff001916905550565b6001600160a01b038316158015906123a657506001600160a01b03821615155b80156123ba57506001600160a01b03811615155b6123d65760405162461bcd60e51b81526004016108d5906157fe565b6001600160a01b038084166000908152603960205260408082209051637d5a36b360e11b815290927f0000000000000000000000000000000000000000000000000000000000000000169063fab46d6690612435908890600401615446565b60606040518083038186803b15801561244d57600080fd5b505afa158015612461573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612485919061589f565b50915050801580156124a657508154600160601b90046001600160a01b0316155b6124c25760405162461bcd60e51b81526004016108d5906159a4565b60006124ce33876140de565b90506000816001600160601b0316116124f95760405162461bcd60e51b81526004016108d5906159d8565b600160601b3381026001600160601b038084169190911785556002850180546001600160a01b0388811685029184169190911790915560018601805491891690930291161790554260058401556125508682613af8565b6001600160a01b038616336000600080516020615d7983398151915288888660405161257e93929190615a1e565b60405180910390a4505050505050565b6112018484848461457e565b6001600160a01b038116600090815260396020526040812090805b600483015481101561263e5760008360040182815481106125d8576125d8615afa565b60009182526020808320909101546001600160a01b0316808352600387019091526040909120549091506001600160601b031680156126295761261c868383611b49565b612626818561584a565b93505b5050808061263690615b10565b9150506125b5565b506000816001600160601b031611610aba5760405162461bcd60e51b8152602060048201526016602482015275139bdd1a1a5b99c81dd85cc8185d5d1a1bdc9a5e995960521b60448201526064016108d5565b6001600160a01b03821660009081526039602052604081208054600182015460028301546001600160601b03928316926126ce928116911661584a565b6126d8919061584a565b6001600160a01b0384166000908152600383016020526040902054909250612709906001600160601b0316836158fe565b949350505050565b6001600160a01b038116600090815260396020526040902080546001600160601b03166127505760405162461bcd60e51b81526004016108d590615875565b8054604051630bc5b6f360e11b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263178b6de6926127aa92600160601b9091041690600401615446565b60206040518083038186803b1580156127c257600080fd5b505afa1580156127d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127fa9190615b2b565b90506000612828827f0000000000000000000000000000000000000000000000000000000000000000613c0a565b5083549091506001600160601b03908116908216811161285a5760405162461bcd60e51b81526004016108d5906158cd565b83546001600160601b0319166001600160601b0383811691909117855560355460365461288a92879216906147d0565b5083546000906128a3906001600160601b0316846158fe565b905060011515866001600160a01b0316600080516020615cf9833981519152836040516128d091906153eb565b60405180910390a36128e3868683613e31565b8454611b41908790610e17906001600160601b0316856158fe565b6000610c00600383613b10565b6001600160a01b0381166000908152600260205260408120548015612992576001600160a01b038316600090815260026020526040902061298d90612951600184615ae3565b8154811061296157612961615afa565b90600052602060002090600291828204019190066010029054906101000a90046001600160801b031690565b612995565b60005b9392505050565b6001600160a01b038082166000908152603960205260409020548291600160601b9091041615801590612a0157506001600160a01b038116331480612a0157506001600160a01b03818116600090815260396020526040902054600160601b90041633145b612a1d5760405162461bcd60e51b81526004016108d59061593e565b6001600160a01b0382166000908152603960205260409020600481015415612a805760405162461bcd60e51b815260206004820152601660248201527514dd185ad9481cdd1a5b1b08185d5d1a1bdc9a5e995960521b60448201526064016108d5565b42620151808260050154612a949190615926565b1115612ab25760405162461bcd60e51b81526004016108d59061596d565b8054600182015460028301546000926001600160601b0390811692612adb92908216911661584a565b612ae5919061584a565b9050836001600160a01b0316600080516020615d3983398151915282604051612b0e91906153eb565b60405180910390a26002820180546001600160601b031980821690925560018401805483169055835490911683556001600160601b0316612b4f8583613e25565b6001600160601b03811615611353578254611353906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691600160601b9004166001600160601b038416614291565b6001600160a01b038082166000908152603960205260409020548291600160601b9091041615801590612c0c57506001600160a01b038116331480612c0c57506001600160a01b03818116600090815260396020526040902054600160601b90041633145b612c285760405162461bcd60e51b81526004016108d59061593e565b6001600160a01b03808316600090815260396020526040808220905162f9934b60e11b815290927f000000000000000000000000000000000000000000000000000000000000000016906301f3269690612c86908790600401615446565b60206040518083038186803b158015612c9e57600080fd5b505afa158015612cb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd69190615a01565b82546040519192506001600160a01b0380841692600160601b909204811691908716907fda8908ea0ecabda6b6dec96ed40b9c47ffbf9be10f30912965c984face902e1490600090a481546001600160a01b03909116600160601b026001600160601b039091161790555050565b6033546001600160a01b03163314612d6e5760405162461bcd60e51b81526004016108d590615768565b60348190556040518181527ff82f602e8097a5c312216f60ca94cd1ff03aac29893f9adef7ed7e6ae33c76e290602001611e07565b60036001600160a01b0382166000908152603a602052604090205460ff166003811115612dd257612dd2615316565b14612e1d5760405162461bcd60e51b815260206004820152601b60248201527a105c1c1b1a58d85d1a5bdb881a5cc81b9bdd08191a5cd8589b1959602a1b60448201526064016108d5565b6001600160a01b038083166000908152603960209081526040808320938516835260038401909152902080546001600160601b031680612e9f5760405162461bcd60e51b815260206004820152601d60248201527f4170706c69636174696f6e206973206e6f7420617574686f72697a656400000060448201526064016108d5565b81546001600160c01b03191682556040516001600160a01b038086169190871690600080516020615d1983398151915290612ede908590600090615a9f565b60405180910390a3611353836001614393565b603c54603d54108015612f045750600081115b612f455760405162461bcd60e51b81526020600482015260126024820152714e6f7468696e6720746f2070726f6365737360701b60448201526064016108d5565b600081603d54612f559190615926565b9050612f6681603c805490506142b3565b9050603d5481612f769190615ae3565b603d549092506000905b82811015612fd2576000603c8281548110612f9d57612f9d615afa565b906000526020600020019050612fb28161496e565b612fbc908461584a565b9250508080612fca90615b10565b915050612f80565b603d8190556000612fed6001600160601b0384166005614c9c565b9050612ff8816142c2565b61300290846158fe565b6001600160601b03166037600082825461301c9190615926565b9091555050604080518681526020810183905233917f8efe68d059265c97157a10a6aadc9afe80dfa0e96fc959c4de863300e244e156910160405180910390a28015611353576113536001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383614291565b6033546001600160a01b031633146130c05760405162461bcd60e51b81526004016108d590615768565b610fe68161452b565b6033546001600160a01b031633146130f35760405162461bcd60e51b81526004016108d590615768565b6001600160601b0381166038556040517fd579c7b509b9a61b7408309a980bcfcbbf0f336f1b2bb0a760d71f72f0cf313290611e079083906153eb565b6001600160a01b038083166000908152603960205260409020548391600160601b909104161580159061319557506001600160a01b03811633148061319557506001600160a01b03818116600090815260396020526040902054600160601b90041633145b6131b15760405162461bcd60e51b81526004016108d59061593e565b6001600160a01b03831660009081526039602052604090206001600160601b0383161580159061320d57506002808201546001600160601b0316906131f7908690611f22565b613201908561584a565b6001600160601b031611155b6132295760405162461bcd60e51b81526004016108d590615a4a565b4262015180826005015461323d9190615926565b111561325b5760405162461bcd60e51b81526004016108d59061596d565b60028101805484919060009061327b9084906001600160601b03166158fe565b92506101000a8154816001600160601b0302191690836001600160601b031602179055506132a98484613e25565b836001600160a01b0316600080516020615d39833981519152846040516132d091906153eb565b60405180910390a28054611201906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691600160601b9004166001600160601b038616614291565b603b818154811061333157600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b031633146133755760405162461bcd60e51b81526004016108d590615768565b6001600160a01b03811661339b5760405162461bcd60e51b81526004016108d5906157fe565b6001600160a01b0381166000908152603a6020526040812090815460ff1660038111156133ca576133ca615316565b14806133eb57506002815460ff1660038111156133e9576133e9615316565b145b6134335760405162461bcd60e51b815260206004820152601960248201527821b0b713ba1030b8383937bb329030b8383634b1b0ba34b7b760391b60448201526064016108d5565b6000815460ff16600381111561344b5761344b615316565b141561349d57603b80546001810182556000919091527fbbe3212124853f8b0084a66a2d057c2966e251e132af3691db153ab65f0d1a4d0180546001600160a01b0319166001600160a01b0384161790555b805460ff191660019081178255610f01565b6001600160a01b038082166000908152603960205260409020548291600160601b909104161580159061351457506001600160a01b03811633148061351457506001600160a01b03818116600090815260396020526040902054600160601b90041633145b6135305760405162461bcd60e51b81526004016108d59061593e565b6001600160a01b038216600090815260396020526040812090613552846141b9565b60018301549091506001600160601b03908116908216116135855760405162461bcd60e51b81526004016108d5906157d3565b60018201546000906135a0906001600160601b0316836158fe565b9050846001600160a01b0316600080516020615d59833981519152826040516135c991906153eb565b60405180910390a26001830180546001600160601b0319166001600160601b0384161790556113538582613af8565b6108a7826000808461457e565b60408051808201909152600080825260208201526001600160a01b0383166000908152600260205260408120805482916136869163ffffffff871690811061364f5761364f615afa565b90600052602060002090600291828204019190066010029054906101000a90046001600160801b031663ffffffff606082901c1691565b6040805180820190915263ffffffff90921682526001600160601b0316602082015295945050505050565b603c81815481106136c157600080fd5b6000918252602090912001546001600160a01b0381169150600160a01b90046001600160601b031682565b6001600160a01b038084166000908152603960205260409020600201548491600160601b9091041633146137325760405162461bcd60e51b81526004016108d590615a77565b6001600160a01b0383166000908152603a602052604090206001815460ff16600381111561376257613762615316565b1461377f5760405162461bcd60e51b81526004016108d59061579e565b6001600160a01b038086166000908152603960209081526040808320938816835260038401909152902080546001600160601b0316806138425760345415806137cd57506034546004840154105b6138115760405162461bcd60e51b8152602060048201526015602482015274546f6f206d616e79206170706c69636174696f6e7360581b60448201526064016108d5565b600483018054600181018255600091825260209091200180546001600160a01b0319166001600160a01b0389161790555b600061384e8989612691565b9050866001600160601b0316816001600160601b031610156138b25760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420656e6f756768207374616b6520746f20617574686f72697a6500000060448201526064016108d5565b8254879084906000906138cf9084906001600160601b031661584a565b92506101000a8154816001600160601b0302191690836001600160601b03160217905550876001600160a01b0316896001600160a01b03167f87f9f9f59204f53d57a89a817c6083a17979cd0531791c91e18551a56e3cfdd7848660000160009054906101000a90046001600160601b031660405161394f929190615a9f565b60405180910390a3825460405163c9bacaad60e01b81526001600160a01b038a169163c9bacaad91613991918d9187916001600160601b031690600401615ab9565b600060405180830381600087803b1580156139ab57600080fd5b505af11580156139bf573d6000803e3d6000fd5b50505050505050505050505050565b6001600160a01b03163b151590565b6001600160a01b03808316600090815260396020526040902080549091600160601b909104163314613a475760405162461bcd60e51b815260206004820152601360248201527221b0b63632b91034b9903737ba1037bbb732b960691b60448201526064016108d5565b8054600182015460028301546000926001600160601b0390811692613a7092908216911661584a565b613a7a919061584a565b90506000613a87856116bb565b6001600160a01b0386811660008181526001602052604080822080546001600160a01b0319168a8616908117909155905194955093928516927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46113538185846001600160601b0316614cb4565b6108a782826001614dbe565b61120184848484614e98565b6000438210613b5c5760405162461bcd60e51b8152602060048201526018602482015277109b1bd8dac81b9bdd081e595d0819195d195c9b5a5b995960421b60448201526064016108d5565b825460005b81811015613be5576000613b758284614f03565b90506000613bb8878381548110613b8e57613b8e615afa565b6000918252602090912060028204015463ffffffff60019092166010026101000a900460601c1690565b9050858163ffffffff161115613bd057819350613bde565b613bdb826001615926565b92505b5050613b61565b8115613bff57613bfa85612951600185615ae3565b612088565b506000949350505050565b600080613c1e66038d7ea4c6800085615b5a565b90506000613c2c8286615ae3565b9050613c5266038d7ea4c68000613c438684615b6e565b613c4d9190615b8d565b6142c2565b9250509250929050565b60018401546000906001600160601b0316613c78575081612709565b60018501546000906001600160601b0390811690851611613c9a575082613caa565b5060018501546001600160601b03165b600080613cd7837f0000000000000000000000000000000000000000000000000000000000000000614090565b915091508160001415613cef57859350505050612709565b613cf981846158fe565b6001890180549194508491600090613d1b9084906001600160601b03166158fe565b92506101000a8154816001600160601b0302191690836001600160601b031602179055508286613d4b91906158fe565b60408051600180825281830190925291975060009190602080830190803683370190505090508781600081518110613d8557613d85615afa565b6001600160a01b039283166020918202929092010152604051629055e960e41b81527f0000000000000000000000000000000000000000000000000000000000000000909116906309055e9090613de69086908a9033908790600401615ba1565b600060405180830381600087803b158015613e0057600080fd5b505af1158015613e14573d6000803e3d6000fd5b50989b9a5050505050505050505050565b6108a782826000614dbe565b6001820154825460028401546000926001600160601b0390811692613e5a92908216911661584a565b613e64919061584a565b90506000805b600485015481101561407f576000856004018281548110613e8d57613e8d615afa565b60009182526020808320909101546001600160a01b03168083526003890190915260409091208054919250906001600160601b0390811690613ed690613c4d9083908a166142b3565b82548390600090613ef19084906001600160601b03166158fe565b82546101009290920a6001600160601b038181021990931691831602179091558354888216911611159050613f3a5781546001600160601b0319166001600160601b0387161782555b815460405163052a151d60e21b81526001916001600160a01b038616916314a85474916203d09091613f7c918f9188916001600160601b031690600401615ab9565b600060405180830381600088803b158015613f9657600080fd5b5087f193505050508015613fa8575060015b613fb0575060005b82546001600160601b03808216600160601b909204161115613ff1578254600160601b6001600160601b03821602600160601b600160c01b03199091161783555b8254604051821515916001600160a01b0380881692908e16917f0f0171fffaa54732b1f79a3164b315658061a1a51bf8c1010fbed908a8e333f9916140439188916001600160601b0390911690615a9f565b60405180910390a482546001600160601b0316614068578561406481615b10565b9650505b50505050808061407790615b10565b915050613e6a565b508015611353576113538482614393565b6000806140a9613c4d846001600160601b038716615b5a565b905060006140b782866158fe565b6001600160601b03169050836140d466038d7ea4c6800083615b6e565b613c529190615b8d565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633223ff4b85856040518363ffffffff1660e01b815260040161412f929190615c0b565b602060405180830381600087803b15801561414957600080fd5b505af115801561415d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141819190615b2b565b905060006141af827f0000000000000000000000000000000000000000000000000000000000000000613c0a565b5095945050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663afff33ef84306040518363ffffffff1660e01b815260040161420a929190615c0b565b60206040518083038186803b15801561422257600080fd5b505afa158015614236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061425a9190615b2b565b90506000614288827f0000000000000000000000000000000000000000000000000000000000000000613c0a565b50949350505050565b610aba838383614f1e565b6000818310156142ac5781610bfd565b5090919050565b60008183106142ac5781610bfd565b60006001600160601b0382111561432a5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203960448201526536206269747360d01b60648201526084016108d5565b5090565b600063ffffffff82111561432a5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016108d5565b6004820154818114156143ae57610aba6004840160006152a6565b600080806143bc8585615ae3565b90505b80821080156143cd57508483105b156144c75760008660040183815481106143e9576143e9615afa565b60009182526020808320909101546001600160a01b031680835260038a019091526040909120549091506001600160601b03166144b3576004870160016144308688615ae3565b61443a9190615ae3565b8154811061444a5761444a615afa565b6000918252602090912001546004880180546001600160a01b03909216918590811061447857614478615afa565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055836144ab81615b10565b9450506144c1565b826144bd81615b10565b9350505b506143bf565b8091505b83821015611b4157856004018054806144e6576144e6615c25565b600082815260209020810160001990810180546001600160a01b03191690550190558161451281615b10565b9250506144cb565b6000614525306139ce565b15905090565b603380546001600160a01b038381166001600160a01b03198316179092556040519116907f5f56bee8cffbe9a78652a74a60705edede02af10b0bbb888ca44b79a0d42ce80906122b59083908590615c0b565b6000846001600160601b0316118015614598575060008151115b6145b45760405162461bcd60e51b81526004016108d5906157fe565b336000908152603a602052604090206001815460ff1660038111156145db576145db615316565b146145f85760405162461bcd60e51b81526004016108d59061579e565b603c5460005b83518110156146f157600084828151811061461b5761461b615afa565b6020908102919091018101516001600160a01b038116600090815260398352604080822033835260030190935291822054909250614666906001600160601b03908116908b166142b3565b9050806146745750506146df565b603c6040518060400160405280846001600160a01b03168152602001614699846142c2565b6001600160601b039081169091528254600181018455600093845260209384902083519490930151909116600160a01b026001600160a01b039093169290921791015550505b806146e981615b10565b9150506145fe565b506001600160a01b03841615611b4157600061472b8660385484603c8054905061471b9190615ae3565b6147259190615b6e565b90614c9c565b9050614739816037546142b3565b9050846001600160a01b03167f104879b09c38b3b66d79ce8f4cbdcfbe117b79797db65a37ef151d22b5e314718260405161477691815260200190565b60405180910390a28015610e275780603760008282546147969190615ae3565b90915550610e2790506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168683614291565b82546000906001600160601b03166147e9575081612995565b83546000906001600160601b0390811690851611614808575082614815565b5083546001600160601b03165b600080614842837f0000000000000000000000000000000000000000000000000000000000000000614090565b91509150816000141561485a57859350505050612995565b61486481846158fe565b8754909350839088906000906148849084906001600160601b03166158fe565b92506101000a8154816001600160601b0302191690836001600160601b0316021790555082866148b491906158fe565b955060006148c786614725856005614c9c565b8854604051632673086360e21b81526001600160a01b03600160601b9092048216600482015260248101869052336044820152606481018390529192507f000000000000000000000000000000000000000000000000000000000000000016906399cc218c90608401600060405180830381600087803b15801561494a57600080fd5b505af115801561495e573d6000803e3d6000fd5b50989a9950505050505050505050565b80546001600160a01b0381166000908152603960205260408120805460018201546002830154939492936001600160601b03600160a01b90940484169386938116926149be92908216911661584a565b6149c8919061584a565b60028401549091506001600160601b031615614a625760028301546001600160601b03908116908316116149fe57819350614a0f565b60028301546001600160601b031693505b600283018054859190600090614a2f9084906001600160601b03166158fe565b92506101000a8154816001600160601b0302191690836001600160601b031602179055508382614a5f91906158fe565b91505b6000826001600160601b0316118015614a87575060018301546001600160601b031615155b15614b9d578454604051637d5a36b360e11b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263fab46d6692614ade921690600401615446565b60606040518083038186803b158015614af657600080fd5b505afa158015614b0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b2e919061589f565b505090506000614b5e827f0000000000000000000000000000000000000000000000000000000000000000613c0a565b506001860180546001600160601b0319166001600160601b0383161790558754909150614b989086906001600160a01b0316866064613c5c565b935050505b6000826001600160601b0316118015614bbf575082546001600160601b031615155b15614bd357614bd0838360646147d0565b91505b8454600090614bf3908490600160a01b90046001600160601b03166158fe565b86546040519192506000916001600160a01b0390911690600080516020615cf983398151915290614c259085906153eb565b60405180910390a38554614c43906001600160a01b03168583613e31565b8354600185015460028601546000926001600160601b0390811692614c6c92908216911661584a565b614c76919061584a565b8754909150614c92906001600160a01b0316610e1783866158fe565b5050505050919050565b60006064614caa8385615b6e565b610bfd9190615b8d565b816001600160a01b0316836001600160a01b031614158015614cd65750600081115b15610aba576001600160a01b03831615614d52576001600160a01b03831660009081526002602052604081208190614d1190614f4e85614f5a565b91509150846001600160a01b0316600080516020615d998339815191528383604051614d47929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615610aba576001600160a01b03821660009081526002602052604081208190614d88906150b685614f5a565b91509150836001600160a01b0316600080516020615d9983398151915283836040516118ad929190918252602082015260400190565b6001600160601b038216614dd157505050565b614df6600382614de357614f4e614de7565b6150b65b846001600160601b0316614f5a565b50506000614e03846116bb565b90506001600160a01b03811615611201576001600160a01b03811660009081526002602052604081208190614e529085614e3f57614f4e614e43565b6150b65b876001600160601b0316614f5a565b91509150826001600160a01b0316600080516020615d998339815191528383604051614e88929190918252602082015260400190565b60405180910390a2505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526112019085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526150c2565b6000614f126002848418615b8d565b610bfd90848416615926565b6040516001600160a01b038316602482015260448101829052610aba90849063a9059cbb60e01b90606401614ecc565b6000610bfd8284615ae3565b825460009081908015614f7b57614f7686612951600184615ae3565b614f7e565b60005b6001600160601b03169250614f9783858763ffffffff16565b91508015615057576000614fc087614fb0600185615ae3565b81548110613b8e57613b8e615afa565b9050438163ffffffff16141561505557614ff981614fdd856142c2565b6001600160601b031660609190911b63ffffffff60601b161790565b87615005600185615ae3565b8154811061501557615015615afa565b90600052602060002090600291828204019190066010026101000a8154816001600160801b0302191690836001600160801b0316021790555050506150ae565b505b8561506d6150644361432e565b614fdd856142c2565b81546001818101845560009384526020909320600282040180546001600160801b03938416601093909516929092026101000a938402929093021916179055505b935093915050565b6000610bfd8284615926565b6000615117826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166151949092919063ffffffff16565b805190915015610aba57808060200190518101906151359190615c3b565b610aba5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108d5565b60606127098484600085856151a8856139ce565b6151f45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108d5565b600080866001600160a01b031685876040516152109190615c89565b60006040518083038185875af1925050503d806000811461524d576040519150601f19603f3d011682016040523d82523d6000602084013e615252565b606091505b509150915061526282828661526d565b979650505050505050565b6060831561527c575081612995565b82511561528c5782518084602001fd5b8160405162461bcd60e51b81526004016108d59190615ca5565b5080546000825590600052602060002090810190610fe691905b8082111561432a57600081556001016152c0565b6001600160a01b0381168114610fe657600080fd5b80356152f4816152d4565b919050565b60006020828403121561530b57600080fd5b8135612995816152d4565b634e487b7160e01b600052602160045260246000fd5b604081016004841061534e57634e487b7160e01b600052602160045260246000fd5b9281526001600160a01b039190911660209091015290565b6000806040838503121561537957600080fd5b8235615384816152d4565b91506020830135615394816152d4565b809150509250929050565b80356001600160601b03811681146152f457600080fd5b600080604083850312156153c957600080fd5b82356153d4816152d4565b91506153e26020840161539f565b90509250929050565b6001600160601b0391909116815260200190565b6000806040838503121561541257600080fd5b823561541d816152d4565b946020939093013593505050565b60006020828403121561543d57600080fd5b610bfd8261539f565b6001600160a01b0391909116815260200190565b6000806000806080858703121561547057600080fd5b843561547b816152d4565b9350602085013561548b816152d4565b9250604085013561549b816152d4565b91506154a96060860161539f565b905092959194509250565b6000806000606084860312156154c957600080fd5b83356154d4816152d4565b925060208401356154e4816152d4565b91506154f26040850161539f565b90509250925092565b6000806040838503121561550e57600080fd5b8235615519816152d4565b915060208301356003811061539457600080fd5b6000806040838503121561554057600080fd5b61541d8361539f565b60008060006060848603121561555e57600080fd5b8335615569816152d4565b92506020840135615579816152d4565b91506040840135615589816152d4565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126155bb57600080fd5b813560206001600160401b03808311156155d7576155d7615594565b8260051b604051601f19603f830116810181811084821117156155fc576155fc615594565b60405293845285810183019383810192508785111561561a57600080fd5b83870191505b8482101561526257615631826152e9565b83529183019190830190615620565b6000806000806080858703121561565657600080fd5b61565f8561539f565b9350602085013592506040850135615676816152d4565b915060608501356001600160401b0381111561569157600080fd5b61569d878288016155aa565b91505092959194509250565b6000602082840312156156bb57600080fd5b5035919050565b600080604083850312156156d557600080fd5b6156de8361539f565b915060208301356001600160401b038111156156f957600080fd5b615705858286016155aa565b9150509250929050565b6000806040838503121561572257600080fd5b823561572d816152d4565b9150602083013563ffffffff8116811461539457600080fd5b6001600160a01b039290921682526001600160601b0316602082015260400190565b6020808252601c908201527b43616c6c6572206973206e6f742074686520676f7665726e616e636560201b604082015260600190565b6020808252601b908201527a105c1c1b1a58d85d1a5bdb881a5cc81b9bdd08185c1c1c9bdd9959602a1b604082015260600190565b60208082526011908201527004e6f7468696e6720746f20746f702d757607c1b604082015260600190565b6020808252601c908201527b14185c985b595d195c9cc81b5d5cdd081899481cdc1958da599a595960221b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60006001600160601b0382811684821680830382111561586c5761586c615834565b01949350505050565b60208082526010908201526f09cdee8d0d2dcce40e8de40e6d8c2e6d60831b604082015260600190565b6000806000606084860312156158b457600080fd5b8351925060208401519150604084015190509250925092565b6020808252601790820152765468657265206973206e6f2064697363726570616e637960481b604082015260600190565b60006001600160601b038381169083168181101561591e5761591e615834565b039392505050565b6000821982111561593957615939615834565b500190565b6020808252601590820152742737ba1037bbb732b91037b910383937bb34b232b960591b604082015260600190565b6020808252601e908201527f43616e277420756e7374616b65206561726c696572207468616e203234680000604082015260600190565b6020808252601a908201527950726f766964657220697320616c726561647920696e2075736560301b604082015260600190565b6020808252600f908201526e4e6f7468696e6720746f2073796e6360881b604082015260600190565b600060208284031215615a1357600080fd5b8151612995816152d4565b6001600160a01b0393841681529190921660208201526001600160601b03909116604082015260600190565b602080825260139082015272546f6f206d75636820746f20756e7374616b6560681b604082015260600190565b6020808252600e908201526d2737ba1030baba3437b934bd32b960911b604082015260600190565b6001600160601b0392831681529116602082015260400190565b6001600160a01b039390931683526001600160601b03918216602084015216604082015260600190565b600082821015615af557615af5615834565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415615b2457615b24615834565b5060010190565b600060208284031215615b3d57600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b600082615b6957615b69615b44565b500690565b6000816000190483118215151615615b8857615b88615834565b500290565b600082615b9c57615b9c615b44565b500490565b84815260208082018590526001600160a01b038481166040840152608060608401819052845190840181905260009285810192909160a0860190855b81811015615bfb578551841683529484019491840191600101615bdd565b50909a9950505050505050505050565b6001600160a01b0392831681529116602082015260400190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215615c4d57600080fd5b8151801515811461299557600080fd5b60005b83811015615c78578181015183820152602001615c60565b838111156112015750506000910152565b60008251615c9b818460208701615c5d565b9190910192915050565b6020815260008251806020840152615cc4816040850160208701615c5d565b601f01601f1916919091016040019291505056fe96a3c8e9780312d2e82e746b65a21aaca458dd91c375fea6066416ef241e87cbfab4356687062505cc650292203fc214dc8cb4b8bd603e53699e3297186e8dd6dfabb38007f28b342b8f536c8c832f746c2a53627133be65453ac0b98968f40e1221739f34decc066e1d68b15c5fc76b65e7ebe2f08c9f38b3ea3092f9912353b8f8e488e98410126386f575c0e233d2effb198a4e68af68ab1de9c2e542ae82e5beba097f34db5d25b3e8383f0c9ba0b9fe180a3a8d2e761c11207221386dfddec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724a26469706673582212207e76dbb7d922962b557e8603e237a7a6a3378143612fc8f20fd48440497014ab64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "TokenStaking is upgradeable, using OpenZeppelin's Upgradeability      framework. As such, it is required to satisfy OZ's guidelines, like      restrictions on constructors, immutable variables, base contracts and      libraries. See https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor",
        "params": {
          "_keepStake": "Address of Keep contract with grant owners",
          "_keepStakingContract": "Address of Keep staking contract",
          "_keepVendingMachine": "Address of Keep vending machine",
          "_nucypherStakingContract": "Address of NuCypher staking contract",
          "_nucypherVendingMachine": "Address of NuCypher vending machine",
          "_token": "Address of T token contract"
        }
      },
      "getMinStaked(address,uint8)": {
        "details": "For example, suppose the given staking provider has 10 T, 20 T worth      of KEEP, and 30 T worth of NU all staked, and the maximum      application authorization is 40 T, then `getMinStaked` for      that staking provider returns:          * 0 T if KEEP stake type specified i.e.            min = 40 T max - (10 T + 30 T worth of NU) = 0 T          * 10 T if NU stake type specified i.e.            min = 40 T max - (10 T + 20 T worth of KEEP) = 10 T          * 0 T if T stake type specified i.e.            min = 40 T max - (20 T worth of KEEP + 30 T worth of NU) < 0 T      In other words, the minimum stake amount for the specified      stake type is the minimum amount of stake of the given type      needed to satisfy the maximum application authorization given      the staked amounts of the other stake types for that staking      provider."
      },
      "getPastTotalSupply(uint256)": {
        "details": "`blockNumber` must have been already mined",
        "params": {
          "blockNumber": "The block number to get the total supply at"
        }
      },
      "getPastVotes(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will      revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "getStartStakingTimestamp(address)": {
        "details": "This value is set at most once."
      },
      "getVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "increaseAuthorization(address,address,uint96)": {
        "details": "Calls `authorizationIncreased` callback on the given application to      notify the application about authorization change.      See `IApplication`."
      },
      "notifyNuStakeDiscrepancy(address)": {
        "details": "Real discrepancy between T and Nu is impossible.         This method is a safeguard in case of bugs in NuCypher staking         contract"
      },
      "refreshKeepStakeOwner(address)": {
        "details": "The staking provider in T staking contract is the legacy KEEP      staking contract operator."
      },
      "requestAuthorizationDecrease(address)": {
        "details": "Calls `authorizationDecreaseRequested` callback      for each authorized application. See `IApplication`."
      },
      "requestAuthorizationDecrease(address,address,uint96)": {
        "details": "Calls `authorizationDecreaseRequested` callback on the given      application. See `IApplication`."
      },
      "rolesOf(address)": {
        "returns": {
          "authorizer": "Authorizer address.",
          "beneficiary": "Beneficiary address.",
          "owner": "Stake owner address."
        }
      },
      "seize(uint96,uint256,address,address[])": {
        "details": "This method doesn't emit events for staking providers that are         added to the queue. If necessary  events can be added to the         application level."
      },
      "setMinimumStakeAmount(uint96)": {
        "details": "Staking providers are not required to maintain a minimum T stake      all the time. 24 hours after the delegation, T stake can be reduced      below the minimum stake. The minimum stake in the staking contract      is just to protect against griefing stake operation. Please note      that each application may have its own minimum authorization though      and the authorization can not be higher than the stake."
      },
      "slash(uint96,address[])": {
        "details": "This method doesn't emit events for providers that are added to         the queue. If necessary  events can be added to the application         level."
      },
      "stake(address,address,address,uint96)": {
        "details": "The owner of the delegation needs to have the amount approved to      transfer to the staking contract."
      },
      "stakeKeep(address)": {
        "details": "The staking provider in T staking contract is the legacy KEEP      staking contract operator."
      },
      "stakes(address)": {
        "details": "All values are in T denomination"
      },
      "topUp(address,uint96)": {
        "details": "The sender of this transaction needs to have the amount approved to      transfer to the staking contract."
      },
      "unstakeKeep(address)": {
        "details": "This function (or `unstakeAll`) must be called before         `undelegate`/`undelegateAt` in Keep staking contract. Otherwise         provider can be slashed by `notifyKeepStakeDiscrepancy` method."
      },
      "unstakeNu(address,uint96)": {
        "details": "This function (or `unstakeAll`) must be called before `withdraw`         in NuCypher staking contract. Otherwise NU tokens can't be         unlocked.",
        "params": {
          "amount": "Amount of NU to unstake in T denomination",
          "stakingProvider": "Staking provider address"
        }
      }
    },
    "stateVariables": {
      "keepRatio": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "keepStake": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "keepStakingContract": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "nucypherRatio": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "nucypherStakingContract": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "token": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DelegateChanged(address,address,address)": {
        "notice": "Emitted when an account changes their delegate."
      },
      "DelegateVotesChanged(address,uint256,uint256)": {
        "notice": "Emitted when a balance or delegate change results in changes         to an account's voting power."
      }
    },
    "kind": "user",
    "methods": {
      "approveApplication(address)": {
        "notice": "Allows the Governance to approve the particular application         before individual stake authorizers are able to authorize it."
      },
      "approveAuthorizationDecrease(address)": {
        "notice": "Called by the application at its discretion to approve the         previously requested authorization decrease request. Can only be         called by the application that was previously requested to         decrease the authorization for that staking provider.         Returns resulting authorized amount for the application."
      },
      "authorizedStake(address,address)": {
        "notice": "Returns the authorized stake amount of the staking provider for         the application."
      },
      "delegateVoting(address,address)": {
        "notice": "Delegate voting power from the stake associated to the         `stakingProvider` to a `delegatee` address. Caller must be the         owner of this stake."
      },
      "delegates(address)": {
        "notice": "Get the address `account` is currently delegating to."
      },
      "disableApplication(address)": {
        "notice": "Disables the given application. The disabled application can't         slash stakers. Also stakers can't increase authorization to that         application but can decrease without waiting by calling         `forceDecreaseAuthorization` at any moment. Can be called only         by the governance. The disabled application can't be approved         again. Should be used only in case of an emergency."
      },
      "forceDecreaseAuthorization(address,address)": {
        "notice": "Decreases the authorization for the given `stakingProvider` on         the given disabled `application`, for all authorized amount.         Can be called by anyone."
      },
      "getApplicationsLength()": {
        "notice": "Returns length of application array"
      },
      "getAvailableToAuthorize(address,address)": {
        "notice": "Returns available amount to authorize for the specified         application."
      },
      "getMinStaked(address,uint8)": {
        "notice": "Returns minimum possible stake for T, KEEP or NU in T denomination"
      },
      "getPastTotalSupply(uint256)": {
        "notice": "Retrieve the `totalSupply` at the end of `blockNumber`.         Note, this value is the sum of all balances, but it is NOT the         sum of all the delegated votes!"
      },
      "getPastVotes(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of         a block number."
      },
      "getSlashingQueueLength()": {
        "notice": "Returns length of slashing queue"
      },
      "getStartStakingTimestamp(address)": {
        "notice": "Returns start staking timestamp."
      },
      "getVotes(address)": {
        "notice": "Gets the current votes balance for `account`."
      },
      "increaseAuthorization(address,address,uint96)": {
        "notice": "Increases the authorization of the given staking provider for         the given application by the given amount. Can only be called by         the given staking provider’s authorizer."
      },
      "notifyKeepStakeDiscrepancy(address)": {
        "notice": "Notifies about the discrepancy between legacy KEEP active stake         and the amount cached in T staking contract. Slashes the staking         provider in case the amount cached is higher than the actual         active stake amount in KEEP staking contract. Needs to update         authorizations of all affected applications and execute an         involuntary authorization decrease on all affected applications.         Can be called by anyone, notifier receives a reward."
      },
      "notifyNuStakeDiscrepancy(address)": {
        "notice": "Notifies about the discrepancy between legacy NU active stake         and the amount cached in T staking contract. Slashes the         staking provider in case the amount cached is higher than the         actual active stake amount in NU staking contract. Needs to         update authorizations of all affected applications and execute an         involuntary authorization decrease on all affected applications.         Can be called by anyone, notifier receives a reward."
      },
      "numCheckpoints(address)": {
        "notice": "Get number of checkpoints for `account`."
      },
      "pauseApplication(address)": {
        "notice": "Pauses the given application’s eligibility to slash stakes.         Besides that stakers can't change authorization to the application.         Can be called only by the Panic Button of the particular         application. The paused application can not slash stakes until         it is approved again by the Governance using `approveApplication`         function. Should be used only in case of an emergency."
      },
      "processSlashing(uint256)": {
        "notice": "Takes the given number of queued slashing operations and         processes them. Receives 5% of the slashed amount.         Executes `involuntaryAuthorizationDecrease` function on each         affected application."
      },
      "pushNotificationReward(uint96)": {
        "notice": "Transfer some amount of T tokens as reward for notifications         of misbehaviour"
      },
      "refreshKeepStakeOwner(address)": {
        "notice": "Refresh Keep stake owner. Can be called only by the old owner         or their staking provider."
      },
      "requestAuthorizationDecrease(address)": {
        "notice": "Requests decrease of all authorizations for the given staking         provider on all applications by all authorized amount.         It may not change the authorized amount immediatelly. When         it happens depends on the application. Can only be called by the         given staking provider’s authorizer. Overwrites pending         authorization decrease for the given staking provider and         application."
      },
      "requestAuthorizationDecrease(address,address,uint96)": {
        "notice": "Requests decrease of the authorization for the given staking         provider on the given application by the provided amount.         It may not change the authorized amount immediatelly. When         it happens depends on the application. Can only be called by the         given staking provider’s authorizer. Overwrites pending         authorization decrease for the given staking provider and         application if the application agrees for that. If the         application does not agree for overwriting, the function         reverts."
      },
      "rolesOf(address)": {
        "notice": "Gets the stake owner, the beneficiary and the authorizer         for the specified staking provider address."
      },
      "seize(uint96,uint256,address,address[])": {
        "notice": "Adds staking providers to the slashing queue along with the         amount. The notifier will receive reward per each provider from         notifiers treasury. Can only be called by application         authorized for all staking providers in the array."
      },
      "setAuthorizationCeiling(uint256)": {
        "notice": "Sets the maximum number of applications one staking provider can         have authorized. Used to protect against DoSing slashing queue.         Can only be called by the Governance."
      },
      "setMinimumStakeAmount(uint96)": {
        "notice": "Allows the Governance to set the minimum required stake amount.         This amount is required to protect against griefing the staking         contract and individual applications are allowed to require         higher minimum stakes if necessary."
      },
      "setNotificationReward(uint96)": {
        "notice": "Sets reward in T tokens for notification of misbehaviour         of one staking provider. Can only be called by the governance."
      },
      "setPanicButton(address,address)": {
        "notice": "Sets the Panic Button role for the given application to the         provided address. Can only be called by the Governance. If the         Panic Button for the given application should be disabled, the         role address should be set to 0x0 address."
      },
      "setStakeDiscrepancyPenalty(uint96,uint256)": {
        "notice": "Sets the penalty amount for stake discrepancy and reward         multiplier for reporting it. The penalty is seized from the         delegated stake, and 5% of the penalty, scaled by the         multiplier, is given to the notifier. The rest of the tokens are         burned. Can only be called by the Governance. See `seize` function."
      },
      "slash(uint96,address[])": {
        "notice": "Adds staking providers to the slashing queue along with the         amount that should be slashed from each one of them. Can only be         called by application authorized for all staking providers in         the array."
      },
      "stake(address,address,address,uint96)": {
        "notice": "Creates a delegation with `msg.sender` owner with the given         staking provider, beneficiary, and authorizer. Transfers the         given amount of T to the staking contract."
      },
      "stakeKeep(address)": {
        "notice": "Copies delegation from the legacy KEEP staking contract to T         staking contract. No tokens are transferred. Caches the active         stake amount from KEEP staking contract. Can be called by         anyone."
      },
      "stakeNu(address,address,address)": {
        "notice": "Copies delegation from the legacy NU staking contract to T         staking contract, additionally appointing beneficiary and         authorizer roles. Caches the amount staked in NU staking         contract. Can be called only by the original delegation owner."
      },
      "stakedNu(address)": {
        "notice": "Returns staked amount of NU for the specified staking provider."
      },
      "stakes(address)": {
        "notice": "Returns staked amount of T, Keep and Nu for the specified         staking provider."
      },
      "topUp(address,uint96)": {
        "notice": "Increases the amount of the stake for the given staking provider."
      },
      "topUpKeep(address)": {
        "notice": "Propagates information about stake top-up from the legacy KEEP         staking contract to T staking contract. Can be called only by         the owner or the staking provider."
      },
      "topUpNu(address)": {
        "notice": "Propagates information about stake top-up from the legacy NU         staking contract to T staking contract. Can be called only by         the owner or the staking provider."
      },
      "transferGovernance(address)": {
        "notice": "Transfers ownership of the contract to `newGuvnor`."
      },
      "unstakeAll(address)": {
        "notice": "Sets cached legacy stake amount to 0, sets the liquid T stake         amount to 0 and withdraws all liquid T from the stake to the         owner. Reverts if there is at least one non-zero authorization.         Can be called only by the delegation owner or the staking         provider. Can only be called when 24h passed since the stake         has been delegated."
      },
      "unstakeKeep(address)": {
        "notice": "Sets the legacy KEEP staking contract active stake amount cached         in T staking contract to 0. Reverts if the amount of liquid T         staked in T staking contract is lower than the highest         application authorization. This function allows to unstake from         KEEP staking contract and still being able to operate in T         network and earning rewards based on the liquid T staked. Can be         called only by the delegation owner or the staking provider.         Can only be called when 24h passed since the stake has been         delegated."
      },
      "unstakeNu(address,uint96)": {
        "notice": "Reduces cached legacy NU stake amount by the provided amount.         Reverts if there is at least one authorization higher than the         sum of remaining legacy NU stake and liquid T stake for that         staking provider or if the untaked amount is higher than the         cached legacy stake amount. If succeeded, the legacy NU stake         can be partially or fully undelegated on the legacy staking         contract. This function allows to unstake from NU staking         contract and still being able to operate in T network and         earning rewards based on the liquid T staked. Can be called only         by the delegation owner or the staking provider. Can only be         called when 24h passed since the stake has been delegated."
      },
      "unstakeT(address,uint96)": {
        "notice": "Reduces the liquid T stake amount by the provided amount and         withdraws T to the owner. Reverts if there is at least one         authorization higher than the sum of the legacy stake and         remaining liquid T stake or if the unstake amount is higher than         the liquid T stake amount. Can be called only by the owner or         the staking provider. Can only be called when 24h passed since         the stake has been delegated."
      },
      "withdrawNotificationReward(address,uint96)": {
        "notice": "Withdraw some amount of T tokens from notifiers treasury.         Can only be called by the governance."
      }
    },
    "notice": "TokenStaking is the main staking contract of the Threshold Network.         Apart from the basic usage of enabling T stakes, it also acts as a         sort of \"meta-staking\" contract, accepting existing legacy NU/KEEP         stakes. Additionally, it serves as application manager for the apps         that run on the Threshold Network. Note that legacy NU/KEEP staking         contracts see TokenStaking as an application (e.g., slashing is         requested by TokenStaking and performed by the legacy contracts).",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10141,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_delegates",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 10146,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_checkpoints",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint128)dyn_storage)"
      },
      {
        "astId": 10149,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "_totalSupplyCheckpoints",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint128)dyn_storage"
      },
      {
        "astId": 10153,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 12878,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "governance",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 12880,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "minTStakeAmount",
        "offset": 20,
        "slot": "51",
        "type": "t_uint96"
      },
      {
        "astId": 12882,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "authorizationCeiling",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 12884,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "stakeDiscrepancyPenalty",
        "offset": 0,
        "slot": "53",
        "type": "t_uint96"
      },
      {
        "astId": 12886,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "stakeDiscrepancyRewardMultiplier",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 12888,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "notifiersTreasury",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 12890,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "notificationReward",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 12895,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "stakingProviders",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_struct(StakingProviderInfo)12821_storage)"
      },
      {
        "astId": 12900,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "applicationInfo",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_struct(ApplicationInfo)12832_storage)"
      },
      {
        "astId": 12903,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "applications",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 12907,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "slashingQueue",
        "offset": 0,
        "slot": "60",
        "type": "t_array(t_struct(SlashingEvent)12837_storage)dyn_storage"
      },
      {
        "astId": 12909,
        "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
        "label": "slashingQueueIndex",
        "offset": 0,
        "slot": "61",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(SlashingEvent)12837_storage)dyn_storage": {
        "base": "t_struct(SlashingEvent)12837_storage",
        "encoding": "dynamic_array",
        "label": "struct TokenStaking.SlashingEvent[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint128)dyn_storage": {
        "base": "t_uint128",
        "encoding": "dynamic_array",
        "label": "uint128[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ApplicationStatus)12798": {
        "encoding": "inplace",
        "label": "enum TokenStaking.ApplicationStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_uint128)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint128[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint128)dyn_storage"
      },
      "t_mapping(t_address,t_struct(AppAuthorization)12826_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenStaking.AppAuthorization)",
        "numberOfBytes": "32",
        "value": "t_struct(AppAuthorization)12826_storage"
      },
      "t_mapping(t_address,t_struct(ApplicationInfo)12832_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenStaking.ApplicationInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ApplicationInfo)12832_storage"
      },
      "t_mapping(t_address,t_struct(StakingProviderInfo)12821_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenStaking.StakingProviderInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingProviderInfo)12821_storage"
      },
      "t_struct(AppAuthorization)12826_storage": {
        "encoding": "inplace",
        "label": "struct TokenStaking.AppAuthorization",
        "members": [
          {
            "astId": 12823,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "authorized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 12825,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "deauthorizing",
            "offset": 12,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ApplicationInfo)12832_storage": {
        "encoding": "inplace",
        "label": "struct TokenStaking.ApplicationInfo",
        "members": [
          {
            "astId": 12829,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(ApplicationStatus)12798"
          },
          {
            "astId": 12831,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "panicButton",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(SlashingEvent)12837_storage": {
        "encoding": "inplace",
        "label": "struct TokenStaking.SlashingEvent",
        "members": [
          {
            "astId": 12834,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "stakingProvider",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12836,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "amount",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(StakingProviderInfo)12821_storage": {
        "encoding": "inplace",
        "label": "struct TokenStaking.StakingProviderInfo",
        "members": [
          {
            "astId": 12800,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "nuInTStake",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 12802,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "owner",
            "offset": 12,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12804,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "keepInTStake",
            "offset": 0,
            "slot": "1",
            "type": "t_uint96"
          },
          {
            "astId": 12806,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "beneficiary",
            "offset": 12,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 12808,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "tStake",
            "offset": 0,
            "slot": "2",
            "type": "t_uint96"
          },
          {
            "astId": 12810,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "authorizer",
            "offset": 12,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 12815,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "authorizations",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(AppAuthorization)12826_storage)"
          },
          {
            "astId": 12818,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "authorizedApplications",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12820,
            "contract": "contracts/staking/TokenStaking.sol:TokenStaking",
            "label": "startStakingTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}
